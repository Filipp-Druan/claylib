;; Generated by :claw at 2023-03-03T07:53:38.907761Z
(uiop:define-package :claylib/wrap (:use))
(uiop:define-package :claylib/wrap~pristine (:use :cl))
(common-lisp:in-package :claylib/wrap~pristine)

(defparameter claylib/wrap::+beige+ nil)

(defparameter claylib/wrap::+black+ nil)

(defparameter claylib/wrap::+blank+ nil)

(defparameter claylib/wrap::+blue+ nil)

(defparameter claylib/wrap::+brown+ nil)

(defparameter claylib/wrap::+darkblue+ nil)

(defparameter claylib/wrap::+darkbrown+ nil)

(defparameter claylib/wrap::+darkgray+ nil)

(defparameter claylib/wrap::+darkgreen+ nil)

(defparameter claylib/wrap::+darkpurple+ nil)

(defparameter claylib/wrap::+deg2rad+ 0.01745329238474369D0)

(defparameter claylib/wrap::+epsilon+ 9.999999974752427D-7)

(defparameter claylib/wrap::+fp-ilogb0+ -2147483648)

(defparameter claylib/wrap::+fp-ilogbnan+ -2147483648)

(defparameter claylib/wrap::+fp-infinite+ 1)

(defparameter claylib/wrap::+fp-nan+ 0)

(defparameter claylib/wrap::+fp-normal+ 4)

(defparameter claylib/wrap::+fp-subnormal+ 3)

(defparameter claylib/wrap::+fp-zero+ 2)

(defparameter claylib/wrap::+gold+ nil)

(defparameter claylib/wrap::+gray+ nil)

(defparameter claylib/wrap::+green+ nil)

(defparameter claylib/wrap::+huge-val+ :short-float-positive-infinity)

(defparameter claylib/wrap::+huge-valf+ :short-float-positive-infinity)

(defparameter claylib/wrap::+huge-vall+ :short-float-positive-infinity)

(defparameter claylib/wrap::+infinity+ :short-float-positive-infinity)

(defparameter claylib/wrap::+lightgray+ nil)

(defparameter claylib/wrap::+lime+ nil)

(defparameter claylib/wrap::+magenta+ nil)

(defparameter claylib/wrap::+maroon+ nil)

(defparameter claylib/wrap::+material-map-diffuse+ 0)

(defparameter claylib/wrap::+material-map-specular+ 1)

(defparameter claylib/wrap::+math-errexcept+ 2)

(defparameter claylib/wrap::+math-errno+ 1)

(defparameter claylib/wrap::+mouse-left-button+ 0)

(defparameter claylib/wrap::+mouse-middle-button+ 2)

(defparameter claylib/wrap::+mouse-right-button+ 1)

(defparameter claylib/wrap::+m-1-pi+ 0.3183098861837907D0)

(defparameter claylib/wrap::+m-2-pi+ 0.6366197723675814D0)

(defparameter claylib/wrap::+m-2-sqrtpi+ 1.1283791670955126D0)

(defparameter claylib/wrap::+m-e+ 2.718281828459045D0)

(defparameter claylib/wrap::+m-ln10+ 2.302585092994046D0)

(defparameter claylib/wrap::+m-ln2+ 0.6931471805599453D0)

(defparameter claylib/wrap::+m-log10e+ 0.4342944819032518D0)

(defparameter claylib/wrap::+m-log2e+ 1.4426950408889634D0)

(defparameter claylib/wrap::+m-pi+ 3.141592653589793D0)

(defparameter claylib/wrap::+m-pi-2+ 1.5707963267948966D0)

(defparameter claylib/wrap::+m-pi-4+ 0.7853981633974483D0)

(defparameter claylib/wrap::+m-sqrt1-2+ 0.7071067811865476D0)

(defparameter claylib/wrap::+m-sqrt2+ 1.4142135623730951D0)

(defparameter claylib/wrap::+nan+ :double-nan)

(defparameter claylib/wrap::+orange+ nil)

(defparameter claylib/wrap::+pi+ 3.1415927410125732D0)

(defparameter claylib/wrap::+pink+ nil)

(defparameter claylib/wrap::+purple+ nil)

(defparameter claylib/wrap::+rad2deg+ 57.2957763671875D0)

(defparameter claylib/wrap::+rayguiapi+ nil)

(defparameter claylib/wrap::+raygui-h+ nil)

(defparameter claylib/wrap::+raygui-support-log-info+ nil)

(defparameter claylib/wrap::+raygui-version+ "3.2")

(defparameter claylib/wrap::+raylib-h+ nil)

(defparameter claylib/wrap::+raylib-version+ "4.2")

(defparameter claylib/wrap::+raymath-h+ nil)

(defparameter claylib/wrap::+raywhite+ nil)

(defparameter claylib/wrap::+red+ nil)

(defparameter claylib/wrap::+rlapi+ nil)

(defparameter claylib/wrap::+rl-color-type+ nil)

(defparameter claylib/wrap::+rl-matrix-type+ nil)

(defparameter claylib/wrap::+rl-quaternion-type+ nil)

(defparameter claylib/wrap::+rl-rectangle-type+ nil)

(defparameter claylib/wrap::+rl-vector2-type+ nil)

(defparameter claylib/wrap::+rl-vector3-type+ nil)

(defparameter claylib/wrap::+rl-vector4-type+ nil)

(defparameter claylib/wrap::+rmapi+ nil)

(defparameter claylib/wrap::+scrollbar-left-side+ 0)

(defparameter claylib/wrap::+scrollbar-right-side+ 1)

(defparameter claylib/wrap::+shader-loc-map-diffuse+ 15)

(defparameter claylib/wrap::+shader-loc-map-specular+ 16)

(defparameter claylib/wrap::+skyblue+ nil)

(defparameter claylib/wrap::+violet+ nil)

(defparameter claylib/wrap::+white+ nil)

(defparameter claylib/wrap::+yellow+ nil)

(defparameter claylib/wrap::+%atfile-source+ 1)

(defparameter claylib/wrap::+%bits-floatn-common-h+ nil)

(defparameter claylib/wrap::+%bits-floatn-h+ nil)

(defparameter claylib/wrap::+%bits-libm-simd-decl-stubs-h+ 1)

(defparameter claylib/wrap::+%bits-time64-h+ 1)

(defparameter claylib/wrap::+%bits-typesizes-h+ 1)

(defparameter claylib/wrap::+%bits-types-h+ 1)

(defparameter claylib/wrap::+%default-source+ 1)

(defparameter claylib/wrap::+%features-h+ 1)

(defparameter claylib/wrap::+%integral-max-bits+ 64)

(defparameter claylib/wrap::+%math-h+ 1)

(defparameter claylib/wrap::+%msc-build+ 1)

(defparameter claylib/wrap::+%msc-extensions+ 1)

(defparameter claylib/wrap::+%msc-full-ver+ 191400000)

(defparameter claylib/wrap::+%msc-ver+ 1914)

(defparameter claylib/wrap::+%m-amd64+ 100)

(defparameter claylib/wrap::+%m-x64+ 100)

(defparameter claylib/wrap::+%mdouble-+ nil)

(defparameter claylib/wrap::+%posix-c-source+ 200809)

(defparameter claylib/wrap::+%posix-source+ 1)

(defparameter claylib/wrap::+%stdc-predef-h+ 1)

(defparameter claylib/wrap::+%sys-cdefs-h+ 1)

(defparameter claylib/wrap::+%va-list+ nil)

(defparameter claylib/wrap::+%win32+ 1)

(defparameter claylib/wrap::+%win64+ 1)

(defparameter claylib/wrap::+%%atomic-acquire+ 2)

(defparameter claylib/wrap::+%%atomic-acq-rel+ 4)

(defparameter claylib/wrap::+%%atomic-consume+ 1)

(defparameter claylib/wrap::+%%atomic-relaxed+ 0)

(defparameter claylib/wrap::+%%atomic-release+ 3)

(defparameter claylib/wrap::+%%atomic-seq-cst+ 5)

(defparameter claylib/wrap::+%%begin-decls+ nil)

(defparameter claylib/wrap::+%%biggest-alignment--+ 16)

(defparameter claylib/wrap::+%%blkcnt64-t-type+ nil)

(defparameter claylib/wrap::+%%blkcnt-t-type+ nil)

(defparameter claylib/wrap::+%%blksize-t-type+ nil)

(defparameter claylib/wrap::+%%byte-order--+ 1234)

(defparameter claylib/wrap::+%%cfloat32+ nil)

(defparameter claylib/wrap::+%%cfloat32x+ nil)

(defparameter claylib/wrap::+%%cfloat64+ nil)

(defparameter claylib/wrap::+%%cfloat64x+ nil)

(defparameter claylib/wrap::+%%char16-type--+ nil)

(defparameter claylib/wrap::+%%char32-type--+ nil)

(defparameter claylib/wrap::+%%char-bit--+ 8)

(defparameter claylib/wrap::+%%clang-atomic-bool-lock-free+ 2)

(defparameter claylib/wrap::+%%clang-atomic-char16-t-lock-free+ 2)

(defparameter claylib/wrap::+%%clang-atomic-char32-t-lock-free+ 2)

(defparameter claylib/wrap::+%%clang-atomic-char-lock-free+ 2)

(defparameter claylib/wrap::+%%clang-atomic-int-lock-free+ 2)

(defparameter claylib/wrap::+%%clang-atomic-llong-lock-free+ 2)

(defparameter claylib/wrap::+%%clang-atomic-long-lock-free+ 2)

(defparameter claylib/wrap::+%%clang-atomic-pointer-lock-free+ 2)

(defparameter claylib/wrap::+%%clang-atomic-short-lock-free+ 2)

(defparameter claylib/wrap::+%%clang-atomic-wchar-t-lock-free+ 2)

(defparameter claylib/wrap::+%%claw-uberheader+ 1)

(defparameter claylib/wrap::+%%clockid-t-type+ nil)

(defparameter claylib/wrap::+%%clock-t-type+ nil)

(defparameter claylib/wrap::+%%constant-cfstrings--+ 1)

(defparameter claylib/wrap::+%%cpu-mask-type+ nil)

(defparameter claylib/wrap::+%%daddr-t-type+ nil)

(defparameter claylib/wrap::+%%dbl-decimal-dig--+ 17)

(defparameter claylib/wrap::+%%dbl-denorm-min--+ 5.0D-324)

(defparameter claylib/wrap::+%%dbl-dig--+ 15)

(defparameter claylib/wrap::+%%dbl-epsilon--+ 2.220446049250313D-16)

(defparameter claylib/wrap::+%%dbl-has-denorm--+ 1)

(defparameter claylib/wrap::+%%dbl-has-infinity--+ 1)

(defparameter claylib/wrap::+%%dbl-has-quiet-nan--+ 1)

(defparameter claylib/wrap::+%%dbl-mant-dig--+ 53)

(defparameter claylib/wrap::+%%dbl-max-10-exp--+ 308)

(defparameter claylib/wrap::+%%dbl-max-exp--+ 1024)

(defparameter claylib/wrap::+%%dbl-max--+ 1.7976931348623157D+308)

(defparameter claylib/wrap::+%%dbl-min-10-exp--+ -307)

(defparameter claylib/wrap::+%%dbl-min-exp--+ -1021)

(defparameter claylib/wrap::+%%dbl-min--+ 2.2250738585072014D-308)

(defparameter claylib/wrap::+%%decimal-dig--+ 17)

(defparameter claylib/wrap::+%%decl-simd-acos+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosf+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosh+ nil)

(defparameter claylib/wrap::+%%decl-simd-acoshf+ nil)

(defparameter claylib/wrap::+%%decl-simd-acoshf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-acoshf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-acoshf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-acoshf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-acoshf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-acoshf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-acoshf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-acoshl+ nil)

(defparameter claylib/wrap::+%%decl-simd-acosl+ nil)

(defparameter claylib/wrap::+%%decl-simd-asin+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinf+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinh+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinhf+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinhf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinhf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinhf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinhf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinhf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinhf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinhf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinhl+ nil)

(defparameter claylib/wrap::+%%decl-simd-asinl+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2f+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2f128+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2f128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2f16+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2f32+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2f32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2f64+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2f64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-atan2l+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanf+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanh+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanhf+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanhf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanhf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanhf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanhf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanhf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanhf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanhf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanhl+ nil)

(defparameter claylib/wrap::+%%decl-simd-atanl+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrt+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrtf+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrtf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrtf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrtf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrtf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrtf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrtf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrtf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-cbrtl+ nil)

(defparameter claylib/wrap::+%%decl-simd-cos+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosf+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosh+ nil)

(defparameter claylib/wrap::+%%decl-simd-coshf+ nil)

(defparameter claylib/wrap::+%%decl-simd-coshf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-coshf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-coshf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-coshf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-coshf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-coshf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-coshf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-coshl+ nil)

(defparameter claylib/wrap::+%%decl-simd-cosl+ nil)

(defparameter claylib/wrap::+%%decl-simd-erf+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfc+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfcf+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfcf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfcf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfcf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfcf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfcf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfcf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfcf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfcl+ nil)

(defparameter claylib/wrap::+%%decl-simd-erff+ nil)

(defparameter claylib/wrap::+%%decl-simd-erff128+ nil)

(defparameter claylib/wrap::+%%decl-simd-erff128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-erff16+ nil)

(defparameter claylib/wrap::+%%decl-simd-erff32+ nil)

(defparameter claylib/wrap::+%%decl-simd-erff32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-erff64+ nil)

(defparameter claylib/wrap::+%%decl-simd-erff64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-erfl+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10f+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10f128+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10f128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10f16+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10f32+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10f32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10f64+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10f64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp10l+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2f+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2f128+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2f128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2f16+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2f32+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2f32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2f64+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2f64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-exp2l+ nil)

(defparameter claylib/wrap::+%%decl-simd-expf+ nil)

(defparameter claylib/wrap::+%%decl-simd-expf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-expf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-expf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-expf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-expf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-expf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-expf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-expl+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1f+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1f128+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1f128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1f16+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1f32+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1f32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1f64+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1f64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-expm1l+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypot+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypotf+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypotf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypotf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypotf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypotf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypotf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypotf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypotf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-hypotl+ nil)

(defparameter claylib/wrap::+%%decl-simd-log+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10f+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10f128+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10f128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10f16+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10f32+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10f32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10f64+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10f64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-log10l+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1p+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1pf+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1pf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1pf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1pf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1pf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1pf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1pf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1pf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-log1pl+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2f+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2f128+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2f128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2f16+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2f32+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2f32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2f64+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2f64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-log2l+ nil)

(defparameter claylib/wrap::+%%decl-simd-logf+ nil)

(defparameter claylib/wrap::+%%decl-simd-logf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-logf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-logf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-logf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-logf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-logf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-logf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-logl+ nil)

(defparameter claylib/wrap::+%%decl-simd-pow+ nil)

(defparameter claylib/wrap::+%%decl-simd-powf+ nil)

(defparameter claylib/wrap::+%%decl-simd-powf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-powf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-powf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-powf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-powf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-powf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-powf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-powl+ nil)

(defparameter claylib/wrap::+%%decl-simd-sin+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincos+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincosf+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincosf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincosf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincosf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincosf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincosf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincosf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincosf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-sincosl+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinf+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinh+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinhf+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinhf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinhf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinhf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinhf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinhf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinhf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinhf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinhl+ nil)

(defparameter claylib/wrap::+%%decl-simd-sinl+ nil)

(defparameter claylib/wrap::+%%decl-simd-tan+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanf+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanf128+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanh+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanhf+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanhf128x+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanhf16+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanhf32+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanhf32x+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanhf64+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanhf64x+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanhl+ nil)

(defparameter claylib/wrap::+%%decl-simd-tanl+ nil)

(defparameter claylib/wrap::+%%dev-t-type+ nil)

(defparameter claylib/wrap::+%%end-decls+ nil)

(defparameter claylib/wrap::+%%fd-setsize+ 1024)

(defparameter claylib/wrap::+%%finite-math-only--+ 0)

(defparameter claylib/wrap::+%%flt-decimal-dig--+ 9)

(defparameter claylib/wrap::+%%flt-denorm-min--+ 1.401298464324817D-45)

(defparameter claylib/wrap::+%%flt-dig--+ 6)

(defparameter claylib/wrap::+%%flt-epsilon--+ 1.1920928955078125D-7)

(defparameter claylib/wrap::+%%flt-eval-method--+ 0)

(defparameter claylib/wrap::+%%flt-has-denorm--+ 1)

(defparameter claylib/wrap::+%%flt-has-infinity--+ 1)

(defparameter claylib/wrap::+%%flt-has-quiet-nan--+ 1)

(defparameter claylib/wrap::+%%flt-mant-dig--+ 24)

(defparameter claylib/wrap::+%%flt-max-10-exp--+ 38)

(defparameter claylib/wrap::+%%flt-max-exp--+ 128)

(defparameter claylib/wrap::+%%flt-max--+ 3.4028234663852886D+38)

(defparameter claylib/wrap::+%%flt-min-10-exp--+ -37)

(defparameter claylib/wrap::+%%flt-min-exp--+ -125)

(defparameter claylib/wrap::+%%flt-min--+ 1.1754943508222875D-38)

(defparameter claylib/wrap::+%%flt-radix--+ 2)

(defparameter claylib/wrap::+%%fp-logb0-is-min+ 1)

(defparameter claylib/wrap::+%%fp-logbnan-is-min+ 1)

(defparameter claylib/wrap::+%%fsblkcnt64-t-type+ nil)

(defparameter claylib/wrap::+%%fsblkcnt-t-type+ nil)

(defparameter claylib/wrap::+%%fsfilcnt64-t-type+ nil)

(defparameter claylib/wrap::+%%fsfilcnt-t-type+ nil)

(defparameter claylib/wrap::+%%fsid-t-type+ nil)

(defparameter claylib/wrap::+%%fsword-t-type+ nil)

(defparameter claylib/wrap::+%%fxsr--+ 1)

(defparameter claylib/wrap::+%%gcc-asm-flag-outputs--+ 1)

(defparameter claylib/wrap::+%%gcc-have-sync-compare-and-swap-1+ 1)

(defparameter claylib/wrap::+%%gcc-have-sync-compare-and-swap-2+ 1)

(defparameter claylib/wrap::+%%gcc-have-sync-compare-and-swap-4+ 1)

(defparameter claylib/wrap::+%%gcc-have-sync-compare-and-swap-8+ 1)

(defparameter claylib/wrap::+%%gid-t-type+ nil)

(defparameter claylib/wrap::+%%glibc-flt-eval-method+ 0)

(defparameter claylib/wrap::+%%glibc-internal-starting-header-implementation+ nil)

(defparameter claylib/wrap::+%%glibc-minor--+ 36)

(defparameter claylib/wrap::+%%glibc-use-deprecated-gets+ 0)

(defparameter claylib/wrap::+%%glibc-use-deprecated-scanf+ 0)

(defparameter claylib/wrap::+%%glibc-use-iec-60559-bfp-ext+ 0)

(defparameter claylib/wrap::+%%glibc-use-iec-60559-bfp-ext-c2x+ 0)

(defparameter claylib/wrap::+%%glibc-use-iec-60559-ext+ 0)

(defparameter claylib/wrap::+%%glibc-use-iec-60559-funcs-ext+ 0)

(defparameter claylib/wrap::+%%glibc-use-iec-60559-funcs-ext-c2x+ 0)

(defparameter claylib/wrap::+%%glibc-use-iec-60559-types-ext+ 0)

(defparameter claylib/wrap::+%%glibc-use-isoc2x+ 0)

(defparameter claylib/wrap::+%%glibc-use-lib-ext2+ 0)

(defparameter claylib/wrap::+%%glibc--+ 2)

(defparameter claylib/wrap::+%%gnuc-va-list+ 1)

(defparameter claylib/wrap::+%%gnu-library--+ 6)

(defparameter claylib/wrap::+%%have-distinct-float128+ 0)

(defparameter claylib/wrap::+%%have-distinct-float128x+ 0)

(defparameter claylib/wrap::+%%have-distinct-float16+ 0)

(defparameter claylib/wrap::+%%have-distinct-float32+ 0)

(defparameter claylib/wrap::+%%have-distinct-float32x+ 0)

(defparameter claylib/wrap::+%%have-distinct-float64+ 0)

(defparameter claylib/wrap::+%%have-distinct-float64x+ 0)

(defparameter claylib/wrap::+%%have-float128+ 0)

(defparameter claylib/wrap::+%%have-float128x+ 0)

(defparameter claylib/wrap::+%%have-float128-unlike-ldbl+ 0)

(defparameter claylib/wrap::+%%have-float16+ 0)

(defparameter claylib/wrap::+%%have-float32+ 1)

(defparameter claylib/wrap::+%%have-float32x+ 1)

(defparameter claylib/wrap::+%%have-float64+ 1)

(defparameter claylib/wrap::+%%have-float64x+ 1)

(defparameter claylib/wrap::+%%have-float64x-long-double+ 1)

(defparameter claylib/wrap::+%%have-floatn-not-typedef+ 0)

(defparameter claylib/wrap::+%%have-generic-selection+ 0)

(defparameter claylib/wrap::+%%id-t-type+ nil)

(defparameter claylib/wrap::+%%ino64-t-type+ nil)

(defparameter claylib/wrap::+%%ino-t-matches-ino64-t+ 1)

(defparameter claylib/wrap::+%%ino-t-type+ nil)

(defparameter claylib/wrap::+%%int16-c-suffix--+ nil)

(defparameter claylib/wrap::+%%int16-fm-td--+ "hd")

(defparameter claylib/wrap::+%%int16-fm-ti--+ "hi")

(defparameter claylib/wrap::+%%int16-max--+ 32767)

(defparameter claylib/wrap::+%%int16-type--+ nil)

(defparameter claylib/wrap::+%%int32-c-suffix--+ nil)

(defparameter claylib/wrap::+%%int32-fm-td--+ "d")

(defparameter claylib/wrap::+%%int32-fm-ti--+ "i")

(defparameter claylib/wrap::+%%int32-max--+ 2147483647)

(defparameter claylib/wrap::+%%int32-type--+ nil)

(defparameter claylib/wrap::+%%int64-c-suffix--+ nil)

(defparameter claylib/wrap::+%%int64-fm-td--+ "lld")

(defparameter claylib/wrap::+%%int64-fm-ti--+ "lli")

(defparameter claylib/wrap::+%%int64-max--+ 9223372036854775807)

(defparameter claylib/wrap::+%%int64-type--+ nil)

(defparameter claylib/wrap::+%%int8-c-suffix--+ nil)

(defparameter claylib/wrap::+%%int8-fm-td--+ "hhd")

(defparameter claylib/wrap::+%%int8-fm-ti--+ "hhi")

(defparameter claylib/wrap::+%%int8-max--+ 127)

(defparameter claylib/wrap::+%%int8-type--+ nil)

(defparameter claylib/wrap::+%%intmax-c-suffix--+ nil)

(defparameter claylib/wrap::+%%intmax-fm-td--+ "lld")

(defparameter claylib/wrap::+%%intmax-fm-ti--+ "lli")

(defparameter claylib/wrap::+%%intmax-max--+ 9223372036854775807)

(defparameter claylib/wrap::+%%intmax-type--+ nil)

(defparameter claylib/wrap::+%%intmax-width--+ 64)

(defparameter claylib/wrap::+%%intptr-fm-td--+ "lld")

(defparameter claylib/wrap::+%%intptr-fm-ti--+ "lli")

(defparameter claylib/wrap::+%%intptr-max--+ 9223372036854775807)

(defparameter claylib/wrap::+%%intptr-type--+ nil)

(defparameter claylib/wrap::+%%intptr-width--+ 64)

(defparameter claylib/wrap::+%%int-fast16-fm-td--+ "hd")

(defparameter claylib/wrap::+%%int-fast16-fm-ti--+ "hi")

(defparameter claylib/wrap::+%%int-fast16-max--+ 32767)

(defparameter claylib/wrap::+%%int-fast16-type--+ nil)

(defparameter claylib/wrap::+%%int-fast32-fm-td--+ "d")

(defparameter claylib/wrap::+%%int-fast32-fm-ti--+ "i")

(defparameter claylib/wrap::+%%int-fast32-max--+ 2147483647)

(defparameter claylib/wrap::+%%int-fast32-type--+ nil)

(defparameter claylib/wrap::+%%int-fast64-fm-td--+ "lld")

(defparameter claylib/wrap::+%%int-fast64-fm-ti--+ "lli")

(defparameter claylib/wrap::+%%int-fast64-max--+ 9223372036854775807)

(defparameter claylib/wrap::+%%int-fast64-type--+ nil)

(defparameter claylib/wrap::+%%int-fast8-fm-td--+ "hhd")

(defparameter claylib/wrap::+%%int-fast8-fm-ti--+ "hhi")

(defparameter claylib/wrap::+%%int-fast8-max--+ 127)

(defparameter claylib/wrap::+%%int-fast8-type--+ nil)

(defparameter claylib/wrap::+%%int-least16-fm-td--+ "hd")

(defparameter claylib/wrap::+%%int-least16-fm-ti--+ "hi")

(defparameter claylib/wrap::+%%int-least16-max--+ 32767)

(defparameter claylib/wrap::+%%int-least16-type--+ nil)

(defparameter claylib/wrap::+%%int-least32-fm-td--+ "d")

(defparameter claylib/wrap::+%%int-least32-fm-ti--+ "i")

(defparameter claylib/wrap::+%%int-least32-max--+ 2147483647)

(defparameter claylib/wrap::+%%int-least32-type--+ nil)

(defparameter claylib/wrap::+%%int-least64-fm-td--+ "lld")

(defparameter claylib/wrap::+%%int-least64-fm-ti--+ "lli")

(defparameter claylib/wrap::+%%int-least64-max--+ 9223372036854775807)

(defparameter claylib/wrap::+%%int-least64-type--+ nil)

(defparameter claylib/wrap::+%%int-least8-fm-td--+ "hhd")

(defparameter claylib/wrap::+%%int-least8-fm-ti--+ "hhi")

(defparameter claylib/wrap::+%%int-least8-max--+ 127)

(defparameter claylib/wrap::+%%int-least8-type--+ nil)

(defparameter claylib/wrap::+%%int-max--+ 2147483647)

(defparameter claylib/wrap::+%%kernel-old-timeval-matches-timeval64+ 1)

(defparameter claylib/wrap::+%%kernel-strict-names+ nil)

(defparameter claylib/wrap::+%%key-t-type+ nil)

(defparameter claylib/wrap::+%%ldbl-decimal-dig--+ 17)

(defparameter claylib/wrap::+%%ldbl-denorm-min--+ 5.0D-324)

(defparameter claylib/wrap::+%%ldbl-dig--+ 15)

(defparameter claylib/wrap::+%%ldbl-epsilon--+ 2.220446049250313D-16)

(defparameter claylib/wrap::+%%ldbl-has-denorm--+ 1)

(defparameter claylib/wrap::+%%ldbl-has-infinity--+ 1)

(defparameter claylib/wrap::+%%ldbl-has-quiet-nan--+ 1)

(defparameter claylib/wrap::+%%ldbl-mant-dig--+ 53)

(defparameter claylib/wrap::+%%ldbl-max-10-exp--+ 308)

(defparameter claylib/wrap::+%%ldbl-max-exp--+ 1024)

(defparameter claylib/wrap::+%%ldbl-max--+ 1.7976931348623157D+308)

(defparameter claylib/wrap::+%%ldbl-min-10-exp--+ -307)

(defparameter claylib/wrap::+%%ldbl-min-exp--+ -1021)

(defparameter claylib/wrap::+%%ldbl-min--+ 2.2250738585072014D-308)

(defparameter claylib/wrap::+%%ldouble-redirects-to-float128-abi+ 0)

(defparameter claylib/wrap::+%%leaf+ nil)

(defparameter claylib/wrap::+%%leaf-attr+ nil)

(defparameter claylib/wrap::+%%little-endian--+ 1)

(defparameter claylib/wrap::+%%long-long-max--+ 9223372036854775807)

(defparameter claylib/wrap::+%%long-max--+ 2147483647)

(defparameter claylib/wrap::+%%mathcall+ nil)

(defparameter claylib/wrap::+%%mathcall-narrow+ nil)

(defparameter claylib/wrap::+%%mathcall-narrow-args-1+ nil)

(defparameter claylib/wrap::+%%mathcall-narrow-args-2+ nil)

(defparameter claylib/wrap::+%%mathcall-narrow-args-3+ nil)

(defparameter claylib/wrap::+%%mathcall-narrow-normal+ nil)

(defparameter claylib/wrap::+%%mathcall-narrow-redir+ nil)

(defparameter claylib/wrap::+%%mathdecl+ nil)

(defparameter claylib/wrap::+%%mathdecl-1+ nil)

(defparameter claylib/wrap::+%%mathdecl-1-impl+ nil)

(defparameter claylib/wrap::+%%mathdecl-alias+ nil)

(defparameter claylib/wrap::+%%math-declare-ldouble+ 1)

(defparameter claylib/wrap::+%%math-declaring-double+ nil)

(defparameter claylib/wrap::+%%math-declaring-floatn+ nil)

(defparameter claylib/wrap::+%%math-precname+ nil)

(defparameter claylib/wrap::+%%mmx--+ 1)

(defparameter claylib/wrap::+%%mode-t-type+ nil)

(defparameter claylib/wrap::+%%nlink-t-type+ nil)

(defparameter claylib/wrap::+%%no-inline--+ 1)

(defparameter claylib/wrap::+%%no-math-inlines+ 1)

(defparameter claylib/wrap::+%%objc-bool-is-bool+ 0)

(defparameter claylib/wrap::+%%off64-t-type+ nil)

(defparameter claylib/wrap::+%%off-t-matches-off64-t+ 1)

(defparameter claylib/wrap::+%%off-t-type+ nil)

(defparameter claylib/wrap::+%%opencl-memory-scope-all-svm-devices+ 3)

(defparameter claylib/wrap::+%%opencl-memory-scope-device+ 2)

(defparameter claylib/wrap::+%%opencl-memory-scope-sub-group+ 4)

(defparameter claylib/wrap::+%%opencl-memory-scope-work-group+ 1)

(defparameter claylib/wrap::+%%opencl-memory-scope-work-item+ 0)

(defparameter claylib/wrap::+%%order-big-endian--+ 4321)

(defparameter claylib/wrap::+%%order-little-endian--+ 1234)

(defparameter claylib/wrap::+%%order-pdp-endian--+ 3412)

(defparameter claylib/wrap::+%%pic--+ 2)

(defparameter claylib/wrap::+%%pid-t-type+ nil)

(defparameter claylib/wrap::+%%pointer-width--+ 64)

(defparameter claylib/wrap::+%%pragma-redefine-extname+ 1)

(defparameter claylib/wrap::+%%ptrdiff-fm-td--+ "lld")

(defparameter claylib/wrap::+%%ptrdiff-fm-ti--+ "lli")

(defparameter claylib/wrap::+%%ptrdiff-max--+ 9223372036854775807)

(defparameter claylib/wrap::+%%ptrdiff-type--+ nil)

(defparameter claylib/wrap::+%%ptrdiff-width--+ 64)

(defparameter claylib/wrap::+%%register-prefix--+ nil)

(defparameter claylib/wrap::+%%rlim64-t-type+ nil)

(defparameter claylib/wrap::+%%rlim-t-matches-rlim64-t+ 1)

(defparameter claylib/wrap::+%%rlim-t-type+ nil)

(defparameter claylib/wrap::+%%s16-type+ nil)

(defparameter claylib/wrap::+%%s32-type+ nil)

(defparameter claylib/wrap::+%%s64-type+ nil)

(defparameter claylib/wrap::+%%schar-max--+ 127)

(defparameter claylib/wrap::+%%seg-fs+ 1)

(defparameter claylib/wrap::+%%seg-gs+ 1)

(defparameter claylib/wrap::+%%shrt-max--+ 32767)

(defparameter claylib/wrap::+%%sig-atomic-max--+ 2147483647)

(defparameter claylib/wrap::+%%sig-atomic-width--+ 32)

(defparameter claylib/wrap::+%%sizeof-double--+ 8)

(defparameter claylib/wrap::+%%sizeof-float--+ 4)

(defparameter claylib/wrap::+%%sizeof-int128--+ 16)

(defparameter claylib/wrap::+%%sizeof-int--+ 4)

(defparameter claylib/wrap::+%%sizeof-long-double--+ 8)

(defparameter claylib/wrap::+%%sizeof-long-long--+ 8)

(defparameter claylib/wrap::+%%sizeof-long--+ 4)

(defparameter claylib/wrap::+%%sizeof-pointer--+ 8)

(defparameter claylib/wrap::+%%sizeof-ptrdiff-t--+ 8)

(defparameter claylib/wrap::+%%sizeof-short--+ 2)

(defparameter claylib/wrap::+%%sizeof-size-t--+ 8)

(defparameter claylib/wrap::+%%sizeof-wchar-t--+ 2)

(defparameter claylib/wrap::+%%sizeof-wint-t--+ 2)

(defparameter claylib/wrap::+%%size-fmtx--+ "llX")

(defparameter claylib/wrap::+%%size-fm-to--+ "llo")

(defparameter claylib/wrap::+%%size-fm-tu--+ "llu")

(defparameter claylib/wrap::+%%size-fm-tx--+ "llx")

(defparameter claylib/wrap::+%%size-max--+ -1)

(defparameter claylib/wrap::+%%size-type--+ nil)

(defparameter claylib/wrap::+%%size-width--+ 64)

(defparameter claylib/wrap::+%%slong32-type+ nil)

(defparameter claylib/wrap::+%%slongword-type+ nil)

(defparameter claylib/wrap::+%%squad-type+ nil)

(defparameter claylib/wrap::+%%sse2-math--+ 1)

(defparameter claylib/wrap::+%%sse2--+ 1)

(defparameter claylib/wrap::+%%sse-math--+ 1)

(defparameter claylib/wrap::+%%sse--+ 1)

(defparameter claylib/wrap::+%%ssize-t-type+ nil)

(defparameter claylib/wrap::+%%statfs-matches-statfs64+ 1)

(defparameter claylib/wrap::+%%stdarg-h+ nil)

(defparameter claylib/wrap::+%%stdbool-h+ nil)

(defparameter claylib/wrap::+%%stdc-hosted--+ 1)

(defparameter claylib/wrap::+%%stdc-iec-559-complex--+ 1)

(defparameter claylib/wrap::+%%stdc-iec-559--+ 1)

(defparameter claylib/wrap::+%%stdc-iec-60559-bfp--+ 201404)

(defparameter claylib/wrap::+%%stdc-iec-60559-complex--+ 201404)

(defparameter claylib/wrap::+%%stdc-iso-10646--+ 201706)

(defparameter claylib/wrap::+%%stdc-utf-16--+ 1)

(defparameter claylib/wrap::+%%stdc-utf-32--+ 1)

(defparameter claylib/wrap::+%%stdc-version--+ nil)

(defparameter claylib/wrap::+%%std-type+ nil)

(defparameter claylib/wrap::+%%suseconds64-t-type+ nil)

(defparameter claylib/wrap::+%%suseconds-t-type+ nil)

(defparameter claylib/wrap::+%%sword-type+ nil)

(defparameter claylib/wrap::+%%syscall-slong-type+ nil)

(defparameter claylib/wrap::+%%syscall-ulong-type+ nil)

(defparameter claylib/wrap::+%%syscall-wordsize+ 64)

(defparameter claylib/wrap::+%%throw+ nil)

(defparameter claylib/wrap::+%%thrownl+ nil)

(defparameter claylib/wrap::+%%time64-t-type+ nil)

(defparameter claylib/wrap::+%%timer-t-type+ nil)

(defparameter claylib/wrap::+%%timesize+ 64)

(defparameter claylib/wrap::+%%time-t-type+ nil)

(defparameter claylib/wrap::+%%u16-type+ nil)

(defparameter claylib/wrap::+%%u32-type+ nil)

(defparameter claylib/wrap::+%%u64-type+ nil)

(defparameter claylib/wrap::+%%uid-t-type+ nil)

(defparameter claylib/wrap::+%%uint16-c-suffix--+ nil)

(defparameter claylib/wrap::+%%uint16-fmtx--+ "hX")

(defparameter claylib/wrap::+%%uint16-fm-to--+ "ho")

(defparameter claylib/wrap::+%%uint16-fm-tu--+ "hu")

(defparameter claylib/wrap::+%%uint16-fm-tx--+ "hx")

(defparameter claylib/wrap::+%%uint16-max--+ 65535)

(defparameter claylib/wrap::+%%uint16-type--+ nil)

(defparameter claylib/wrap::+%%uint32-c-suffix--+ nil)

(defparameter claylib/wrap::+%%uint32-fmtx--+ "X")

(defparameter claylib/wrap::+%%uint32-fm-to--+ "o")

(defparameter claylib/wrap::+%%uint32-fm-tu--+ "u")

(defparameter claylib/wrap::+%%uint32-fm-tx--+ "x")

(defparameter claylib/wrap::+%%uint32-max--+ 4294967295)

(defparameter claylib/wrap::+%%uint32-type--+ nil)

(defparameter claylib/wrap::+%%uint64-c-suffix--+ nil)

(defparameter claylib/wrap::+%%uint64-fmtx--+ "llX")

(defparameter claylib/wrap::+%%uint64-fm-to--+ "llo")

(defparameter claylib/wrap::+%%uint64-fm-tu--+ "llu")

(defparameter claylib/wrap::+%%uint64-fm-tx--+ "llx")

(defparameter claylib/wrap::+%%uint64-max--+ -1)

(defparameter claylib/wrap::+%%uint64-type--+ nil)

(defparameter claylib/wrap::+%%uint8-c-suffix--+ nil)

(defparameter claylib/wrap::+%%uint8-fmtx--+ "hhX")

(defparameter claylib/wrap::+%%uint8-fm-to--+ "hho")

(defparameter claylib/wrap::+%%uint8-fm-tu--+ "hhu")

(defparameter claylib/wrap::+%%uint8-fm-tx--+ "hhx")

(defparameter claylib/wrap::+%%uint8-max--+ 255)

(defparameter claylib/wrap::+%%uint8-type--+ nil)

(defparameter claylib/wrap::+%%uintmax-c-suffix--+ nil)

(defparameter claylib/wrap::+%%uintmax-fmtx--+ "llX")

(defparameter claylib/wrap::+%%uintmax-fm-to--+ "llo")

(defparameter claylib/wrap::+%%uintmax-fm-tu--+ "llu")

(defparameter claylib/wrap::+%%uintmax-fm-tx--+ "llx")

(defparameter claylib/wrap::+%%uintmax-max--+ -1)

(defparameter claylib/wrap::+%%uintmax-type--+ nil)

(defparameter claylib/wrap::+%%uintmax-width--+ 64)

(defparameter claylib/wrap::+%%uintptr-fmtx--+ "llX")

(defparameter claylib/wrap::+%%uintptr-fm-to--+ "llo")

(defparameter claylib/wrap::+%%uintptr-fm-tu--+ "llu")

(defparameter claylib/wrap::+%%uintptr-fm-tx--+ "llx")

(defparameter claylib/wrap::+%%uintptr-max--+ -1)

(defparameter claylib/wrap::+%%uintptr-type--+ nil)

(defparameter claylib/wrap::+%%uintptr-width--+ 64)

(defparameter claylib/wrap::+%%uint-fast16-fmtx--+ "hX")

(defparameter claylib/wrap::+%%uint-fast16-fm-to--+ "ho")

(defparameter claylib/wrap::+%%uint-fast16-fm-tu--+ "hu")

(defparameter claylib/wrap::+%%uint-fast16-fm-tx--+ "hx")

(defparameter claylib/wrap::+%%uint-fast16-max--+ 65535)

(defparameter claylib/wrap::+%%uint-fast16-type--+ nil)

(defparameter claylib/wrap::+%%uint-fast32-fmtx--+ "X")

(defparameter claylib/wrap::+%%uint-fast32-fm-to--+ "o")

(defparameter claylib/wrap::+%%uint-fast32-fm-tu--+ "u")

(defparameter claylib/wrap::+%%uint-fast32-fm-tx--+ "x")

(defparameter claylib/wrap::+%%uint-fast32-max--+ 4294967295)

(defparameter claylib/wrap::+%%uint-fast32-type--+ nil)

(defparameter claylib/wrap::+%%uint-fast64-fmtx--+ "llX")

(defparameter claylib/wrap::+%%uint-fast64-fm-to--+ "llo")

(defparameter claylib/wrap::+%%uint-fast64-fm-tu--+ "llu")

(defparameter claylib/wrap::+%%uint-fast64-fm-tx--+ "llx")

(defparameter claylib/wrap::+%%uint-fast64-max--+ -1)

(defparameter claylib/wrap::+%%uint-fast64-type--+ nil)

(defparameter claylib/wrap::+%%uint-fast8-fmtx--+ "hhX")

(defparameter claylib/wrap::+%%uint-fast8-fm-to--+ "hho")

(defparameter claylib/wrap::+%%uint-fast8-fm-tu--+ "hhu")

(defparameter claylib/wrap::+%%uint-fast8-fm-tx--+ "hhx")

(defparameter claylib/wrap::+%%uint-fast8-max--+ 255)

(defparameter claylib/wrap::+%%uint-fast8-type--+ nil)

(defparameter claylib/wrap::+%%uint-least16-fmtx--+ "hX")

(defparameter claylib/wrap::+%%uint-least16-fm-to--+ "ho")

(defparameter claylib/wrap::+%%uint-least16-fm-tu--+ "hu")

(defparameter claylib/wrap::+%%uint-least16-fm-tx--+ "hx")

(defparameter claylib/wrap::+%%uint-least16-max--+ 65535)

(defparameter claylib/wrap::+%%uint-least16-type--+ nil)

(defparameter claylib/wrap::+%%uint-least32-fmtx--+ "X")

(defparameter claylib/wrap::+%%uint-least32-fm-to--+ "o")

(defparameter claylib/wrap::+%%uint-least32-fm-tu--+ "u")

(defparameter claylib/wrap::+%%uint-least32-fm-tx--+ "x")

(defparameter claylib/wrap::+%%uint-least32-max--+ 4294967295)

(defparameter claylib/wrap::+%%uint-least32-type--+ nil)

(defparameter claylib/wrap::+%%uint-least64-fmtx--+ "llX")

(defparameter claylib/wrap::+%%uint-least64-fm-to--+ "llo")

(defparameter claylib/wrap::+%%uint-least64-fm-tu--+ "llu")

(defparameter claylib/wrap::+%%uint-least64-fm-tx--+ "llx")

(defparameter claylib/wrap::+%%uint-least64-max--+ -1)

(defparameter claylib/wrap::+%%uint-least64-type--+ nil)

(defparameter claylib/wrap::+%%uint-least8-fmtx--+ "hhX")

(defparameter claylib/wrap::+%%uint-least8-fm-to--+ "hho")

(defparameter claylib/wrap::+%%uint-least8-fm-tu--+ "hhu")

(defparameter claylib/wrap::+%%uint-least8-fm-tx--+ "hhx")

(defparameter claylib/wrap::+%%uint-least8-max--+ 255)

(defparameter claylib/wrap::+%%uint-least8-type--+ nil)

(defparameter claylib/wrap::+%%ulong32-type+ nil)

(defparameter claylib/wrap::+%%ulongword-type+ nil)

(defparameter claylib/wrap::+%%uquad-type+ nil)

(defparameter claylib/wrap::+%%useconds-t-type+ nil)

(defparameter claylib/wrap::+%%user-label-prefix--+ nil)

(defparameter claylib/wrap::+%%use-atfile+ 1)

(defparameter claylib/wrap::+%%use-fortify-level+ 0)

(defparameter claylib/wrap::+%%use-isoc11+ 1)

(defparameter claylib/wrap::+%%use-isoc95+ 1)

(defparameter claylib/wrap::+%%use-isoc99+ 1)

(defparameter claylib/wrap::+%%use-misc+ 1)

(defparameter claylib/wrap::+%%use-posix+ 1)

(defparameter claylib/wrap::+%%use-posix199309+ 1)

(defparameter claylib/wrap::+%%use-posix199506+ 1)

(defparameter claylib/wrap::+%%use-posix2+ 1)

(defparameter claylib/wrap::+%%use-posix-implicitly+ 1)

(defparameter claylib/wrap::+%%use-xopen2k+ 1)

(defparameter claylib/wrap::+%%use-xopen2k8+ 1)

(defparameter claylib/wrap::+%%uword-type+ nil)

(defparameter claylib/wrap::+%%version--+ "Clang 13.0.0 (https://github.com/borodust/llvm-project.git 5ed2b3e5773042ad61668a3f8045bf9be1492304)")

(defparameter claylib/wrap::+%%wchar-max--+ 65535)

(defparameter claylib/wrap::+%%wchar-type--+ nil)

(defparameter claylib/wrap::+%%wchar-unsigned--+ 1)

(defparameter claylib/wrap::+%%wchar-width--+ 16)

(defparameter claylib/wrap::+%%wint-max--+ 65535)

(defparameter claylib/wrap::+%%wint-type--+ nil)

(defparameter claylib/wrap::+%%wint-unsigned--+ 1)

(defparameter claylib/wrap::+%%wint-width--+ 16)

(defparameter claylib/wrap::+%%wordsize+ 64)

(defparameter claylib/wrap::+%%wordsize-time64-compat32+ 1)

(defparameter claylib/wrap::+%%always-inline+ nil)

(defparameter claylib/wrap::+%%amd64+ 1)

(defparameter claylib/wrap::+%%amd64--+ 1)

(defparameter claylib/wrap::+%%attr-dealloc-free+ nil)

(defparameter claylib/wrap::+%%attribute-artificial--+ nil)

(defparameter claylib/wrap::+%%attribute-const--+ nil)

(defparameter claylib/wrap::+%%attribute-deprecated--+ nil)

(defparameter claylib/wrap::+%%attribute-malloc--+ nil)

(defparameter claylib/wrap::+%%attribute-maybe-unused--+ nil)

(defparameter claylib/wrap::+%%attribute-noinline--+ nil)

(defparameter claylib/wrap::+%%attribute-nonstring--+ nil)

(defparameter claylib/wrap::+%%attribute-pure--+ nil)

(defparameter claylib/wrap::+%%attribute-returns-twice--+ nil)

(defparameter claylib/wrap::+%%attribute-used--+ nil)

(defparameter claylib/wrap::+%%attribute-warn-unused-result--+ nil)

(defparameter claylib/wrap::+%%bool-true-false-are-defined+ 1)

(defparameter claylib/wrap::+%%clang--+ 1)

(defparameter claylib/wrap::+%%clang-literal-encoding--+ "UTF-8")

(defparameter claylib/wrap::+%%clang-major--+ 13)

(defparameter claylib/wrap::+%%clang-minor--+ 0)

(defparameter claylib/wrap::+%%clang-patchlevel--+ 0)

(defparameter claylib/wrap::+%%clang-version--+ "13.0.0 (https://github.com/borodust/llvm-project.git 5ed2b3e5773042ad61668a3f8045bf9be1492304)")

(defparameter claylib/wrap::+%%clang-wide-literal-encoding--+ "UTF-16")

(defparameter claylib/wrap::+%%code-model-small--+ 1)

(defparameter claylib/wrap::+%%extern-always-inline+ nil)

(defparameter claylib/wrap::+%%extern-inline+ nil)

(defparameter claylib/wrap::+%%flexarr+ nil)

(defparameter claylib/wrap::+%%fortify-function+ nil)

(defparameter claylib/wrap::+%%glibc-c99-flexarr-available+ 1)

(defparameter claylib/wrap::+%%k8+ 1)

(defparameter claylib/wrap::+%%k8--+ 1)

(defparameter claylib/wrap::+%%llvm--+ 1)

(defparameter claylib/wrap::+%%pic--+ 2)

(defparameter claylib/wrap::+%%ptr-t+ nil)

(defparameter claylib/wrap::+%%restrict-arr+ nil)

(defparameter claylib/wrap::+%%returns-nonnull+ nil)

(defparameter claylib/wrap::+%%seg-fs+ nil)

(defparameter claylib/wrap::+%%seg-gs+ nil)

(defparameter claylib/wrap::+%%tune-k8--+ 1)

(defparameter claylib/wrap::+%%wur+ nil)

(defparameter claylib/wrap::+%%x86-64+ 1)

(defparameter claylib/wrap::+%%x86-64--+ 1)

(defparameter claylib/wrap::+bool+ nil)

(defparameter claylib/wrap::+false+ 0)

(defparameter claylib/wrap::+math-errhandling+ 3)

(defparameter claylib/wrap::+true+ 1)

(cffi:defcenum (claylib/wrap::|C:@EA@BLEND-MODE| :int)
               "/home/me/claylib/claw/lib/raylib.h:852:9"
               (:alpha 0)
               (:additive 1)
               (:multiplied 2)
               (:add-colors 3)
               (:subtract-colors 4)
               (:alpha-premultiply 5)
               (:custom 6))

(cffi:defcenum (claylib/wrap::|C:@EA@CAMERA-MODE| :int)
               "/home/me/claylib/claw/lib/raylib.h:879:9"
               (:custom 0)
               (:free 1)
               (:orbital 2)
               (:first-person 3)
               (:third-person 4))

(cffi:defcenum (claylib/wrap::|C:@EA@CAMERA-PROJECTION| :int)
               "/home/me/claylib/claw/lib/raylib.h:888:9"
               (:perspective 0)
               (:orthographic 1))

(cffi:defbitfield (claylib/wrap::|C:@EA@CONFIG-FLAGS| :int)
                  "/home/me/claylib/claw/lib/raylib.h:502:9"
                  (:vsync-hint 64)
                  (:fullscreen-mode 2)
                  (:window-resizable 4)
                  (:window-undecorated 8)
                  (:window-hidden 128)
                  (:window-minimized 512)
                  (:window-maximized 1024)
                  (:window-unfocused 2048)
                  (:window-topmost 4096)
                  (:window-always-run 256)
                  (:window-transparent 16)
                  (:window-highdpi 8192)
                  (:window-mouse-passthrough 16384)
                  (:msaa-4x-hint 32)
                  (:interlaced-hint 65536))

(cffi:defcenum (claylib/wrap::|C:@EA@CUBEMAP-LAYOUT| :int)
               "/home/me/claylib/claw/lib/raylib.h:835:9"
               (:auto-detect 0)
               (:line-vertical 1)
               (:line-horizontal 2)
               (:cross-three-by-four 3)
               (:cross-four-by-three 4)
               (:panorama 5))

(cffi:defcenum (claylib/wrap::|C:@EA@FONT-TYPE| :int)
               "/home/me/claylib/claw/lib/raylib.h:845:9"
               (:default 0)
               (:bitmap 1)
               (:sdf 2))

(cffi:defcenum (claylib/wrap::|C:@EA@GAMEPAD-AXIS| :int)
               "/home/me/claylib/claw/lib/raylib.h:707:9"
               (:left-x 0)
               (:left-y 1)
               (:right-x 2)
               (:right-y 3)
               (:left-trigger 4)
               (:right-trigger 5))

(cffi:defcenum (claylib/wrap::|C:@EA@GAMEPAD-BUTTON| :int)
               "/home/me/claylib/claw/lib/raylib.h:685:9"
               (:unknown 0)
               (:left-face-up 1)
               (:left-face-right 2)
               (:left-face-down 3)
               (:left-face-left 4)
               (:right-face-up 5)
               (:right-face-right 6)
               (:right-face-down 7)
               (:right-face-left 8)
               (:left-trigger-1 9)
               (:left-trigger-2 10)
               (:right-trigger-1 11)
               (:right-trigger-2 12)
               (:middle-left 13)
               (:middle 14)
               (:middle-right 15)
               (:left-thumb 16)
               (:right-thumb 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GESTURE| :int)
               "/home/me/claylib/claw/lib/raylib.h:864:9"
               (:none 0)
               (:tap 1)
               (:doubletap 2)
               (:hold 4)
               (:drag 8)
               (:swipe-right 16)
               (:swipe-left 32)
               (:swipe-up 64)
               (:swipe-down 128)
               (:pinch-in 256)
               (:pinch-out 512))

(cffi:defbitfield (claylib/wrap::|C:@EA@GUI-CHECK-BOX-PROPERTY| :int)
                  "/home/me/claylib/claw/lib/raygui.h:425:9"
                  (:check-padding 16))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-COLOR-PICKER-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:462:9"
               (:color-selector-size 16)
               (:huebar-width 17)
               (:huebar-padding 18)
               (:huebar-selector-height 19)
               (:huebar-selector-overflow 20))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-COMBO-BOX-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:430:9"
               (:width 16)
               (:spacing 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-CONTROL| :int)
               "/home/me/claylib/claw/lib/raygui.h:337:9"
               (:default 0)
               (:label 1)
               (:button 2)
               (:toggle 3)
               (:slider 4)
               (:progressbar 5)
               (:checkbox 6)
               (:combobox 7)
               (:dropdownbox 8)
               (:textbox 9)
               (:valuebox 10)
               (:spinner 11)
               (:listview 12)
               (:colorpicker 13)
               (:scrollbar 14)
               (:statusbar 15))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-CONTROL-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:360:9"
               (:border-color-normal 0)
               (:base-color-normal 1)
               (:text-color-normal 2)
               (:border-color-focused 3)
               (:base-color-focused 4)
               (:text-color-focused 5)
               (:border-color-pressed 6)
               (:base-color-pressed 7)
               (:text-color-pressed 8)
               (:border-color-disabled 9)
               (:base-color-disabled 10)
               (:text-color-disabled 11)
               (:border-width 12)
               (:text-padding 13)
               (:text-alignment 14)
               (:reserved 15))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-DEFAULT-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:385:9"
               (:text-size 16)
               (:text-spacing 17)
               (:line-color 18)
               (:background-color 19))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-DROPDOWN-BOX-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:436:9"
               (:arrow-padding 16)
               (:dropdown-items-spacing 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-ICON-NAME| :int)
               "/home/me/claylib/claw/lib/raygui.h:564:9"
               (:none 0)
               (:folder-file-open 1)
               (:file-save-classic 2)
               (:folder-open 3)
               (:folder-save 4)
               (:file-open 5)
               (:file-save 6)
               (:file-export 7)
               (:file-add 8)
               (:file-delete 9)
               (:filetype-text 10)
               (:filetype-audio 11)
               (:filetype-image 12)
               (:filetype-play 13)
               (:filetype-video 14)
               (:filetype-info 15)
               (:file-copy 16)
               (:file-cut 17)
               (:file-paste 18)
               (:cursor-hand 19)
               (:cursor-pointer 20)
               (:cursor-classic 21)
               (:pencil 22)
               (:pencil-big 23)
               (:brush-classic 24)
               (:brush-painter 25)
               (:water-drop 26)
               (:color-picker 27)
               (:rubber 28)
               (:color-bucket 29)
               (:text-t 30)
               (:text-a 31)
               (:scale 32)
               (:resize 33)
               (:filter-point 34)
               (:filter-bilinear 35)
               (:crop 36)
               (:crop-alpha 37)
               (:square-toggle 38)
               (:symmetry 39)
               (:symmetry-horizontal 40)
               (:symmetry-vertical 41)
               (:lens 42)
               (:lens-big 43)
               (:eye-on 44)
               (:eye-off 45)
               (:filter-top 46)
               (:filter 47)
               (:target-point 48)
               (:target-small 49)
               (:target-big 50)
               (:target-move 51)
               (:cursor-move 52)
               (:cursor-scale 53)
               (:cursor-scale-right 54)
               (:cursor-scale-left 55)
               (:undo 56)
               (:redo 57)
               (:reredo 58)
               (:mutate 59)
               (:rotate 60)
               (:repeat 61)
               (:shuffle 62)
               (:emptybox 63)
               (:target 64)
               (:target-small-fill 65)
               (:target-big-fill 66)
               (:target-move-fill 67)
               (:cursor-move-fill 68)
               (:cursor-scale-fill 69)
               (:cursor-scale-right-fill 70)
               (:cursor-scale-left-fill 71)
               (:undo-fill 72)
               (:redo-fill 73)
               (:reredo-fill 74)
               (:mutate-fill 75)
               (:rotate-fill 76)
               (:repeat-fill 77)
               (:shuffle-fill 78)
               (:emptybox-small 79)
               (:box 80)
               (:box-top 81)
               (:box-top-right 82)
               (:box-right 83)
               (:box-bottom-right 84)
               (:box-bottom 85)
               (:box-bottom-left 86)
               (:box-left 87)
               (:box-top-left 88)
               (:box-center 89)
               (:box-circle-mask 90)
               (:pot 91)
               (:alpha-multiply 92)
               (:alpha-clear 93)
               (:dithering 94)
               (:mipmaps 95)
               (:box-grid 96)
               (:grid 97)
               (:box-corners-small 98)
               (:box-corners-big 99)
               (:four-boxes 100)
               (:grid-fill 101)
               (:box-multisize 102)
               (:zoom-small 103)
               (:zoom-medium 104)
               (:zoom-big 105)
               (:zoom-all 106)
               (:zoom-center 107)
               (:box-dots-small 108)
               (:box-dots-big 109)
               (:box-concentric 110)
               (:box-grid-big 111)
               (:ok-tick 112)
               (:cross 113)
               (:arrow-left 114)
               (:arrow-right 115)
               (:arrow-down 116)
               (:arrow-up 117)
               (:arrow-left-fill 118)
               (:arrow-right-fill 119)
               (:arrow-down-fill 120)
               (:arrow-up-fill 121)
               (:audio 122)
               (:fx 123)
               (:wave 124)
               (:wave-sinus 125)
               (:wave-square 126)
               (:wave-triangular 127)
               (:cross-small 128)
               (:player-previous 129)
               (:player-play-back 130)
               (:player-play 131)
               (:player-pause 132)
               (:player-stop 133)
               (:player-next 134)
               (:player-record 135)
               (:magnet 136)
               (:lock-close 137)
               (:lock-open 138)
               (:clock 139)
               (:tools 140)
               (:gear 141)
               (:gear-big 142)
               (:bin 143)
               (:hand-pointer 144)
               (:laser 145)
               (:coin 146)
               (:explosion 147)
               (:1up 148)
               (:player 149)
               (:player-jump 150)
               (:key 151)
               (:demon 152)
               (:text-popup 153)
               (:gear-ex 154)
               (:crack 155)
               (:crack-points 156)
               (:star 157)
               (:door 158)
               (:exit 159)
               (:mode-2d 160)
               (:mode-3d 161)
               (:cube 162)
               (:cube-face-top 163)
               (:cube-face-left 164)
               (:cube-face-front 165)
               (:cube-face-bottom 166)
               (:cube-face-right 167)
               (:cube-face-back 168)
               (:camera 169)
               (:special 170)
               (:link-net 171)
               (:link-boxes 172)
               (:link-multi 173)
               (:link 174)
               (:link-broke 175)
               (:text-notes 176)
               (:notebook 177)
               (:suitcase 178)
               (:suitcase-zip 179)
               (:mailbox 180)
               (:monitor 181)
               (:printer 182)
               (:photo-camera 183)
               (:photo-camera-flash 184)
               (:house 185)
               (:heart 186)
               (:corner 187)
               (:vertical-bars 188)
               (:vertical-bars-fill 189)
               (:life-bars 190)
               (:info 191)
               (:crossline 192)
               (:help 193)
               (:filetype-alpha 194)
               (:filetype-home 195)
               (:layers-visible 196)
               (:layers 197)
               (:window 198)
               (:hidpi 199)
               (:filetype-binary 200)
               (:hex 201)
               (:shield 202)
               (:file-new 203)
               (:folder-add 204)
               (:alarm 205)
               (:|206| 206)
               (:|207| 207)
               (:|208| 208)
               (:|209| 209)
               (:|210| 210)
               (:|211| 211)
               (:|212| 212)
               (:|213| 213)
               (:|214| 214)
               (:|215| 215)
               (:|216| 216)
               (:|217| 217)
               (:|218| 218)
               (:|219| 219)
               (:|220| 220)
               (:|221| 221)
               (:|222| 222)
               (:|223| 223)
               (:|224| 224)
               (:|225| 225)
               (:|226| 226)
               (:|227| 227)
               (:|228| 228)
               (:|229| 229)
               (:|230| 230)
               (:|231| 231)
               (:|232| 232)
               (:|233| 233)
               (:|234| 234)
               (:|235| 235)
               (:|236| 236)
               (:|237| 237)
               (:|238| 238)
               (:|239| 239)
               (:|240| 240)
               (:|241| 241)
               (:|242| 242)
               (:|243| 243)
               (:|244| 244)
               (:|245| 245)
               (:|246| 246)
               (:|247| 247)
               (:|248| 248)
               (:|249| 249)
               (:|250| 250)
               (:|251| 251)
               (:|252| 252)
               (:|253| 253)
               (:|254| 254)
               (:|255| 255))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-LIST-VIEW-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:454:9"
               (:list-items-height 16)
               (:list-items-spacing 17)
               (:scrollbar-width 18)
               (:scrollbar-side 19))

(cffi:defbitfield (claylib/wrap::|C:@EA@GUI-PROGRESS-BAR-PROPERTY|
                   :int)
                  "/home/me/claylib/claw/lib/raygui.h:410:9"
                  (:progress-padding 16))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-SCROLL-BAR-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:415:9"
               (:arrows-size 16)
               (:arrows-visible 17)
               (:scroll-slider-padding 18)
               (:scroll-slider-size 19)
               (:scroll-padding 20)
               (:scroll-speed 21))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-SLIDER-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:404:9"
               (:width 16)
               (:padding 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-SPINNER-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:448:9"
               (:width 16)
               (:spacing 17))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-STATE| :int)
               "/home/me/claylib/claw/lib/raygui.h:322:9"
               (:normal 0)
               (:focused 1)
               (:pressed 2)
               (:disabled 3))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-TEXT-ALIGNMENT| :int)
               "/home/me/claylib/claw/lib/raygui.h:330:9"
               (:left 0)
               (:center 1)
               (:right 2))

(cffi:defcenum (claylib/wrap::|C:@EA@GUI-TEXT-BOX-PROPERTY| :int)
               "/home/me/claylib/claw/lib/raygui.h:442:9"
               (:inner-padding 16)
               (:lines-spacing 17))

(cffi:defbitfield (claylib/wrap::|C:@EA@GUI-TOGGLE-PROPERTY| :int)
                  "/home/me/claylib/claw/lib/raygui.h:399:9"
                  (:group-padding 16))

(cffi:defcenum (claylib/wrap::|C:@EA@KEYBOARD-KEY| :int)
               "/home/me/claylib/claw/lib/raylib.h:536:9"
               (:null 0)
               (:apostrophe 39)
               (:comma 44)
               (:minus 45)
               (:period 46)
               (:slash 47)
               (:zero 48)
               (:one 49)
               (:two 50)
               (:three 51)
               (:four 52)
               (:five 53)
               (:six 54)
               (:seven 55)
               (:eight 56)
               (:nine 57)
               (:semicolon 59)
               (:equal 61)
               (:a 65)
               (:b 66)
               (:c 67)
               (:d 68)
               (:e 69)
               (:f 70)
               (:g 71)
               (:h 72)
               (:i 73)
               (:j 74)
               (:k 75)
               (:l 76)
               (:m 77)
               (:n 78)
               (:o 79)
               (:p 80)
               (:q 81)
               (:r 82)
               (:s 83)
               (:t 84)
               (:u 85)
               (:v 86)
               (:w 87)
               (:x 88)
               (:y 89)
               (:z 90)
               (:left-bracket 91)
               (:backslash 92)
               (:right-bracket 93)
               (:grave 96)
               (:space 32)
               (:escape 256)
               (:enter 257)
               (:tab 258)
               (:backspace 259)
               (:insert 260)
               (:delete 261)
               (:right 262)
               (:left 263)
               (:down 264)
               (:up 265)
               (:page-up 266)
               (:page-down 267)
               (:home 268)
               (:end 269)
               (:caps-lock 280)
               (:scroll-lock 281)
               (:num-lock 282)
               (:print-screen 283)
               (:pause 284)
               (:f1 290)
               (:f2 291)
               (:f3 292)
               (:f4 293)
               (:f5 294)
               (:f6 295)
               (:f7 296)
               (:f8 297)
               (:f9 298)
               (:f10 299)
               (:f11 300)
               (:f12 301)
               (:left-shift 340)
               (:left-control 341)
               (:left-alt 342)
               (:left-super 343)
               (:right-shift 344)
               (:right-control 345)
               (:right-alt 346)
               (:right-super 347)
               (:kb-menu 348)
               (:kp-0 320)
               (:kp-1 321)
               (:kp-2 322)
               (:kp-3 323)
               (:kp-4 324)
               (:kp-5 325)
               (:kp-6 326)
               (:kp-7 327)
               (:kp-8 328)
               (:kp-9 329)
               (:kp-decimal 330)
               (:kp-divide 331)
               (:kp-multiply 332)
               (:kp-subtract 333)
               (:kp-add 334)
               (:kp-enter 335)
               (:kp-equal 336)
               (:back 4)
               (:menu 82)
               (:volume-up 24)
               (:volume-down 25))

(cffi:defcenum (claylib/wrap::|C:@EA@MATERIAL-MAP-INDEX| :int)
               "/home/me/claylib/claw/lib/raylib.h:717:9"
               (:albedo 0)
               (:metalness 1)
               (:normal 2)
               (:roughness 3)
               (:occlusion 4)
               (:emission 5)
               (:height 6)
               (:cubemap 7)
               (:irradiance 8)
               (:prefilter 9)
               (:brdf 10))

(cffi:defcenum (claylib/wrap::|C:@EA@MOUSE-BUTTON| :int)
               "/home/me/claylib/claw/lib/raylib.h:659:9"
               (:left 0)
               (:right 1)
               (:middle 2)
               (:side 3)
               (:extra 4)
               (:forward 5)
               (:back 6))

(cffi:defcenum (claylib/wrap::|C:@EA@MOUSE-CURSOR| :int)
               "/home/me/claylib/claw/lib/raylib.h:670:9"
               (:default 0)
               (:arrow 1)
               (:ibeam 2)
               (:crosshair 3)
               (:pointing-hand 4)
               (:resize-ew 5)
               (:resize-ns 6)
               (:resize-nwse 7)
               (:resize-nesw 8)
               (:resize-all 9)
               (:not-allowed 10))

(cffi:defcenum (claylib/wrap::|C:@EA@N-PATCH-LAYOUT| :int)
               "/home/me/claylib/claw/lib/raylib.h:894:9"
               (:nine-patch 0)
               (:three-patch-vertical 1)
               (:three-patch-horizontal 2))

(cffi:defcenum (claylib/wrap::|C:@EA@PIXEL-FORMAT| :int)
               "/home/me/claylib/claw/lib/raylib.h:790:9"
               (:uncompressed-grayscale 1)
               (:uncompressed-gray-alpha 2)
               (:uncompressed-r5g6b5 3)
               (:uncompressed-r8g8b8 4)
               (:uncompressed-r5g5b5a1 5)
               (:uncompressed-r4g4b4a4 6)
               (:uncompressed-r8g8b8a8 7)
               (:uncompressed-r32 8)
               (:uncompressed-r32g32b32 9)
               (:uncompressed-r32g32b32a32 10)
               (:compressed-dxt1-rgb 11)
               (:compressed-dxt1-rgba 12)
               (:compressed-dxt3-rgba 13)
               (:compressed-dxt5-rgba 14)
               (:compressed-etc1-rgb 15)
               (:compressed-etc2-rgb 16)
               (:compressed-etc2-eac-rgba 17)
               (:compressed-pvrt-rgb 18)
               (:compressed-pvrt-rgba 19)
               (:compressed-astc-4x4-rgba 20)
               (:compressed-astc-8x8-rgba 21))

(cffi:defcenum (claylib/wrap::|C:@EA@SHADER-ATTRIBUTE-DATA-TYPE|
                :int)
               "/home/me/claylib/claw/lib/raylib.h:781:9"
               (:float 0)
               (:vec2 1)
               (:vec3 2)
               (:vec4 3))

(cffi:defcenum (claylib/wrap::|C:@EA@SHADER-LOCATION-INDEX| :int)
               "/home/me/claylib/claw/lib/raylib.h:735:9"
               (:vertex-position 0)
               (:vertex-texcoord01 1)
               (:vertex-texcoord02 2)
               (:vertex-normal 3)
               (:vertex-tangent 4)
               (:vertex-color 5)
               (:matrix-mvp 6)
               (:matrix-view 7)
               (:matrix-projection 8)
               (:matrix-model 9)
               (:matrix-normal 10)
               (:vector-view 11)
               (:color-diffuse 12)
               (:color-specular 13)
               (:color-ambient 14)
               (:map-albedo 15)
               (:map-metalness 16)
               (:map-normal 17)
               (:map-roughness 18)
               (:map-occlusion 19)
               (:map-emission 20)
               (:map-height 21)
               (:map-cubemap 22)
               (:map-irradiance 23)
               (:map-prefilter 24)
               (:map-brdf 25))

(cffi:defcenum (claylib/wrap::|C:@EA@SHADER-UNIFORM-DATA-TYPE| :int)
               "/home/me/claylib/claw/lib/raylib.h:768:9"
               (:float 0)
               (:vec2 1)
               (:vec3 2)
               (:vec4 3)
               (:int 4)
               (:ivec2 5)
               (:ivec3 6)
               (:ivec4 7)
               (:sampler2d 8))

(cffi:defcenum (claylib/wrap::|C:@EA@TEXTURE-FILTER| :int)
               "/home/me/claylib/claw/lib/raylib.h:817:9"
               (:point 0)
               (:bilinear 1)
               (:trilinear 2)
               (:anisotropic-4x 3)
               (:anisotropic-8x 4)
               (:anisotropic-16x 5))

(cffi:defcenum (claylib/wrap::|C:@EA@TEXTURE-WRAP| :int)
               "/home/me/claylib/claw/lib/raylib.h:827:9"
               (:repeat 0)
               (:clamp 1)
               (:mirror-repeat 2)
               (:mirror-clamp 3))

(cffi:defcenum (claylib/wrap::|C:@EA@TRACE-LOG-LEVEL| :int)
               "/home/me/claylib/claw/lib/raylib.h:522:9"
               (:all 0)
               (:trace 1)
               (:debug 2)
               (:info 3)
               (:warning 4)
               (:error 5)
               (:fatal 6)
               (:none 7))

(defparameter claylib/wrap::+fp-nan+ 0)

(defparameter claylib/wrap::+fp-infinite+ 1)

(defparameter claylib/wrap::+fp-zero+ 2)

(defparameter claylib/wrap::+fp-subnormal+ 3)

(defparameter claylib/wrap::+fp-normal+ 4)

(cffi:defcstruct (claylib/wrap::r-audio-buffer :size 0))

(cffi:defctype claylib/wrap::r-audio-buffer
               (:struct claylib/wrap::r-audio-buffer))

(cffi:defcstruct (claylib/wrap::r-audio-processor :size 0))

(cffi:defctype claylib/wrap::r-audio-processor
               (:struct claylib/wrap::r-audio-processor))

(cffi:defcstruct (claylib/wrap::audio-stream :size 32)
                 (claylib/wrap::buffer
                  (:pointer claylib/wrap::r-audio-buffer) :offset 0)
                 (claylib/wrap::processor
                  (:pointer claylib/wrap::r-audio-processor) :offset
                  8)
                 (claylib/wrap::sample-rate :unsigned-int :offset 16)
                 (claylib/wrap::sample-size :unsigned-int :offset 20)
                 (claylib/wrap::channels :unsigned-int :offset 24))

(cffi:defctype claylib/wrap::audio-stream
               (:struct claylib/wrap::audio-stream))

(cffi:defctype claylib/wrap::audio-callback (:pointer :void))

(declaim (inline claylib/wrap::attach-audio-stream-processor))

(cffi:defcfun ("AttachAudioStreamProcessor"
               claylib/wrap::attach-audio-stream-processor)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::processor claylib/wrap::audio-callback))

(declaim (inline claylib/wrap::begin-blend-mode))

(cffi:defcfun ("BeginBlendMode" claylib/wrap::begin-blend-mode)
              :void
              (claylib/wrap::mode :int))

(declaim (inline claylib/wrap::begin-drawing))

(cffi:defcfun ("BeginDrawing" claylib/wrap::begin-drawing) :void)

(cffi:defcstruct (claylib/wrap::vector2 :size 8)
                 (claylib/wrap::x :float :offset 0)
                 (claylib/wrap::y :float :offset 4))

(cffi:defctype claylib/wrap::vector2 (:struct claylib/wrap::vector2))

(cffi:defcstruct (claylib/wrap::camera2d :size 24)
                 (claylib/wrap::offset claylib/wrap::vector2 :offset
                  0)
                 (claylib/wrap::target claylib/wrap::vector2 :offset
                  8)
                 (claylib/wrap::rotation :float :offset 16)
                 (claylib/wrap::zoom :float :offset 20))

(cffi:defctype claylib/wrap::camera2d
               (:struct claylib/wrap::camera2d))

(declaim (inline claylib/wrap::begin-mode2d))

(cffi:defcfun ("BeginMode2D" claylib/wrap::begin-mode2d)
              :void
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera2d)))

(cffi:defcstruct (claylib/wrap::vector3 :size 12)
                 (claylib/wrap::x :float :offset 0)
                 (claylib/wrap::y :float :offset 4)
                 (claylib/wrap::z :float :offset 8))

(cffi:defctype claylib/wrap::vector3 (:struct claylib/wrap::vector3))

(cffi:defcstruct (claylib/wrap::camera3d :size 44)
                 (claylib/wrap::c-position claylib/wrap::vector3
                  :offset 0)
                 (claylib/wrap::target claylib/wrap::vector3 :offset
                  12)
                 (claylib/wrap::up claylib/wrap::vector3 :offset 24)
                 (claylib/wrap::fovy :float :offset 36)
                 (claylib/wrap::projection :int :offset 40))

(cffi:defctype claylib/wrap::camera3d
               (:struct claylib/wrap::camera3d))

(declaim (inline claylib/wrap::begin-mode3d))

(cffi:defcfun ("BeginMode3D" claylib/wrap::begin-mode3d)
              :void
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera3d)))

(declaim (inline claylib/wrap::begin-scissor-mode))

(cffi:defcfun ("BeginScissorMode" claylib/wrap::begin-scissor-mode)
              :void
              (claylib/wrap::x :int)
              (claylib/wrap::y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(cffi:defcstruct (claylib/wrap::shader :size 16)
                 (claylib/wrap::id :unsigned-int :offset 0)
                 (claylib/wrap::locs (:pointer :int) :offset 8))

(cffi:defctype claylib/wrap::shader (:struct claylib/wrap::shader))

(declaim (inline claylib/wrap::begin-shader-mode))

(cffi:defcfun ("BeginShaderMode" claylib/wrap::begin-shader-mode)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader)))

(cffi:defcstruct (claylib/wrap::texture :size 20)
                 (claylib/wrap::id :unsigned-int :offset 0)
                 (claylib/wrap::width :int :offset 4)
                 (claylib/wrap::height :int :offset 8)
                 (claylib/wrap::mipmaps :int :offset 12)
                 (claylib/wrap::c-format :int :offset 16))

(cffi:defctype claylib/wrap::texture (:struct claylib/wrap::texture))

(cffi:defcstruct (claylib/wrap::render-texture :size 44)
                 (claylib/wrap::id :unsigned-int :offset 0)
                 (claylib/wrap::texture claylib/wrap::texture :offset
                  4)
                 (claylib/wrap::depth claylib/wrap::texture :offset
                  24))

(cffi:defctype claylib/wrap::render-texture2d
               (:struct claylib/wrap::render-texture))

(declaim (inline claylib/wrap::begin-texture-mode))

(cffi:defcfun ("BeginTextureMode" claylib/wrap::begin-texture-mode)
              :void
              (claylib/wrap::target
               (:pointer claylib/wrap::render-texture2d)))

(cffi:defcstruct (claylib/wrap::matrix :size 64)
                 (claylib/wrap::m0 :float :offset 0)
                 (claylib/wrap::m4 :float :offset 4)
                 (claylib/wrap::m8 :float :offset 8)
                 (claylib/wrap::m12 :float :offset 12)
                 (claylib/wrap::m1 :float :offset 16)
                 (claylib/wrap::m5 :float :offset 20)
                 (claylib/wrap::m9 :float :offset 24)
                 (claylib/wrap::m13 :float :offset 28)
                 (claylib/wrap::m2 :float :offset 32)
                 (claylib/wrap::m6 :float :offset 36)
                 (claylib/wrap::m10 :float :offset 40)
                 (claylib/wrap::m14 :float :offset 44)
                 (claylib/wrap::m3 :float :offset 48)
                 (claylib/wrap::m7 :float :offset 52)
                 (claylib/wrap::m11 :float :offset 56)
                 (claylib/wrap::m15 :float :offset 60))

(cffi:defctype claylib/wrap::matrix (:struct claylib/wrap::matrix))

(cffi:defcstruct (claylib/wrap::vr-stereo-config :size 304)
                 (claylib/wrap::projection claylib/wrap::matrix
                  :count 2 :offset 0)
                 (claylib/wrap::view-offset claylib/wrap::matrix
                  :count 2 :offset 128)
                 (claylib/wrap::left-lens-center :float :count 2
                  :offset 256)
                 (claylib/wrap::right-lens-center :float :count 2
                  :offset 264)
                 (claylib/wrap::left-screen-center :float :count 2
                  :offset 272)
                 (claylib/wrap::right-screen-center :float :count 2
                  :offset 280)
                 (claylib/wrap::scale :float :count 2 :offset 288)
                 (claylib/wrap::scale-in :float :count 2 :offset 296))

(cffi:defctype claylib/wrap::vr-stereo-config
               (:struct claylib/wrap::vr-stereo-config))

(declaim (inline claylib/wrap::begin-vr-stereo-mode))

(cffi:defcfun ("BeginVrStereoMode"
               claylib/wrap::begin-vr-stereo-mode)
              :void
              (claylib/wrap::config
               (:pointer claylib/wrap::vr-stereo-config)))

(declaim (inline claylib/wrap::change-directory))

(cffi:defcfun ("ChangeDirectory" claylib/wrap::change-directory)
              :bool
              (claylib/wrap::dir :string))

(cffi:defcstruct (claylib/wrap::bounding-box :size 24)
                 (claylib/wrap::c-min claylib/wrap::vector3 :offset
                  0)
                 (claylib/wrap::c-max claylib/wrap::vector3 :offset
                  12))

(cffi:defctype claylib/wrap::bounding-box
               (:struct claylib/wrap::bounding-box))

(declaim (inline claylib/wrap::check-collision-box-sphere))

(cffi:defcfun ("CheckCollisionBoxSphere"
               claylib/wrap::check-collision-box-sphere)
              :bool
              (claylib/wrap::box
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::center (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float))

(declaim (inline claylib/wrap::check-collision-boxes))

(cffi:defcfun ("CheckCollisionBoxes"
               claylib/wrap::check-collision-boxes)
              :bool
              (claylib/wrap::box1
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::box2
               (:pointer claylib/wrap::bounding-box)))

(cffi:defcstruct (claylib/wrap::rectangle :size 16)
                 (claylib/wrap::x :float :offset 0)
                 (claylib/wrap::y :float :offset 4)
                 (claylib/wrap::width :float :offset 8)
                 (claylib/wrap::height :float :offset 12))

(cffi:defctype claylib/wrap::rectangle
               (:struct claylib/wrap::rectangle))

(declaim (inline claylib/wrap::check-collision-circle-rec))

(cffi:defcfun ("CheckCollisionCircleRec"
               claylib/wrap::check-collision-circle-rec)
              :bool
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float)
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::check-collision-circles))

(cffi:defcfun ("CheckCollisionCircles"
               claylib/wrap::check-collision-circles)
              :bool
              (claylib/wrap::center1
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius1 :float)
              (claylib/wrap::center2
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius2 :float))

(declaim (inline claylib/wrap::check-collision-lines))

(cffi:defcfun ("CheckCollisionLines"
               claylib/wrap::check-collision-lines)
              :bool
              (claylib/wrap::start-pos1
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos1
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::start-pos2
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos2
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::collision-point
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::check-collision-point-circle))

(cffi:defcfun ("CheckCollisionPointCircle"
               claylib/wrap::check-collision-point-circle)
              :bool
              (claylib/wrap::point (:pointer claylib/wrap::vector2))
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float))

(declaim (inline claylib/wrap::check-collision-point-line))

(cffi:defcfun ("CheckCollisionPointLine"
               claylib/wrap::check-collision-point-line)
              :bool
              (claylib/wrap::point (:pointer claylib/wrap::vector2))
              (claylib/wrap::p1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::p2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::threshold :int))

(declaim (inline claylib/wrap::check-collision-point-rec))

(cffi:defcfun ("CheckCollisionPointRec"
               claylib/wrap::check-collision-point-rec)
              :bool
              (claylib/wrap::point (:pointer claylib/wrap::vector2))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::check-collision-point-triangle))

(cffi:defcfun ("CheckCollisionPointTriangle"
               claylib/wrap::check-collision-point-triangle)
              :bool
              (claylib/wrap::point (:pointer claylib/wrap::vector2))
              (claylib/wrap::p1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::p2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::p3 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::check-collision-recs))

(cffi:defcfun ("CheckCollisionRecs"
               claylib/wrap::check-collision-recs)
              :bool
              (claylib/wrap::rec1 (:pointer claylib/wrap::rectangle))
              (claylib/wrap::rec2 (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::check-collision-spheres))

(cffi:defcfun ("CheckCollisionSpheres"
               claylib/wrap::check-collision-spheres)
              :bool
              (claylib/wrap::center1
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius1 :float)
              (claylib/wrap::center2
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius2 :float))

(declaim (inline claylib/wrap::clamp))

(cffi:defcfun ("Clamp" claylib/wrap::clamp)
              :float
              (claylib/wrap::value :float)
              (claylib/wrap::c-min :float)
              (claylib/wrap::c-max :float))

(cffi:defcstruct (claylib/wrap::color :size 4)
                 (claylib/wrap::r :unsigned-char :offset 0)
                 (claylib/wrap::g :unsigned-char :offset 1)
                 (claylib/wrap::b :unsigned-char :offset 2)
                 (claylib/wrap::a :unsigned-char :offset 3))

(cffi:defctype claylib/wrap::color (:struct claylib/wrap::color))

(declaim (inline claylib/wrap::clear-background))

(cffi:defcfun ("ClearBackground" claylib/wrap::clear-background)
              :void
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::clear-window-state))

(cffi:defcfun ("ClearWindowState" claylib/wrap::clear-window-state)
              :void
              (claylib/wrap::flags :unsigned-int))

(declaim (inline claylib/wrap::close-audio-device))

(cffi:defcfun ("CloseAudioDevice" claylib/wrap::close-audio-device)
              :void)

(declaim (inline claylib/wrap::close-window))

(cffi:defcfun ("CloseWindow" claylib/wrap::close-window) :void)

(declaim (inline claylib/wrap::codepoint-to-utf8))

(cffi:defcfun ("CodepointToUTF8" claylib/wrap::codepoint-to-utf8)
              :string
              (claylib/wrap::codepoint :int)
              (claylib/wrap::byte-size (:pointer :int)))

(declaim (inline claylib/wrap::color-alpha))

(cffi:defcfun ("ColorAlpha" claylib/wrap::color-alpha)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::alpha :float))

(declaim (inline claylib/wrap::color-alpha-blend))

(cffi:defcfun ("ColorAlphaBlend" claylib/wrap::color-alpha-blend)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::dst (:pointer claylib/wrap::color))
              (claylib/wrap::src (:pointer claylib/wrap::color))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::color-from-hsv))

(cffi:defcfun ("ColorFromHSV" claylib/wrap::color-from-hsv)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::hue :float)
              (claylib/wrap::saturation :float)
              (claylib/wrap::value :float))

(cffi:defcstruct (claylib/wrap::vector4 :size 16)
                 (claylib/wrap::x :float :offset 0)
                 (claylib/wrap::y :float :offset 4)
                 (claylib/wrap::z :float :offset 8)
                 (claylib/wrap::w :float :offset 12))

(cffi:defctype claylib/wrap::vector4 (:struct claylib/wrap::vector4))

(declaim (inline claylib/wrap::color-from-normalized))

(cffi:defcfun ("ColorFromNormalized"
               claylib/wrap::color-from-normalized)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::normalized
               (:pointer claylib/wrap::vector4)))

(declaim (inline claylib/wrap::color-normalize))

(cffi:defcfun ("ColorNormalize" claylib/wrap::color-normalize)
              (:pointer claylib/wrap::vector4)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector4))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::color-to-hsv))

(cffi:defcfun ("ColorToHSV" claylib/wrap::color-to-hsv)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::color-to-int))

(cffi:defcfun ("ColorToInt" claylib/wrap::color-to-int)
              :int
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::compress-data))

(cffi:defcfun ("CompressData" claylib/wrap::compress-data)
              (:pointer :unsigned-char)
              (claylib/wrap::data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int)
              (claylib/wrap::comp-data-size (:pointer :int)))

(declaim (inline claylib/wrap::decode-data-base64))

(cffi:defcfun ("DecodeDataBase64" claylib/wrap::decode-data-base64)
              (:pointer :unsigned-char)
              (claylib/wrap::data (:pointer :unsigned-char))
              (claylib/wrap::output-size (:pointer :int)))

(declaim (inline claylib/wrap::decompress-data))

(cffi:defcfun ("DecompressData" claylib/wrap::decompress-data)
              (:pointer :unsigned-char)
              (claylib/wrap::comp-data (:pointer :unsigned-char))
              (claylib/wrap::comp-data-size :int)
              (claylib/wrap::data-size (:pointer :int)))

(declaim (inline claylib/wrap::detach-audio-stream-processor))

(cffi:defcfun ("DetachAudioStreamProcessor"
               claylib/wrap::detach-audio-stream-processor)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::processor claylib/wrap::audio-callback))

(declaim (inline claylib/wrap::directory-exists))

(cffi:defcfun ("DirectoryExists" claylib/wrap::directory-exists)
              :bool
              (claylib/wrap::dir-path :string))

(declaim (inline claylib/wrap::disable-cursor))

(cffi:defcfun ("DisableCursor" claylib/wrap::disable-cursor) :void)

(declaim (inline claylib/wrap::disable-event-waiting))

(cffi:defcfun ("DisableEventWaiting"
               claylib/wrap::disable-event-waiting)
              :void)

(cffi:defctype claylib/wrap::camera (:struct claylib/wrap::camera3d))

(cffi:defctype claylib/wrap::texture2d
               (:struct claylib/wrap::texture))

(declaim (inline claylib/wrap::draw-billboard))

(cffi:defcfun ("DrawBillboard" claylib/wrap::draw-billboard)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-billboard-pro))

(cffi:defcfun ("DrawBillboardPro" claylib/wrap::draw-billboard-pro)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::up (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-billboard-rec))

(cffi:defcfun ("DrawBillboardRec" claylib/wrap::draw-billboard-rec)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-bounding-box))

(cffi:defcfun ("DrawBoundingBox" claylib/wrap::draw-bounding-box)
              :void
              (claylib/wrap::box
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle))

(cffi:defcfun ("DrawCircle" claylib/wrap::draw-circle)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle3d))

(cffi:defcfun ("DrawCircle3D" claylib/wrap::draw-circle3d)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::rotation-axis
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-angle :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-gradient))

(cffi:defcfun ("DrawCircleGradient"
               claylib/wrap::draw-circle-gradient)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::color1 (:pointer claylib/wrap::color))
              (claylib/wrap::color2 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-lines))

(cffi:defcfun ("DrawCircleLines" claylib/wrap::draw-circle-lines)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-sector))

(cffi:defcfun ("DrawCircleSector" claylib/wrap::draw-circle-sector)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float)
              (claylib/wrap::start-angle :float)
              (claylib/wrap::end-angle :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-sector-lines))

(cffi:defcfun ("DrawCircleSectorLines"
               claylib/wrap::draw-circle-sector-lines)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float)
              (claylib/wrap::start-angle :float)
              (claylib/wrap::end-angle :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-circle-v))

(cffi:defcfun ("DrawCircleV" claylib/wrap::draw-circle-v)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube))

(cffi:defcfun ("DrawCube" claylib/wrap::draw-cube)
              :void
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::width :float)
              (claylib/wrap::height :float)
              (claylib/wrap::length :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube-texture))

(cffi:defcfun ("DrawCubeTexture" claylib/wrap::draw-cube-texture)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::width :float)
              (claylib/wrap::height :float)
              (claylib/wrap::length :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube-texture-rec))

(cffi:defcfun ("DrawCubeTextureRec"
               claylib/wrap::draw-cube-texture-rec)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::width :float)
              (claylib/wrap::height :float)
              (claylib/wrap::length :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube-v))

(cffi:defcfun ("DrawCubeV" claylib/wrap::draw-cube-v)
              :void
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube-wires))

(cffi:defcfun ("DrawCubeWires" claylib/wrap::draw-cube-wires)
              :void
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::width :float)
              (claylib/wrap::height :float)
              (claylib/wrap::length :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cube-wires-v))

(cffi:defcfun ("DrawCubeWiresV" claylib/wrap::draw-cube-wires-v)
              :void
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cylinder))

(cffi:defcfun ("DrawCylinder" claylib/wrap::draw-cylinder)
              :void
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius-top :float)
              (claylib/wrap::radius-bottom :float)
              (claylib/wrap::height :float)
              (claylib/wrap::slices :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cylinder-ex))

(cffi:defcfun ("DrawCylinderEx" claylib/wrap::draw-cylinder-ex)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::start-radius :float)
              (claylib/wrap::end-radius :float)
              (claylib/wrap::sides :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cylinder-wires))

(cffi:defcfun ("DrawCylinderWires" claylib/wrap::draw-cylinder-wires)
              :void
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius-top :float)
              (claylib/wrap::radius-bottom :float)
              (claylib/wrap::height :float)
              (claylib/wrap::slices :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-cylinder-wires-ex))

(cffi:defcfun ("DrawCylinderWiresEx"
               claylib/wrap::draw-cylinder-wires-ex)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::start-radius :float)
              (claylib/wrap::end-radius :float)
              (claylib/wrap::sides :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-ellipse))

(cffi:defcfun ("DrawEllipse" claylib/wrap::draw-ellipse)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius-h :float)
              (claylib/wrap::radius-v :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-ellipse-lines))

(cffi:defcfun ("DrawEllipseLines" claylib/wrap::draw-ellipse-lines)
              :void
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius-h :float)
              (claylib/wrap::radius-v :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-fps))

(cffi:defcfun ("DrawFPS" claylib/wrap::draw-fps)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int))

(declaim (inline claylib/wrap::draw-grid))

(cffi:defcfun ("DrawGrid" claylib/wrap::draw-grid)
              :void
              (claylib/wrap::slices :int)
              (claylib/wrap::spacing :float))

(declaim (inline claylib/wrap::draw-line))

(cffi:defcfun ("DrawLine" claylib/wrap::draw-line)
              :void
              (claylib/wrap::start-pos-x :int)
              (claylib/wrap::start-pos-y :int)
              (claylib/wrap::end-pos-x :int)
              (claylib/wrap::end-pos-y :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line3d))

(cffi:defcfun ("DrawLine3D" claylib/wrap::draw-line3d)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-bezier))

(cffi:defcfun ("DrawLineBezier" claylib/wrap::draw-line-bezier)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-bezier-cubic))

(cffi:defcfun ("DrawLineBezierCubic"
               claylib/wrap::draw-line-bezier-cubic)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::start-control-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-control-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-bezier-quad))

(cffi:defcfun ("DrawLineBezierQuad"
               claylib/wrap::draw-line-bezier-quad)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::control-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-ex))

(cffi:defcfun ("DrawLineEx" claylib/wrap::draw-line-ex)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-strip))

(cffi:defcfun ("DrawLineStrip" claylib/wrap::draw-line-strip)
              :void
              (claylib/wrap::points (:pointer claylib/wrap::vector2))
              (claylib/wrap::point-count :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-line-v))

(cffi:defcfun ("DrawLineV" claylib/wrap::draw-line-v)
              :void
              (claylib/wrap::start-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::end-pos
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(cffi:defcstruct (claylib/wrap::mesh :size 112)
                 (claylib/wrap::vertex-count :int :offset 0)
                 (claylib/wrap::triangle-count :int :offset 4)
                 (claylib/wrap::vertices (:pointer :float) :offset 8)
                 (claylib/wrap::texcoords (:pointer :float) :offset
                  16)
                 (claylib/wrap::texcoords2 (:pointer :float) :offset
                  24)
                 (claylib/wrap::normals (:pointer :float) :offset 32)
                 (claylib/wrap::tangents (:pointer :float) :offset
                  40)
                 (claylib/wrap::colors (:pointer :unsigned-char)
                  :offset 48)
                 (claylib/wrap::indices (:pointer :unsigned-short)
                  :offset 56)
                 (claylib/wrap::anim-vertices (:pointer :float)
                  :offset 64)
                 (claylib/wrap::anim-normals (:pointer :float)
                  :offset 72)
                 (claylib/wrap::bone-ids (:pointer :unsigned-char)
                  :offset 80)
                 (claylib/wrap::bone-weights (:pointer :float)
                  :offset 88)
                 (claylib/wrap::vao-id :unsigned-int :offset 96)
                 (claylib/wrap::vbo-id (:pointer :unsigned-int)
                  :offset 104))

(cffi:defctype claylib/wrap::mesh (:struct claylib/wrap::mesh))

(cffi:defcstruct (claylib/wrap::material-map :size 28)
                 (claylib/wrap::texture claylib/wrap::texture2d
                  :offset 0)
                 (claylib/wrap::color claylib/wrap::color :offset 20)
                 (claylib/wrap::value :float :offset 24))

(cffi:defctype claylib/wrap::material-map
               (:struct claylib/wrap::material-map))

(cffi:defcstruct (claylib/wrap::material :size 40)
                 (claylib/wrap::shader claylib/wrap::shader :offset
                  0)
                 (claylib/wrap::maps
                  (:pointer claylib/wrap::material-map) :offset 16)
                 (claylib/wrap::params :float :count 4 :offset 24))

(cffi:defctype claylib/wrap::material
               (:struct claylib/wrap::material))

(declaim (inline claylib/wrap::draw-mesh))

(cffi:defcfun ("DrawMesh" claylib/wrap::draw-mesh)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::material
               (:pointer claylib/wrap::material))
              (claylib/wrap::transform
               (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::draw-mesh-instanced))

(cffi:defcfun ("DrawMeshInstanced" claylib/wrap::draw-mesh-instanced)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::material
               (:pointer claylib/wrap::material))
              (claylib/wrap::transforms
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::instances :int))

(cffi:defcstruct (claylib/wrap::bone-info :size 36)
                 (claylib/wrap::name :char :count 32 :offset 0)
                 (claylib/wrap::parent :int :offset 32))

(cffi:defctype claylib/wrap::bone-info
               (:struct claylib/wrap::bone-info))

(cffi:defctype claylib/wrap::quaternion
               (:struct claylib/wrap::vector4))

(cffi:defcstruct (claylib/wrap::transform :size 40)
                 (claylib/wrap::translation claylib/wrap::vector3
                  :offset 0)
                 (claylib/wrap::rotation claylib/wrap::quaternion
                  :offset 12)
                 (claylib/wrap::scale claylib/wrap::vector3 :offset
                  28))

(cffi:defctype claylib/wrap::transform
               (:struct claylib/wrap::transform))

(cffi:defcstruct (claylib/wrap::model :size 120)
                 (claylib/wrap::transform claylib/wrap::matrix
                  :offset 0)
                 (claylib/wrap::mesh-count :int :offset 64)
                 (claylib/wrap::material-count :int :offset 68)
                 (claylib/wrap::meshes (:pointer claylib/wrap::mesh)
                  :offset 72)
                 (claylib/wrap::materials
                  (:pointer claylib/wrap::material) :offset 80)
                 (claylib/wrap::mesh-material (:pointer :int) :offset
                  88)
                 (claylib/wrap::bone-count :int :offset 96)
                 (claylib/wrap::bones
                  (:pointer claylib/wrap::bone-info) :offset 104)
                 (claylib/wrap::bind-pose
                  (:pointer claylib/wrap::transform) :offset 112))

(cffi:defctype claylib/wrap::model (:struct claylib/wrap::model))

(declaim (inline claylib/wrap::draw-model))

(cffi:defcfun ("DrawModel" claylib/wrap::draw-model)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::scale :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-model-ex))

(cffi:defcfun ("DrawModelEx" claylib/wrap::draw-model-ex)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-axis
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-angle :float)
              (claylib/wrap::scale (:pointer claylib/wrap::vector3))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-model-wires))

(cffi:defcfun ("DrawModelWires" claylib/wrap::draw-model-wires)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::scale :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-model-wires-ex))

(cffi:defcfun ("DrawModelWiresEx" claylib/wrap::draw-model-wires-ex)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-axis
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::rotation-angle :float)
              (claylib/wrap::scale (:pointer claylib/wrap::vector3))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-pixel))

(cffi:defcfun ("DrawPixel" claylib/wrap::draw-pixel)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-pixel-v))

(cffi:defcfun ("DrawPixelV" claylib/wrap::draw-pixel-v)
              :void
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-plane))

(cffi:defcfun ("DrawPlane" claylib/wrap::draw-plane)
              :void
              (claylib/wrap::center-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-point3d))

(cffi:defcfun ("DrawPoint3D" claylib/wrap::draw-point3d)
              :void
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-poly))

(cffi:defcfun ("DrawPoly" claylib/wrap::draw-poly)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::sides :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::rotation :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-poly-lines))

(cffi:defcfun ("DrawPolyLines" claylib/wrap::draw-poly-lines)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::sides :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::rotation :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-poly-lines-ex))

(cffi:defcfun ("DrawPolyLinesEx" claylib/wrap::draw-poly-lines-ex)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::sides :int)
              (claylib/wrap::radius :float)
              (claylib/wrap::rotation :float)
              (claylib/wrap::line-thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(cffi:defcstruct (claylib/wrap::ray :size 24)
                 (claylib/wrap::c-position claylib/wrap::vector3
                  :offset 0)
                 (claylib/wrap::direction claylib/wrap::vector3
                  :offset 12))

(cffi:defctype claylib/wrap::ray (:struct claylib/wrap::ray))

(declaim (inline claylib/wrap::draw-ray))

(cffi:defcfun ("DrawRay" claylib/wrap::draw-ray)
              :void
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle))

(cffi:defcfun ("DrawRectangle" claylib/wrap::draw-rectangle)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-gradient-ex))

(cffi:defcfun ("DrawRectangleGradientEx"
               claylib/wrap::draw-rectangle-gradient-ex)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::col1 (:pointer claylib/wrap::color))
              (claylib/wrap::col2 (:pointer claylib/wrap::color))
              (claylib/wrap::col3 (:pointer claylib/wrap::color))
              (claylib/wrap::col4 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-gradient-h))

(cffi:defcfun ("DrawRectangleGradientH"
               claylib/wrap::draw-rectangle-gradient-h)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color1 (:pointer claylib/wrap::color))
              (claylib/wrap::color2 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-gradient-v))

(cffi:defcfun ("DrawRectangleGradientV"
               claylib/wrap::draw-rectangle-gradient-v)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color1 (:pointer claylib/wrap::color))
              (claylib/wrap::color2 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-lines))

(cffi:defcfun ("DrawRectangleLines"
               claylib/wrap::draw-rectangle-lines)
              :void
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-lines-ex))

(cffi:defcfun ("DrawRectangleLinesEx"
               claylib/wrap::draw-rectangle-lines-ex)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::line-thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-pro))

(cffi:defcfun ("DrawRectanglePro" claylib/wrap::draw-rectangle-pro)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-rec))

(cffi:defcfun ("DrawRectangleRec" claylib/wrap::draw-rectangle-rec)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-rounded))

(cffi:defcfun ("DrawRectangleRounded"
               claylib/wrap::draw-rectangle-rounded)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::roundness :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-rounded-lines))

(cffi:defcfun ("DrawRectangleRoundedLines"
               claylib/wrap::draw-rectangle-rounded-lines)
              :void
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::roundness :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::line-thick :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-rectangle-v))

(cffi:defcfun ("DrawRectangleV" claylib/wrap::draw-rectangle-v)
              :void
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-ring))

(cffi:defcfun ("DrawRing" claylib/wrap::draw-ring)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::inner-radius :float)
              (claylib/wrap::outer-radius :float)
              (claylib/wrap::start-angle :float)
              (claylib/wrap::end-angle :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-ring-lines))

(cffi:defcfun ("DrawRingLines" claylib/wrap::draw-ring-lines)
              :void
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::inner-radius :float)
              (claylib/wrap::outer-radius :float)
              (claylib/wrap::start-angle :float)
              (claylib/wrap::end-angle :float)
              (claylib/wrap::segments :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-sphere))

(cffi:defcfun ("DrawSphere" claylib/wrap::draw-sphere)
              :void
              (claylib/wrap::center-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-sphere-ex))

(cffi:defcfun ("DrawSphereEx" claylib/wrap::draw-sphere-ex)
              :void
              (claylib/wrap::center-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::rings :int)
              (claylib/wrap::slices :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-sphere-wires))

(cffi:defcfun ("DrawSphereWires" claylib/wrap::draw-sphere-wires)
              :void
              (claylib/wrap::center-pos
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float)
              (claylib/wrap::rings :int)
              (claylib/wrap::slices :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-text))

(cffi:defcfun ("DrawText" claylib/wrap::draw-text)
              :void
              (claylib/wrap::text :string)
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(cffi:defcstruct (claylib/wrap::image :size 24)
                 (claylib/wrap::data (:pointer :void) :offset 0)
                 (claylib/wrap::width :int :offset 8)
                 (claylib/wrap::height :int :offset 12)
                 (claylib/wrap::mipmaps :int :offset 16)
                 (claylib/wrap::c-format :int :offset 20))

(cffi:defctype claylib/wrap::image (:struct claylib/wrap::image))

(cffi:defcstruct (claylib/wrap::glyph-info :size 40)
                 (claylib/wrap::value :int :offset 0)
                 (claylib/wrap::offset-x :int :offset 4)
                 (claylib/wrap::offset-y :int :offset 8)
                 (claylib/wrap::advance-x :int :offset 12)
                 (claylib/wrap::image claylib/wrap::image :offset 16))

(cffi:defctype claylib/wrap::glyph-info
               (:struct claylib/wrap::glyph-info))

(cffi:defcstruct (claylib/wrap::font :size 48)
                 (claylib/wrap::base-size :int :offset 0)
                 (claylib/wrap::glyph-count :int :offset 4)
                 (claylib/wrap::glyph-padding :int :offset 8)
                 (claylib/wrap::texture claylib/wrap::texture2d
                  :offset 12)
                 (claylib/wrap::recs
                  (:pointer claylib/wrap::rectangle) :offset 32)
                 (claylib/wrap::glyphs
                  (:pointer claylib/wrap::glyph-info) :offset 40))

(cffi:defctype claylib/wrap::font (:struct claylib/wrap::font))

(declaim (inline claylib/wrap::draw-text-codepoint))

(cffi:defcfun ("DrawTextCodepoint" claylib/wrap::draw-text-codepoint)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoint :int)
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::font-size :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-text-codepoints))

(cffi:defcfun ("DrawTextCodepoints"
               claylib/wrap::draw-text-codepoints)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoints (:pointer :int))
              (claylib/wrap::c-count :int)
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-text-ex))

(cffi:defcfun ("DrawTextEx" claylib/wrap::draw-text-ex)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-text-pro))

(cffi:defcfun ("DrawTextPro" claylib/wrap::draw-text-pro)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture))

(cffi:defcfun ("DrawTexture" claylib/wrap::draw-texture)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-ex))

(cffi:defcfun ("DrawTextureEx" claylib/wrap::draw-texture-ex)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::scale :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(cffi:defcstruct (claylib/wrap::n-patch-info :size 36)
                 (claylib/wrap::source claylib/wrap::rectangle
                  :offset 0)
                 (claylib/wrap::left :int :offset 16)
                 (claylib/wrap::top :int :offset 20)
                 (claylib/wrap::right :int :offset 24)
                 (claylib/wrap::bottom :int :offset 28)
                 (claylib/wrap::layout :int :offset 32))

(cffi:defctype claylib/wrap::n-patch-info
               (:struct claylib/wrap::n-patch-info))

(declaim (inline claylib/wrap::draw-texture-n-patch))

(cffi:defcfun ("DrawTextureNPatch"
               claylib/wrap::draw-texture-n-patch)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::n-patch-info
               (:pointer claylib/wrap::n-patch-info))
              (claylib/wrap::dest (:pointer claylib/wrap::rectangle))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-poly))

(cffi:defcfun ("DrawTexturePoly" claylib/wrap::draw-texture-poly)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::points (:pointer claylib/wrap::vector2))
              (claylib/wrap::texcoords
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::point-count :int)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-pro))

(cffi:defcfun ("DrawTexturePro" claylib/wrap::draw-texture-pro)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::dest (:pointer claylib/wrap::rectangle))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-quad))

(cffi:defcfun ("DrawTextureQuad" claylib/wrap::draw-texture-quad)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::tiling (:pointer claylib/wrap::vector2))
              (claylib/wrap::offset (:pointer claylib/wrap::vector2))
              (claylib/wrap::quad (:pointer claylib/wrap::rectangle))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-rec))

(cffi:defcfun ("DrawTextureRec" claylib/wrap::draw-texture-rec)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-tiled))

(cffi:defcfun ("DrawTextureTiled" claylib/wrap::draw-texture-tiled)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::dest (:pointer claylib/wrap::rectangle))
              (claylib/wrap::origin (:pointer claylib/wrap::vector2))
              (claylib/wrap::rotation :float)
              (claylib/wrap::scale :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-texture-v))

(cffi:defcfun ("DrawTextureV" claylib/wrap::draw-texture-v)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle))

(cffi:defcfun ("DrawTriangle" claylib/wrap::draw-triangle)
              :void
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v3 (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle3d))

(cffi:defcfun ("DrawTriangle3D" claylib/wrap::draw-triangle3d)
              :void
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v3 (:pointer claylib/wrap::vector3))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle-fan))

(cffi:defcfun ("DrawTriangleFan" claylib/wrap::draw-triangle-fan)
              :void
              (claylib/wrap::points (:pointer claylib/wrap::vector2))
              (claylib/wrap::point-count :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle-lines))

(cffi:defcfun ("DrawTriangleLines" claylib/wrap::draw-triangle-lines)
              :void
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v3 (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle-strip))

(cffi:defcfun ("DrawTriangleStrip" claylib/wrap::draw-triangle-strip)
              :void
              (claylib/wrap::points (:pointer claylib/wrap::vector2))
              (claylib/wrap::point-count :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::draw-triangle-strip3d))

(cffi:defcfun ("DrawTriangleStrip3D"
               claylib/wrap::draw-triangle-strip3d)
              :void
              (claylib/wrap::points (:pointer claylib/wrap::vector3))
              (claylib/wrap::point-count :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::enable-cursor))

(cffi:defcfun ("EnableCursor" claylib/wrap::enable-cursor) :void)

(declaim (inline claylib/wrap::enable-event-waiting))

(cffi:defcfun ("EnableEventWaiting"
               claylib/wrap::enable-event-waiting)
              :void)

(declaim (inline claylib/wrap::encode-data-base64))

(cffi:defcfun ("EncodeDataBase64" claylib/wrap::encode-data-base64)
              :string
              (claylib/wrap::data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int)
              (claylib/wrap::output-size (:pointer :int)))

(declaim (inline claylib/wrap::end-blend-mode))

(cffi:defcfun ("EndBlendMode" claylib/wrap::end-blend-mode) :void)

(declaim (inline claylib/wrap::end-drawing))

(cffi:defcfun ("EndDrawing" claylib/wrap::end-drawing) :void)

(declaim (inline claylib/wrap::end-mode2d))

(cffi:defcfun ("EndMode2D" claylib/wrap::end-mode2d) :void)

(declaim (inline claylib/wrap::end-mode3d))

(cffi:defcfun ("EndMode3D" claylib/wrap::end-mode3d) :void)

(declaim (inline claylib/wrap::end-scissor-mode))

(cffi:defcfun ("EndScissorMode" claylib/wrap::end-scissor-mode) :void)

(declaim (inline claylib/wrap::end-shader-mode))

(cffi:defcfun ("EndShaderMode" claylib/wrap::end-shader-mode) :void)

(declaim (inline claylib/wrap::end-texture-mode))

(cffi:defcfun ("EndTextureMode" claylib/wrap::end-texture-mode) :void)

(declaim (inline claylib/wrap::end-vr-stereo-mode))

(cffi:defcfun ("EndVrStereoMode" claylib/wrap::end-vr-stereo-mode)
              :void)

(declaim (inline claylib/wrap::export-data-as-code))

(cffi:defcfun ("ExportDataAsCode" claylib/wrap::export-data-as-code)
              :bool
              (claylib/wrap::data :string)
              (claylib/wrap::size :unsigned-int)
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-font-as-code))

(cffi:defcfun ("ExportFontAsCode" claylib/wrap::export-font-as-code)
              :bool
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-image))

(cffi:defcfun ("ExportImage" claylib/wrap::export-image)
              :bool
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-image-as-code))

(cffi:defcfun ("ExportImageAsCode"
               claylib/wrap::export-image-as-code)
              :bool
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-mesh))

(cffi:defcfun ("ExportMesh" claylib/wrap::export-mesh)
              :bool
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::file-name :string))

(cffi:defcstruct (claylib/wrap::wave :size 24)
                 (claylib/wrap::frame-count :unsigned-int :offset 0)
                 (claylib/wrap::sample-rate :unsigned-int :offset 4)
                 (claylib/wrap::sample-size :unsigned-int :offset 8)
                 (claylib/wrap::channels :unsigned-int :offset 12)
                 (claylib/wrap::data (:pointer :void) :offset 16))

(cffi:defctype claylib/wrap::wave (:struct claylib/wrap::wave))

(declaim (inline claylib/wrap::export-wave))

(cffi:defcfun ("ExportWave" claylib/wrap::export-wave)
              :bool
              (claylib/wrap::wave (:pointer claylib/wrap::wave))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::export-wave-as-code))

(cffi:defcfun ("ExportWaveAsCode" claylib/wrap::export-wave-as-code)
              :bool
              (claylib/wrap::wave (:pointer claylib/wrap::wave))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::fade))

(cffi:defcfun ("Fade" claylib/wrap::fade)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::alpha :float))

(declaim (inline claylib/wrap::file-exists))

(cffi:defcfun ("FileExists" claylib/wrap::file-exists)
              :bool
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::float-equals))

(cffi:defcfun ("FloatEquals" claylib/wrap::float-equals)
              :int
              (claylib/wrap::x :float)
              (claylib/wrap::y :float))

(declaim (inline claylib/wrap::gen-image-cellular))

(cffi:defcfun ("GenImageCellular" claylib/wrap::gen-image-cellular)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::tile-size :int))

(declaim (inline claylib/wrap::gen-image-checked))

(cffi:defcfun ("GenImageChecked" claylib/wrap::gen-image-checked)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::checks-x :int)
              (claylib/wrap::checks-y :int)
              (claylib/wrap::col1 (:pointer claylib/wrap::color))
              (claylib/wrap::col2 (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-color))

(cffi:defcfun ("GenImageColor" claylib/wrap::gen-image-color)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-font-atlas))

(cffi:defcfun ("GenImageFontAtlas"
               claylib/wrap::gen-image-font-atlas)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::chars
               (:pointer claylib/wrap::glyph-info))
              (claylib/wrap::recs
               (:pointer (:pointer claylib/wrap::rectangle)))
              (claylib/wrap::glyph-count :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::padding :int)
              (claylib/wrap::pack-method :int))

(declaim (inline claylib/wrap::gen-image-gradient-h))

(cffi:defcfun ("GenImageGradientH"
               claylib/wrap::gen-image-gradient-h)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::left (:pointer claylib/wrap::color))
              (claylib/wrap::right (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-gradient-radial))

(cffi:defcfun ("GenImageGradientRadial"
               claylib/wrap::gen-image-gradient-radial)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::density :float)
              (claylib/wrap::inner (:pointer claylib/wrap::color))
              (claylib/wrap::outer (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-gradient-v))

(cffi:defcfun ("GenImageGradientV"
               claylib/wrap::gen-image-gradient-v)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::top (:pointer claylib/wrap::color))
              (claylib/wrap::bottom (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gen-image-white-noise))

(cffi:defcfun ("GenImageWhiteNoise"
               claylib/wrap::gen-image-white-noise)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::factor :float))

(declaim (inline claylib/wrap::gen-mesh-cone))

(cffi:defcfun ("GenMeshCone" claylib/wrap::gen-mesh-cone)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::height :float)
              (claylib/wrap::slices :int))

(declaim (inline claylib/wrap::gen-mesh-cube))

(cffi:defcfun ("GenMeshCube" claylib/wrap::gen-mesh-cube)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::width :float)
              (claylib/wrap::height :float)
              (claylib/wrap::length :float))

(declaim (inline claylib/wrap::gen-mesh-cubicmap))

(cffi:defcfun ("GenMeshCubicmap" claylib/wrap::gen-mesh-cubicmap)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::cubicmap (:pointer claylib/wrap::image))
              (claylib/wrap::cube-size
               (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::gen-mesh-cylinder))

(cffi:defcfun ("GenMeshCylinder" claylib/wrap::gen-mesh-cylinder)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::height :float)
              (claylib/wrap::slices :int))

(declaim (inline claylib/wrap::gen-mesh-heightmap))

(cffi:defcfun ("GenMeshHeightmap" claylib/wrap::gen-mesh-heightmap)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::heightmap
               (:pointer claylib/wrap::image))
              (claylib/wrap::size (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::gen-mesh-hemi-sphere))

(cffi:defcfun ("GenMeshHemiSphere"
               claylib/wrap::gen-mesh-hemi-sphere)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::rings :int)
              (claylib/wrap::slices :int))

(declaim (inline claylib/wrap::gen-mesh-knot))

(cffi:defcfun ("GenMeshKnot" claylib/wrap::gen-mesh-knot)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::size :float)
              (claylib/wrap::rad-seg :int)
              (claylib/wrap::sides :int))

(declaim (inline claylib/wrap::gen-mesh-plane))

(cffi:defcfun ("GenMeshPlane" claylib/wrap::gen-mesh-plane)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::width :float)
              (claylib/wrap::length :float)
              (claylib/wrap::res-x :int)
              (claylib/wrap::res-z :int))

(declaim (inline claylib/wrap::gen-mesh-poly))

(cffi:defcfun ("GenMeshPoly" claylib/wrap::gen-mesh-poly)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::sides :int)
              (claylib/wrap::radius :float))

(declaim (inline claylib/wrap::gen-mesh-sphere))

(cffi:defcfun ("GenMeshSphere" claylib/wrap::gen-mesh-sphere)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::rings :int)
              (claylib/wrap::slices :int))

(declaim (inline claylib/wrap::gen-mesh-tangents))

(cffi:defcfun ("GenMeshTangents" claylib/wrap::gen-mesh-tangents)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh)))

(declaim (inline claylib/wrap::gen-mesh-torus))

(cffi:defcfun ("GenMeshTorus" claylib/wrap::gen-mesh-torus)
              (:pointer claylib/wrap::mesh)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::mesh))
              (claylib/wrap::radius :float)
              (claylib/wrap::size :float)
              (claylib/wrap::rad-seg :int)
              (claylib/wrap::sides :int))

(declaim (inline claylib/wrap::gen-texture-mipmaps))

(cffi:defcfun ("GenTextureMipmaps" claylib/wrap::gen-texture-mipmaps)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d)))

(declaim (inline claylib/wrap::get-application-directory))

(cffi:defcfun ("GetApplicationDirectory"
               claylib/wrap::get-application-directory)
              :string)

(declaim (inline claylib/wrap::get-camera-matrix))

(cffi:defcfun ("GetCameraMatrix" claylib/wrap::get-camera-matrix)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-camera-matrix2d))

(cffi:defcfun ("GetCameraMatrix2D" claylib/wrap::get-camera-matrix2d)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera2d)))

(declaim (inline claylib/wrap::get-char-pressed))

(cffi:defcfun ("GetCharPressed" claylib/wrap::get-char-pressed) :int)

(declaim (inline claylib/wrap::get-clipboard-text))

(cffi:defcfun ("GetClipboardText" claylib/wrap::get-clipboard-text)
              :string)

(declaim (inline claylib/wrap::get-codepoint))

(cffi:defcfun ("GetCodepoint" claylib/wrap::get-codepoint)
              :int
              (claylib/wrap::text :string)
              (claylib/wrap::bytes-processed (:pointer :int)))

(declaim (inline claylib/wrap::get-codepoint-count))

(cffi:defcfun ("GetCodepointCount" claylib/wrap::get-codepoint-count)
              :int
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::get-collision-rec))

(cffi:defcfun ("GetCollisionRec" claylib/wrap::get-collision-rec)
              (:pointer claylib/wrap::rectangle)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::rec1 (:pointer claylib/wrap::rectangle))
              (claylib/wrap::rec2 (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::get-color))

(cffi:defcfun ("GetColor" claylib/wrap::get-color)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::hex-value :unsigned-int))

(declaim (inline claylib/wrap::get-current-monitor))

(cffi:defcfun ("GetCurrentMonitor" claylib/wrap::get-current-monitor)
              :int)

(declaim (inline claylib/wrap::get-directory-path))

(cffi:defcfun ("GetDirectoryPath" claylib/wrap::get-directory-path)
              :string
              (claylib/wrap::file-path :string))

(declaim (inline claylib/wrap::get-fps))

(cffi:defcfun ("GetFPS" claylib/wrap::get-fps) :int)

(declaim (inline claylib/wrap::get-file-extension))

(cffi:defcfun ("GetFileExtension" claylib/wrap::get-file-extension)
              :string
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::get-file-length))

(cffi:defcfun ("GetFileLength" claylib/wrap::get-file-length)
              :int
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::get-file-mod-time))

(cffi:defcfun ("GetFileModTime" claylib/wrap::get-file-mod-time)
              :long
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::get-file-name))

(cffi:defcfun ("GetFileName" claylib/wrap::get-file-name)
              :string
              (claylib/wrap::file-path :string))

(declaim (inline claylib/wrap::get-file-name-without-ext))

(cffi:defcfun ("GetFileNameWithoutExt"
               claylib/wrap::get-file-name-without-ext)
              :string
              (claylib/wrap::file-path :string))

(declaim (inline claylib/wrap::get-font-default))

(cffi:defcfun ("GetFontDefault" claylib/wrap::get-font-default)
              (:pointer claylib/wrap::font)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::font)))

(declaim (inline claylib/wrap::get-frame-time))

(cffi:defcfun ("GetFrameTime" claylib/wrap::get-frame-time) :float)

(declaim (inline claylib/wrap::get-gamepad-axis-count))

(cffi:defcfun ("GetGamepadAxisCount"
               claylib/wrap::get-gamepad-axis-count)
              :int
              (claylib/wrap::gamepad :int))

(declaim (inline claylib/wrap::get-gamepad-axis-movement))

(cffi:defcfun ("GetGamepadAxisMovement"
               claylib/wrap::get-gamepad-axis-movement)
              :float
              (claylib/wrap::gamepad :int)
              (claylib/wrap::axis :int))

(declaim (inline claylib/wrap::get-gamepad-button-pressed))

(cffi:defcfun ("GetGamepadButtonPressed"
               claylib/wrap::get-gamepad-button-pressed)
              :int)

(declaim (inline claylib/wrap::get-gamepad-name))

(cffi:defcfun ("GetGamepadName" claylib/wrap::get-gamepad-name)
              :string
              (claylib/wrap::gamepad :int))

(declaim (inline claylib/wrap::get-gesture-detected))

(cffi:defcfun ("GetGestureDetected"
               claylib/wrap::get-gesture-detected)
              :int)

(declaim (inline claylib/wrap::get-gesture-drag-angle))

(cffi:defcfun ("GetGestureDragAngle"
               claylib/wrap::get-gesture-drag-angle)
              :float)

(declaim (inline claylib/wrap::get-gesture-drag-vector))

(cffi:defcfun ("GetGestureDragVector"
               claylib/wrap::get-gesture-drag-vector)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-gesture-hold-duration))

(cffi:defcfun ("GetGestureHoldDuration"
               claylib/wrap::get-gesture-hold-duration)
              :float)

(declaim (inline claylib/wrap::get-gesture-pinch-angle))

(cffi:defcfun ("GetGesturePinchAngle"
               claylib/wrap::get-gesture-pinch-angle)
              :float)

(declaim (inline claylib/wrap::get-gesture-pinch-vector))

(cffi:defcfun ("GetGesturePinchVector"
               claylib/wrap::get-gesture-pinch-vector)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-glyph-atlas-rec))

(cffi:defcfun ("GetGlyphAtlasRec" claylib/wrap::get-glyph-atlas-rec)
              (:pointer claylib/wrap::rectangle)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoint :int))

(declaim (inline claylib/wrap::get-glyph-index))

(cffi:defcfun ("GetGlyphIndex" claylib/wrap::get-glyph-index)
              :int
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoint :int))

(declaim (inline claylib/wrap::get-glyph-info))

(cffi:defcfun ("GetGlyphInfo" claylib/wrap::get-glyph-info)
              (:pointer claylib/wrap::glyph-info)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::glyph-info))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::codepoint :int))

(declaim (inline claylib/wrap::get-image-alpha-border))

(cffi:defcfun ("GetImageAlphaBorder"
               claylib/wrap::get-image-alpha-border)
              (:pointer claylib/wrap::rectangle)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::threshold :float))

(declaim (inline claylib/wrap::get-image-color))

(cffi:defcfun ("GetImageColor" claylib/wrap::get-image-color)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::x :int)
              (claylib/wrap::y :int))

(declaim (inline claylib/wrap::get-key-pressed))

(cffi:defcfun ("GetKeyPressed" claylib/wrap::get-key-pressed) :int)

(declaim (inline claylib/wrap::get-mesh-bounding-box))

(cffi:defcfun ("GetMeshBoundingBox"
               claylib/wrap::get-mesh-bounding-box)
              (:pointer claylib/wrap::bounding-box)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh)))

(declaim (inline claylib/wrap::get-model-bounding-box))

(cffi:defcfun ("GetModelBoundingBox"
               claylib/wrap::get-model-bounding-box)
              (:pointer claylib/wrap::bounding-box)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::bounding-box))
              (claylib/wrap::model (:pointer claylib/wrap::model)))

(declaim (inline claylib/wrap::get-monitor-count))

(cffi:defcfun ("GetMonitorCount" claylib/wrap::get-monitor-count)
              :int)

(declaim (inline claylib/wrap::get-monitor-height))

(cffi:defcfun ("GetMonitorHeight" claylib/wrap::get-monitor-height)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-name))

(cffi:defcfun ("GetMonitorName" claylib/wrap::get-monitor-name)
              :string
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-physical-height))

(cffi:defcfun ("GetMonitorPhysicalHeight"
               claylib/wrap::get-monitor-physical-height)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-physical-width))

(cffi:defcfun ("GetMonitorPhysicalWidth"
               claylib/wrap::get-monitor-physical-width)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-position))

(cffi:defcfun ("GetMonitorPosition"
               claylib/wrap::get-monitor-position)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-refresh-rate))

(cffi:defcfun ("GetMonitorRefreshRate"
               claylib/wrap::get-monitor-refresh-rate)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-monitor-width))

(cffi:defcfun ("GetMonitorWidth" claylib/wrap::get-monitor-width)
              :int
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::get-mouse-delta))

(cffi:defcfun ("GetMouseDelta" claylib/wrap::get-mouse-delta)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-mouse-position))

(cffi:defcfun ("GetMousePosition" claylib/wrap::get-mouse-position)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-mouse-ray))

(cffi:defcfun ("GetMouseRay" claylib/wrap::get-mouse-ray)
              (:pointer claylib/wrap::ray)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::ray))
              (claylib/wrap::mouse-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-mouse-wheel-move))

(cffi:defcfun ("GetMouseWheelMove"
               claylib/wrap::get-mouse-wheel-move)
              :float)

(declaim (inline claylib/wrap::get-mouse-wheel-move-v))

(cffi:defcfun ("GetMouseWheelMoveV"
               claylib/wrap::get-mouse-wheel-move-v)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-mouse-x))

(cffi:defcfun ("GetMouseX" claylib/wrap::get-mouse-x) :int)

(declaim (inline claylib/wrap::get-mouse-y))

(cffi:defcfun ("GetMouseY" claylib/wrap::get-mouse-y) :int)

(cffi:defcstruct (claylib/wrap::music :size 56)
                 (claylib/wrap::c-stream claylib/wrap::audio-stream
                  :offset 0)
                 (claylib/wrap::frame-count :unsigned-int :offset 32)
                 (claylib/wrap::looping :bool :offset 36)
                 (claylib/wrap::ctx-type :int :offset 40)
                 (claylib/wrap::ctx-data (:pointer :void) :offset 48))

(cffi:defctype claylib/wrap::music (:struct claylib/wrap::music))

(declaim (inline claylib/wrap::get-music-time-length))

(cffi:defcfun ("GetMusicTimeLength"
               claylib/wrap::get-music-time-length)
              :float
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::get-music-time-played))

(cffi:defcfun ("GetMusicTimePlayed"
               claylib/wrap::get-music-time-played)
              :float
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::get-pixel-color))

(cffi:defcfun ("GetPixelColor" claylib/wrap::get-pixel-color)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::src-ptr (:pointer :void))
              (claylib/wrap::c-format :int))

(declaim (inline claylib/wrap::get-pixel-data-size))

(cffi:defcfun ("GetPixelDataSize" claylib/wrap::get-pixel-data-size)
              :int
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::c-format :int))

(declaim (inline claylib/wrap::get-prev-directory-path))

(cffi:defcfun ("GetPrevDirectoryPath"
               claylib/wrap::get-prev-directory-path)
              :string
              (claylib/wrap::dir-path :string))

(declaim (inline claylib/wrap::get-random-value))

(cffi:defcfun ("GetRandomValue" claylib/wrap::get-random-value)
              :int
              (claylib/wrap::c-min :int)
              (claylib/wrap::c-max :int))

(cffi:defcstruct (claylib/wrap::ray-collision :size 32)
                 (claylib/wrap::hit :bool :offset 0)
                 (claylib/wrap::distance :float :offset 4)
                 (claylib/wrap::point claylib/wrap::vector3 :offset
                  8)
                 (claylib/wrap::normal claylib/wrap::vector3 :offset
                  20))

(cffi:defctype claylib/wrap::ray-collision
               (:struct claylib/wrap::ray-collision))

(declaim (inline claylib/wrap::get-ray-collision-box))

(cffi:defcfun ("GetRayCollisionBox"
               claylib/wrap::get-ray-collision-box)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::box
               (:pointer claylib/wrap::bounding-box)))

(declaim (inline claylib/wrap::get-ray-collision-mesh))

(cffi:defcfun ("GetRayCollisionMesh"
               claylib/wrap::get-ray-collision-mesh)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::transform
               (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::get-ray-collision-quad))

(cffi:defcfun ("GetRayCollisionQuad"
               claylib/wrap::get-ray-collision-quad)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::p1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p2 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p3 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p4 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::get-ray-collision-sphere))

(cffi:defcfun ("GetRayCollisionSphere"
               claylib/wrap::get-ray-collision-sphere)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::center (:pointer claylib/wrap::vector3))
              (claylib/wrap::radius :float))

(declaim (inline claylib/wrap::get-ray-collision-triangle))

(cffi:defcfun ("GetRayCollisionTriangle"
               claylib/wrap::get-ray-collision-triangle)
              (:pointer claylib/wrap::ray-collision)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::ray-collision))
              (claylib/wrap::ray (:pointer claylib/wrap::ray))
              (claylib/wrap::p1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p2 (:pointer claylib/wrap::vector3))
              (claylib/wrap::p3 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::get-render-height))

(cffi:defcfun ("GetRenderHeight" claylib/wrap::get-render-height)
              :int)

(declaim (inline claylib/wrap::get-render-width))

(cffi:defcfun ("GetRenderWidth" claylib/wrap::get-render-width) :int)

(declaim (inline claylib/wrap::get-screen-height))

(cffi:defcfun ("GetScreenHeight" claylib/wrap::get-screen-height)
              :int)

(declaim (inline claylib/wrap::get-screen-to-world2d))

(cffi:defcfun ("GetScreenToWorld2D"
               claylib/wrap::get-screen-to-world2d)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera2d)))

(declaim (inline claylib/wrap::get-screen-width))

(cffi:defcfun ("GetScreenWidth" claylib/wrap::get-screen-width) :int)

(declaim (inline claylib/wrap::get-shader-location))

(cffi:defcfun ("GetShaderLocation" claylib/wrap::get-shader-location)
              :int
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::uniform-name :string))

(declaim (inline claylib/wrap::get-shader-location-attrib))

(cffi:defcfun ("GetShaderLocationAttrib"
               claylib/wrap::get-shader-location-attrib)
              :int
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::attrib-name :string))

(declaim (inline claylib/wrap::get-sounds-playing))

(cffi:defcfun ("GetSoundsPlaying" claylib/wrap::get-sounds-playing)
              :int)

(declaim (inline claylib/wrap::get-time))

(cffi:defcfun ("GetTime" claylib/wrap::get-time) :double)

(declaim (inline claylib/wrap::get-touch-point-count))

(cffi:defcfun ("GetTouchPointCount"
               claylib/wrap::get-touch-point-count)
              :int)

(declaim (inline claylib/wrap::get-touch-point-id))

(cffi:defcfun ("GetTouchPointId" claylib/wrap::get-touch-point-id)
              :int
              (claylib/wrap::index :int))

(declaim (inline claylib/wrap::get-touch-position))

(cffi:defcfun ("GetTouchPosition" claylib/wrap::get-touch-position)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::index :int))

(declaim (inline claylib/wrap::get-touch-x))

(cffi:defcfun ("GetTouchX" claylib/wrap::get-touch-x) :int)

(declaim (inline claylib/wrap::get-touch-y))

(cffi:defcfun ("GetTouchY" claylib/wrap::get-touch-y) :int)

(declaim (inline claylib/wrap::get-window-handle))

(cffi:defcfun ("GetWindowHandle" claylib/wrap::get-window-handle)
              (:pointer :void))

(declaim (inline claylib/wrap::get-window-position))

(cffi:defcfun ("GetWindowPosition" claylib/wrap::get-window-position)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-window-scale-dpi))

(cffi:defcfun ("GetWindowScaleDPI"
               claylib/wrap::get-window-scale-dpi)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::get-working-directory))

(cffi:defcfun ("GetWorkingDirectory"
               claylib/wrap::get-working-directory)
              :string)

(declaim (inline claylib/wrap::get-world-to-screen))

(cffi:defcfun ("GetWorldToScreen" claylib/wrap::get-world-to-screen)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::get-world-to-screen2d))

(cffi:defcfun ("GetWorldToScreen2D"
               claylib/wrap::get-world-to-screen2d)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::camera
               (:pointer claylib/wrap::camera2d)))

(declaim (inline claylib/wrap::get-world-to-screen-ex))

(cffi:defcfun ("GetWorldToScreenEx"
               claylib/wrap::get-world-to-screen-ex)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(declaim (inline claylib/wrap::gui-button))

(cffi:defcfun ("GuiButton" claylib/wrap::gui-button)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-check-box))

(cffi:defcfun ("GuiCheckBox" claylib/wrap::gui-check-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::checked :bool))

(declaim (inline claylib/wrap::gui-check-icon-pixel))

(cffi:defcfun ("GuiCheckIconPixel"
               claylib/wrap::gui-check-icon-pixel)
              :bool
              (claylib/wrap::icon-id :int)
              (claylib/wrap::x :int)
              (claylib/wrap::y :int))

(declaim (inline claylib/wrap::gui-clear-icon-pixel))

(cffi:defcfun ("GuiClearIconPixel"
               claylib/wrap::gui-clear-icon-pixel)
              :void
              (claylib/wrap::icon-id :int)
              (claylib/wrap::x :int)
              (claylib/wrap::y :int))

(declaim (inline claylib/wrap::gui-color-bar-alpha))

(cffi:defcfun ("GuiColorBarAlpha" claylib/wrap::gui-color-bar-alpha)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::alpha :float))

(declaim (inline claylib/wrap::gui-color-bar-hue))

(cffi:defcfun ("GuiColorBarHue" claylib/wrap::gui-color-bar-hue)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::value :float))

(declaim (inline claylib/wrap::gui-color-panel))

(cffi:defcfun ("GuiColorPanel" claylib/wrap::gui-color-panel)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gui-color-picker))

(cffi:defcfun ("GuiColorPicker" claylib/wrap::gui-color-picker)
              (:pointer claylib/wrap::color)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::color))
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gui-combo-box))

(cffi:defcfun ("GuiComboBox" claylib/wrap::gui-combo-box)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::active :int))

(declaim (inline claylib/wrap::gui-disable))

(cffi:defcfun ("GuiDisable" claylib/wrap::gui-disable) :void)

(declaim (inline claylib/wrap::gui-draw-icon))

(cffi:defcfun ("GuiDrawIcon" claylib/wrap::gui-draw-icon)
              :void
              (claylib/wrap::icon-id :int)
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::pixel-size :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::gui-dropdown-box))

(cffi:defcfun ("GuiDropdownBox" claylib/wrap::gui-dropdown-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::active (:pointer :int))
              (claylib/wrap::edit-mode :bool))

(declaim (inline claylib/wrap::gui-dummy-rec))

(cffi:defcfun ("GuiDummyRec" claylib/wrap::gui-dummy-rec)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-enable))

(cffi:defcfun ("GuiEnable" claylib/wrap::gui-enable) :void)

(declaim (inline claylib/wrap::gui-fade))

(cffi:defcfun ("GuiFade" claylib/wrap::gui-fade)
              :void
              (claylib/wrap::alpha :float))

(declaim (inline claylib/wrap::gui-get-font))

(cffi:defcfun ("GuiGetFont" claylib/wrap::gui-get-font)
              (:pointer claylib/wrap::font)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::font)))

(declaim (inline claylib/wrap::gui-get-icon-data))

(cffi:defcfun ("GuiGetIconData" claylib/wrap::gui-get-icon-data)
              (:pointer :unsigned-int)
              (claylib/wrap::icon-id :int))

(declaim (inline claylib/wrap::gui-get-icons))

(cffi:defcfun ("GuiGetIcons" claylib/wrap::gui-get-icons)
              (:pointer :unsigned-int))

(declaim (inline claylib/wrap::gui-get-state))

(cffi:defcfun ("GuiGetState" claylib/wrap::gui-get-state) :int)

(declaim (inline claylib/wrap::gui-get-style))

(cffi:defcfun ("GuiGetStyle" claylib/wrap::gui-get-style)
              :int
              (claylib/wrap::control :int)
              (claylib/wrap::property :int))

(declaim (inline claylib/wrap::gui-grid))

(cffi:defcfun ("GuiGrid" claylib/wrap::gui-grid)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::spacing :float)
              (claylib/wrap::subdivs :int))

(declaim (inline claylib/wrap::gui-group-box))

(cffi:defcfun ("GuiGroupBox" claylib/wrap::gui-group-box)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-icon-text))

(cffi:defcfun ("GuiIconText" claylib/wrap::gui-icon-text)
              :string
              (claylib/wrap::icon-id :int)
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-is-locked))

(cffi:defcfun ("GuiIsLocked" claylib/wrap::gui-is-locked) :bool)

(declaim (inline claylib/wrap::gui-label))

(cffi:defcfun ("GuiLabel" claylib/wrap::gui-label)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-label-button))

(cffi:defcfun ("GuiLabelButton" claylib/wrap::gui-label-button)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-line))

(cffi:defcfun ("GuiLine" claylib/wrap::gui-line)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-list-view))

(cffi:defcfun ("GuiListView" claylib/wrap::gui-list-view)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::scroll-index (:pointer :int))
              (claylib/wrap::active :int))

(declaim (inline claylib/wrap::gui-list-view-ex))

(cffi:defcfun ("GuiListViewEx" claylib/wrap::gui-list-view-ex)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::c-count :int)
              (claylib/wrap::focus (:pointer :int))
              (claylib/wrap::scroll-index (:pointer :int))
              (claylib/wrap::active :int))

(declaim (inline claylib/wrap::gui-load-style))

(cffi:defcfun ("GuiLoadStyle" claylib/wrap::gui-load-style)
              :void
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::gui-load-style-default))

(cffi:defcfun ("GuiLoadStyleDefault"
               claylib/wrap::gui-load-style-default)
              :void)

(declaim (inline claylib/wrap::gui-lock))

(cffi:defcfun ("GuiLock" claylib/wrap::gui-lock) :void)

(declaim (inline claylib/wrap::gui-message-box))

(cffi:defcfun ("GuiMessageBox" claylib/wrap::gui-message-box)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::title :string)
              (claylib/wrap::message :string)
              (claylib/wrap::buttons :string))

(declaim (inline claylib/wrap::gui-panel))

(cffi:defcfun ("GuiPanel" claylib/wrap::gui-panel)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-progress-bar))

(cffi:defcfun ("GuiProgressBar" claylib/wrap::gui-progress-bar)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text-left :string)
              (claylib/wrap::text-right :string)
              (claylib/wrap::value :float)
              (claylib/wrap::min-value :float)
              (claylib/wrap::max-value :float))

(declaim (inline claylib/wrap::gui-scroll-panel))

(cffi:defcfun ("GuiScrollPanel" claylib/wrap::gui-scroll-panel)
              (:pointer claylib/wrap::rectangle)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::content
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::scroll (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::gui-set-font))

(cffi:defcfun ("GuiSetFont" claylib/wrap::gui-set-font)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font)))

(declaim (inline claylib/wrap::gui-set-icon-data))

(cffi:defcfun ("GuiSetIconData" claylib/wrap::gui-set-icon-data)
              :void
              (claylib/wrap::icon-id :int)
              (claylib/wrap::data (:pointer :unsigned-int)))

(declaim (inline claylib/wrap::gui-set-icon-pixel))

(cffi:defcfun ("GuiSetIconPixel" claylib/wrap::gui-set-icon-pixel)
              :void
              (claylib/wrap::icon-id :int)
              (claylib/wrap::x :int)
              (claylib/wrap::y :int))

(declaim (inline claylib/wrap::gui-set-icon-scale))

(cffi:defcfun ("GuiSetIconScale" claylib/wrap::gui-set-icon-scale)
              :void
              (claylib/wrap::scale :unsigned-int))

(declaim (inline claylib/wrap::gui-set-state))

(cffi:defcfun ("GuiSetState" claylib/wrap::gui-set-state)
              :void
              (claylib/wrap::state :int))

(declaim (inline claylib/wrap::gui-set-style))

(cffi:defcfun ("GuiSetStyle" claylib/wrap::gui-set-style)
              :void
              (claylib/wrap::control :int)
              (claylib/wrap::property :int)
              (claylib/wrap::value :int))

(declaim (inline claylib/wrap::gui-slider))

(cffi:defcfun ("GuiSlider" claylib/wrap::gui-slider)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text-left :string)
              (claylib/wrap::text-right :string)
              (claylib/wrap::value :float)
              (claylib/wrap::min-value :float)
              (claylib/wrap::max-value :float))

(declaim (inline claylib/wrap::gui-slider-bar))

(cffi:defcfun ("GuiSliderBar" claylib/wrap::gui-slider-bar)
              :float
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text-left :string)
              (claylib/wrap::text-right :string)
              (claylib/wrap::value :float)
              (claylib/wrap::min-value :float)
              (claylib/wrap::max-value :float))

(declaim (inline claylib/wrap::gui-spinner))

(cffi:defcfun ("GuiSpinner" claylib/wrap::gui-spinner)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::value (:pointer :int))
              (claylib/wrap::min-value :int)
              (claylib/wrap::max-value :int)
              (claylib/wrap::edit-mode :bool))

(declaim (inline claylib/wrap::gui-status-bar))

(cffi:defcfun ("GuiStatusBar" claylib/wrap::gui-status-bar)
              :void
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::gui-text-box))

(cffi:defcfun ("GuiTextBox" claylib/wrap::gui-text-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::text-size :int)
              (claylib/wrap::edit-mode :bool))

(declaim (inline claylib/wrap::gui-text-box-multi))

(cffi:defcfun ("GuiTextBoxMulti" claylib/wrap::gui-text-box-multi)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::text-size :int)
              (claylib/wrap::edit-mode :bool))

(declaim (inline claylib/wrap::gui-text-input-box))

(cffi:defcfun ("GuiTextInputBox" claylib/wrap::gui-text-input-box)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::title :string)
              (claylib/wrap::message :string)
              (claylib/wrap::buttons :string)
              (claylib/wrap::text :string)
              (claylib/wrap::text-max-size :int)
              (claylib/wrap::secret-view-active (:pointer :int)))

(declaim (inline claylib/wrap::gui-toggle))

(cffi:defcfun ("GuiToggle" claylib/wrap::gui-toggle)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::active :bool))

(declaim (inline claylib/wrap::gui-toggle-group))

(cffi:defcfun ("GuiToggleGroup" claylib/wrap::gui-toggle-group)
              :int
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::active :int))

(declaim (inline claylib/wrap::gui-unlock))

(cffi:defcfun ("GuiUnlock" claylib/wrap::gui-unlock) :void)

(declaim (inline claylib/wrap::gui-value-box))

(cffi:defcfun ("GuiValueBox" claylib/wrap::gui-value-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::text :string)
              (claylib/wrap::value (:pointer :int))
              (claylib/wrap::min-value :int)
              (claylib/wrap::max-value :int)
              (claylib/wrap::edit-mode :bool))

(declaim (inline claylib/wrap::gui-window-box))

(cffi:defcfun ("GuiWindowBox" claylib/wrap::gui-window-box)
              :bool
              (claylib/wrap::bounds
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::title :string))

(declaim (inline claylib/wrap::hide-cursor))

(cffi:defcfun ("HideCursor" claylib/wrap::hide-cursor) :void)

(declaim (inline claylib/wrap::image-alpha-clear))

(cffi:defcfun ("ImageAlphaClear" claylib/wrap::image-alpha-clear)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::threshold :float))

(declaim (inline claylib/wrap::image-alpha-crop))

(cffi:defcfun ("ImageAlphaCrop" claylib/wrap::image-alpha-crop)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::threshold :float))

(declaim (inline claylib/wrap::image-alpha-mask))

(cffi:defcfun ("ImageAlphaMask" claylib/wrap::image-alpha-mask)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::alpha-mask
               (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-alpha-premultiply))

(cffi:defcfun ("ImageAlphaPremultiply"
               claylib/wrap::image-alpha-premultiply)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-clear-background))

(cffi:defcfun ("ImageClearBackground"
               claylib/wrap::image-clear-background)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-color-brightness))

(cffi:defcfun ("ImageColorBrightness"
               claylib/wrap::image-color-brightness)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::brightness :int))

(declaim (inline claylib/wrap::image-color-contrast))

(cffi:defcfun ("ImageColorContrast"
               claylib/wrap::image-color-contrast)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::contrast :float))

(declaim (inline claylib/wrap::image-color-grayscale))

(cffi:defcfun ("ImageColorGrayscale"
               claylib/wrap::image-color-grayscale)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-color-invert))

(cffi:defcfun ("ImageColorInvert" claylib/wrap::image-color-invert)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-color-replace))

(cffi:defcfun ("ImageColorReplace" claylib/wrap::image-color-replace)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::replace (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-color-tint))

(cffi:defcfun ("ImageColorTint" claylib/wrap::image-color-tint)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-copy))

(cffi:defcfun ("ImageCopy" claylib/wrap::image-copy)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-crop))

(cffi:defcfun ("ImageCrop" claylib/wrap::image-crop)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::crop (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::image-dither))

(cffi:defcfun ("ImageDither" claylib/wrap::image-dither)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::r-bpp :int)
              (claylib/wrap::g-bpp :int)
              (claylib/wrap::b-bpp :int)
              (claylib/wrap::a-bpp :int))

(declaim (inline claylib/wrap::image-draw))

(cffi:defcfun ("ImageDraw" claylib/wrap::image-draw)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::src (:pointer claylib/wrap::image))
              (claylib/wrap::src-rec
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::dst-rec
               (:pointer claylib/wrap::rectangle))
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-circle))

(cffi:defcfun ("ImageDrawCircle" claylib/wrap::image-draw-circle)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::center-x :int)
              (claylib/wrap::center-y :int)
              (claylib/wrap::radius :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-circle-v))

(cffi:defcfun ("ImageDrawCircleV" claylib/wrap::image-draw-circle-v)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::center (:pointer claylib/wrap::vector2))
              (claylib/wrap::radius :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-line))

(cffi:defcfun ("ImageDrawLine" claylib/wrap::image-draw-line)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::start-pos-x :int)
              (claylib/wrap::start-pos-y :int)
              (claylib/wrap::end-pos-x :int)
              (claylib/wrap::end-pos-y :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-line-v))

(cffi:defcfun ("ImageDrawLineV" claylib/wrap::image-draw-line-v)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::start (:pointer claylib/wrap::vector2))
              (claylib/wrap::end (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-pixel))

(cffi:defcfun ("ImageDrawPixel" claylib/wrap::image-draw-pixel)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-pixel-v))

(cffi:defcfun ("ImageDrawPixelV" claylib/wrap::image-draw-pixel-v)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-rectangle))

(cffi:defcfun ("ImageDrawRectangle"
               claylib/wrap::image-draw-rectangle)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-rectangle-lines))

(cffi:defcfun ("ImageDrawRectangleLines"
               claylib/wrap::image-draw-rectangle-lines)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::thick :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-rectangle-rec))

(cffi:defcfun ("ImageDrawRectangleRec"
               claylib/wrap::image-draw-rectangle-rec)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-rectangle-v))

(cffi:defcfun ("ImageDrawRectangleV"
               claylib/wrap::image-draw-rectangle-v)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::size (:pointer claylib/wrap::vector2))
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-text))

(cffi:defcfun ("ImageDrawText" claylib/wrap::image-draw-text)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::text :string)
              (claylib/wrap::pos-x :int)
              (claylib/wrap::pos-y :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-draw-text-ex))

(cffi:defcfun ("ImageDrawTextEx" claylib/wrap::image-draw-text-ex)
              :void
              (claylib/wrap::dst (:pointer claylib/wrap::image))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::c-position
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-flip-horizontal))

(cffi:defcfun ("ImageFlipHorizontal"
               claylib/wrap::image-flip-horizontal)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-flip-vertical))

(cffi:defcfun ("ImageFlipVertical" claylib/wrap::image-flip-vertical)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-format))

(cffi:defcfun ("ImageFormat" claylib/wrap::image-format)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::new-format :int))

(declaim (inline claylib/wrap::image-from-image))

(cffi:defcfun ("ImageFromImage" claylib/wrap::image-from-image)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::image-mipmaps))

(cffi:defcfun ("ImageMipmaps" claylib/wrap::image-mipmaps)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-resize))

(cffi:defcfun ("ImageResize" claylib/wrap::image-resize)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::new-width :int)
              (claylib/wrap::new-height :int))

(declaim (inline claylib/wrap::image-resize-canvas))

(cffi:defcfun ("ImageResizeCanvas" claylib/wrap::image-resize-canvas)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::new-width :int)
              (claylib/wrap::new-height :int)
              (claylib/wrap::offset-x :int)
              (claylib/wrap::offset-y :int)
              (claylib/wrap::fill (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-resize-nn))

(cffi:defcfun ("ImageResizeNN" claylib/wrap::image-resize-nn)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::new-width :int)
              (claylib/wrap::new-height :int))

(declaim (inline claylib/wrap::image-rotate-ccw))

(cffi:defcfun ("ImageRotateCCW" claylib/wrap::image-rotate-ccw)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-rotate-cw))

(cffi:defcfun ("ImageRotateCW" claylib/wrap::image-rotate-cw)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::image-text))

(cffi:defcfun ("ImageText" claylib/wrap::image-text)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::text :string)
              (claylib/wrap::font-size :int)
              (claylib/wrap::color (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-text-ex))

(cffi:defcfun ("ImageTextEx" claylib/wrap::image-text-ex)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float)
              (claylib/wrap::tint (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::image-to-pot))

(cffi:defcfun ("ImageToPOT" claylib/wrap::image-to-pot)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::fill (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::init-audio-device))

(cffi:defcfun ("InitAudioDevice" claylib/wrap::init-audio-device)
              :void)

(declaim (inline claylib/wrap::init-window))

(cffi:defcfun ("InitWindow" claylib/wrap::init-window)
              :void
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::title :string))

(declaim (inline claylib/wrap::is-audio-device-ready))

(cffi:defcfun ("IsAudioDeviceReady"
               claylib/wrap::is-audio-device-ready)
              :bool)

(declaim (inline claylib/wrap::is-audio-stream-playing))

(cffi:defcfun ("IsAudioStreamPlaying"
               claylib/wrap::is-audio-stream-playing)
              :bool
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::is-audio-stream-processed))

(cffi:defcfun ("IsAudioStreamProcessed"
               claylib/wrap::is-audio-stream-processed)
              :bool
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::is-cursor-hidden))

(cffi:defcfun ("IsCursorHidden" claylib/wrap::is-cursor-hidden) :bool)

(declaim (inline claylib/wrap::is-cursor-on-screen))

(cffi:defcfun ("IsCursorOnScreen" claylib/wrap::is-cursor-on-screen)
              :bool)

(declaim (inline claylib/wrap::is-file-dropped))

(cffi:defcfun ("IsFileDropped" claylib/wrap::is-file-dropped) :bool)

(declaim (inline claylib/wrap::is-file-extension))

(cffi:defcfun ("IsFileExtension" claylib/wrap::is-file-extension)
              :bool
              (claylib/wrap::file-name :string)
              (claylib/wrap::ext :string))

(declaim (inline claylib/wrap::is-gamepad-available))

(cffi:defcfun ("IsGamepadAvailable"
               claylib/wrap::is-gamepad-available)
              :bool
              (claylib/wrap::gamepad :int))

(declaim (inline claylib/wrap::is-gamepad-button-down))

(cffi:defcfun ("IsGamepadButtonDown"
               claylib/wrap::is-gamepad-button-down)
              :bool
              (claylib/wrap::gamepad :int)
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-gamepad-button-pressed))

(cffi:defcfun ("IsGamepadButtonPressed"
               claylib/wrap::is-gamepad-button-pressed)
              :bool
              (claylib/wrap::gamepad :int)
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-gamepad-button-released))

(cffi:defcfun ("IsGamepadButtonReleased"
               claylib/wrap::is-gamepad-button-released)
              :bool
              (claylib/wrap::gamepad :int)
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-gamepad-button-up))

(cffi:defcfun ("IsGamepadButtonUp"
               claylib/wrap::is-gamepad-button-up)
              :bool
              (claylib/wrap::gamepad :int)
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-gesture-detected))

(cffi:defcfun ("IsGestureDetected" claylib/wrap::is-gesture-detected)
              :bool
              (claylib/wrap::gesture :int))

(declaim (inline claylib/wrap::is-key-down))

(cffi:defcfun ("IsKeyDown" claylib/wrap::is-key-down)
              :bool
              (claylib/wrap::key :int))

(declaim (inline claylib/wrap::is-key-pressed))

(cffi:defcfun ("IsKeyPressed" claylib/wrap::is-key-pressed)
              :bool
              (claylib/wrap::key :int))

(declaim (inline claylib/wrap::is-key-released))

(cffi:defcfun ("IsKeyReleased" claylib/wrap::is-key-released)
              :bool
              (claylib/wrap::key :int))

(declaim (inline claylib/wrap::is-key-up))

(cffi:defcfun ("IsKeyUp" claylib/wrap::is-key-up)
              :bool
              (claylib/wrap::key :int))

(cffi:defcstruct (claylib/wrap::model-animation :size 24)
                 (claylib/wrap::bone-count :int :offset 0)
                 (claylib/wrap::frame-count :int :offset 4)
                 (claylib/wrap::bones
                  (:pointer claylib/wrap::bone-info) :offset 8)
                 (claylib/wrap::frame-poses
                  (:pointer (:pointer claylib/wrap::transform))
                  :offset 16))

(cffi:defctype claylib/wrap::model-animation
               (:struct claylib/wrap::model-animation))

(declaim (inline claylib/wrap::is-model-animation-valid))

(cffi:defcfun ("IsModelAnimationValid"
               claylib/wrap::is-model-animation-valid)
              :bool
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::anim
               (:pointer claylib/wrap::model-animation)))

(declaim (inline claylib/wrap::is-mouse-button-down))

(cffi:defcfun ("IsMouseButtonDown"
               claylib/wrap::is-mouse-button-down)
              :bool
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-mouse-button-pressed))

(cffi:defcfun ("IsMouseButtonPressed"
               claylib/wrap::is-mouse-button-pressed)
              :bool
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-mouse-button-released))

(cffi:defcfun ("IsMouseButtonReleased"
               claylib/wrap::is-mouse-button-released)
              :bool
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-mouse-button-up))

(cffi:defcfun ("IsMouseButtonUp" claylib/wrap::is-mouse-button-up)
              :bool
              (claylib/wrap::button :int))

(declaim (inline claylib/wrap::is-music-stream-playing))

(cffi:defcfun ("IsMusicStreamPlaying"
               claylib/wrap::is-music-stream-playing)
              :bool
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::is-path-file))

(cffi:defcfun ("IsPathFile" claylib/wrap::is-path-file)
              :bool
              (claylib/wrap::path :string))

(cffi:defcstruct (claylib/wrap::sound :size 40)
                 (claylib/wrap::c-stream claylib/wrap::audio-stream
                  :offset 0)
                 (claylib/wrap::frame-count :unsigned-int :offset 32))

(cffi:defctype claylib/wrap::sound (:struct claylib/wrap::sound))

(declaim (inline claylib/wrap::is-sound-playing))

(cffi:defcfun ("IsSoundPlaying" claylib/wrap::is-sound-playing)
              :bool
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::is-window-focused))

(cffi:defcfun ("IsWindowFocused" claylib/wrap::is-window-focused)
              :bool)

(declaim (inline claylib/wrap::is-window-fullscreen))

(cffi:defcfun ("IsWindowFullscreen"
               claylib/wrap::is-window-fullscreen)
              :bool)

(declaim (inline claylib/wrap::is-window-hidden))

(cffi:defcfun ("IsWindowHidden" claylib/wrap::is-window-hidden) :bool)

(declaim (inline claylib/wrap::is-window-maximized))

(cffi:defcfun ("IsWindowMaximized" claylib/wrap::is-window-maximized)
              :bool)

(declaim (inline claylib/wrap::is-window-minimized))

(cffi:defcfun ("IsWindowMinimized" claylib/wrap::is-window-minimized)
              :bool)

(declaim (inline claylib/wrap::is-window-ready))

(cffi:defcfun ("IsWindowReady" claylib/wrap::is-window-ready) :bool)

(declaim (inline claylib/wrap::is-window-resized))

(cffi:defcfun ("IsWindowResized" claylib/wrap::is-window-resized)
              :bool)

(declaim (inline claylib/wrap::is-window-state))

(cffi:defcfun ("IsWindowState" claylib/wrap::is-window-state)
              :bool
              (claylib/wrap::flag :unsigned-int))

(declaim (inline claylib/wrap::lerp))

(cffi:defcfun ("Lerp" claylib/wrap::lerp)
              :float
              (claylib/wrap::start :float)
              (claylib/wrap::end :float)
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::load-audio-stream))

(cffi:defcfun ("LoadAudioStream" claylib/wrap::load-audio-stream)
              (:pointer claylib/wrap::audio-stream)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::sample-rate :unsigned-int)
              (claylib/wrap::sample-size :unsigned-int)
              (claylib/wrap::channels :unsigned-int))

(declaim (inline claylib/wrap::load-codepoints))

(cffi:defcfun ("LoadCodepoints" claylib/wrap::load-codepoints)
              (:pointer :int)
              (claylib/wrap::text :string)
              (claylib/wrap::c-count (:pointer :int)))

(cffi:defcstruct (claylib/wrap::file-path-list :size 16)
                 (claylib/wrap::capacity :unsigned-int :offset 0)
                 (claylib/wrap::c-count :unsigned-int :offset 4)
                 (claylib/wrap::paths :string :offset 8))

(cffi:defctype claylib/wrap::file-path-list
               (:struct claylib/wrap::file-path-list))

(declaim (inline claylib/wrap::load-directory-files))

(cffi:defcfun ("LoadDirectoryFiles"
               claylib/wrap::load-directory-files)
              (:pointer claylib/wrap::file-path-list)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::file-path-list))
              (claylib/wrap::dir-path :string))

(declaim (inline claylib/wrap::load-directory-files-ex))

(cffi:defcfun ("LoadDirectoryFilesEx"
               claylib/wrap::load-directory-files-ex)
              (:pointer claylib/wrap::file-path-list)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::file-path-list))
              (claylib/wrap::base-path :string)
              (claylib/wrap::filter :string)
              (claylib/wrap::scan-subdirs :bool))

(declaim (inline claylib/wrap::load-dropped-files))

(cffi:defcfun ("LoadDroppedFiles" claylib/wrap::load-dropped-files)
              (:pointer claylib/wrap::file-path-list)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::file-path-list)))

(declaim (inline claylib/wrap::load-file-data))

(cffi:defcfun ("LoadFileData" claylib/wrap::load-file-data)
              (:pointer :unsigned-char)
              (claylib/wrap::file-name :string)
              (claylib/wrap::bytes-read (:pointer :unsigned-int)))

(declaim (inline claylib/wrap::load-file-text))

(cffi:defcfun ("LoadFileText" claylib/wrap::load-file-text)
              :string
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-font))

(cffi:defcfun ("LoadFont" claylib/wrap::load-font)
              (:pointer claylib/wrap::font)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::font))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-font-data))

(cffi:defcfun ("LoadFontData" claylib/wrap::load-font-data)
              (:pointer claylib/wrap::glyph-info)
              (claylib/wrap::file-data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::font-chars (:pointer :int))
              (claylib/wrap::glyph-count :int)
              (claylib/wrap::type :int))

(declaim (inline claylib/wrap::load-font-ex))

(cffi:defcfun ("LoadFontEx" claylib/wrap::load-font-ex)
              (:pointer claylib/wrap::font)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::font))
              (claylib/wrap::file-name :string)
              (claylib/wrap::font-size :int)
              (claylib/wrap::font-chars (:pointer :int))
              (claylib/wrap::glyph-count :int))

(declaim (inline claylib/wrap::load-font-from-image))

(cffi:defcfun ("LoadFontFromImage"
               claylib/wrap::load-font-from-image)
              (:pointer claylib/wrap::font)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::font))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::key (:pointer claylib/wrap::color))
              (claylib/wrap::first-char :int))

(declaim (inline claylib/wrap::load-font-from-memory))

(cffi:defcfun ("LoadFontFromMemory"
               claylib/wrap::load-font-from-memory)
              (:pointer claylib/wrap::font)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::font))
              (claylib/wrap::file-type :string)
              (claylib/wrap::file-data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int)
              (claylib/wrap::font-size :int)
              (claylib/wrap::font-chars (:pointer :int))
              (claylib/wrap::glyph-count :int))

(declaim (inline claylib/wrap::load-image))

(cffi:defcfun ("LoadImage" claylib/wrap::load-image)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-image-anim))

(cffi:defcfun ("LoadImageAnim" claylib/wrap::load-image-anim)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string)
              (claylib/wrap::frames (:pointer :int)))

(declaim (inline claylib/wrap::load-image-colors))

(cffi:defcfun ("LoadImageColors" claylib/wrap::load-image-colors)
              (:pointer claylib/wrap::color)
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::load-image-from-memory))

(cffi:defcfun ("LoadImageFromMemory"
               claylib/wrap::load-image-from-memory)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::file-type :string)
              (claylib/wrap::file-data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int))

(declaim (inline claylib/wrap::load-image-from-screen))

(cffi:defcfun ("LoadImageFromScreen"
               claylib/wrap::load-image-from-screen)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::load-image-from-texture))

(cffi:defcfun ("LoadImageFromTexture"
               claylib/wrap::load-image-from-texture)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d)))

(declaim (inline claylib/wrap::load-image-palette))

(cffi:defcfun ("LoadImagePalette" claylib/wrap::load-image-palette)
              (:pointer claylib/wrap::color)
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::max-palette-size :int)
              (claylib/wrap::color-count (:pointer :int)))

(declaim (inline claylib/wrap::load-image-raw))

(cffi:defcfun ("LoadImageRaw" claylib/wrap::load-image-raw)
              (:pointer claylib/wrap::image)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::image))
              (claylib/wrap::file-name :string)
              (claylib/wrap::width :int)
              (claylib/wrap::height :int)
              (claylib/wrap::c-format :int)
              (claylib/wrap::header-size :int))

(declaim (inline claylib/wrap::load-material-default))

(cffi:defcfun ("LoadMaterialDefault"
               claylib/wrap::load-material-default)
              (:pointer claylib/wrap::material)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::material)))

(declaim (inline claylib/wrap::load-materials))

(cffi:defcfun ("LoadMaterials" claylib/wrap::load-materials)
              (:pointer claylib/wrap::material)
              (claylib/wrap::file-name :string)
              (claylib/wrap::material-count (:pointer :int)))

(declaim (inline claylib/wrap::load-model))

(cffi:defcfun ("LoadModel" claylib/wrap::load-model)
              (:pointer claylib/wrap::model)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::model))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-model-animations))

(cffi:defcfun ("LoadModelAnimations"
               claylib/wrap::load-model-animations)
              (:pointer claylib/wrap::model-animation)
              (claylib/wrap::file-name :string)
              (claylib/wrap::anim-count (:pointer :unsigned-int)))

(declaim (inline claylib/wrap::load-model-from-mesh))

(cffi:defcfun ("LoadModelFromMesh"
               claylib/wrap::load-model-from-mesh)
              (:pointer claylib/wrap::model)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::model))
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh)))

(declaim (inline claylib/wrap::load-music-stream))

(cffi:defcfun ("LoadMusicStream" claylib/wrap::load-music-stream)
              (:pointer claylib/wrap::music)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::music))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-music-stream-from-memory))

(cffi:defcfun ("LoadMusicStreamFromMemory"
               claylib/wrap::load-music-stream-from-memory)
              (:pointer claylib/wrap::music)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::music))
              (claylib/wrap::file-type :string)
              (claylib/wrap::data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int))

(declaim (inline claylib/wrap::load-render-texture))

(cffi:defcfun ("LoadRenderTexture" claylib/wrap::load-render-texture)
              (:pointer claylib/wrap::render-texture2d)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::render-texture2d))
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(declaim (inline claylib/wrap::load-shader))

(cffi:defcfun ("LoadShader" claylib/wrap::load-shader)
              (:pointer claylib/wrap::shader)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::shader))
              (claylib/wrap::vs-file-name :string)
              (claylib/wrap::fs-file-name :string))

(declaim (inline claylib/wrap::load-shader-from-memory))

(cffi:defcfun ("LoadShaderFromMemory"
               claylib/wrap::load-shader-from-memory)
              (:pointer claylib/wrap::shader)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::shader))
              (claylib/wrap::vs-code :string)
              (claylib/wrap::fs-code :string))

(declaim (inline claylib/wrap::load-sound))

(cffi:defcfun ("LoadSound" claylib/wrap::load-sound)
              (:pointer claylib/wrap::sound)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::sound))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-sound-from-wave))

(cffi:defcfun ("LoadSoundFromWave"
               claylib/wrap::load-sound-from-wave)
              (:pointer claylib/wrap::sound)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::sound))
              (claylib/wrap::wave (:pointer claylib/wrap::wave)))

(declaim (inline claylib/wrap::load-texture))

(cffi:defcfun ("LoadTexture" claylib/wrap::load-texture)
              (:pointer claylib/wrap::texture2d)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::file-name :string))

(cffi:defctype claylib/wrap::texture-cubemap
               (:struct claylib/wrap::texture))

(declaim (inline claylib/wrap::load-texture-cubemap))

(cffi:defcfun ("LoadTextureCubemap"
               claylib/wrap::load-texture-cubemap)
              (:pointer claylib/wrap::texture-cubemap)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::texture-cubemap))
              (claylib/wrap::image (:pointer claylib/wrap::image))
              (claylib/wrap::layout :int))

(declaim (inline claylib/wrap::load-texture-from-image))

(cffi:defcfun ("LoadTextureFromImage"
               claylib/wrap::load-texture-from-image)
              (:pointer claylib/wrap::texture2d)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(cffi:defcstruct (claylib/wrap::vr-device-info :size 64)
                 (claylib/wrap::h-resolution :int :offset 0)
                 (claylib/wrap::v-resolution :int :offset 4)
                 (claylib/wrap::h-screen-size :float :offset 8)
                 (claylib/wrap::v-screen-size :float :offset 12)
                 (claylib/wrap::v-screen-center :float :offset 16)
                 (claylib/wrap::eye-to-screen-distance :float :offset
                  20)
                 (claylib/wrap::lens-separation-distance :float
                  :offset 24)
                 (claylib/wrap::interpupillary-distance :float
                  :offset 28)
                 (claylib/wrap::lens-distortion-values :float :count
                  4 :offset 32)
                 (claylib/wrap::chroma-ab-correction :float :count 4
                  :offset 48))

(cffi:defctype claylib/wrap::vr-device-info
               (:struct claylib/wrap::vr-device-info))

(declaim (inline claylib/wrap::load-vr-stereo-config))

(cffi:defcfun ("LoadVrStereoConfig"
               claylib/wrap::load-vr-stereo-config)
              (:pointer claylib/wrap::vr-stereo-config)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vr-stereo-config))
              (claylib/wrap::device
               (:pointer claylib/wrap::vr-device-info)))

(declaim (inline claylib/wrap::load-wave))

(cffi:defcfun ("LoadWave" claylib/wrap::load-wave)
              (:pointer claylib/wrap::wave)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::wave))
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::load-wave-from-memory))

(cffi:defcfun ("LoadWaveFromMemory"
               claylib/wrap::load-wave-from-memory)
              (:pointer claylib/wrap::wave)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::wave))
              (claylib/wrap::file-type :string)
              (claylib/wrap::file-data (:pointer :unsigned-char))
              (claylib/wrap::data-size :int))

(declaim (inline claylib/wrap::load-wave-samples))

(cffi:defcfun ("LoadWaveSamples" claylib/wrap::load-wave-samples)
              (:pointer :float)
              (claylib/wrap::wave (:pointer claylib/wrap::wave)))

(declaim (inline claylib/wrap::matrix-add))

(cffi:defcfun ("MatrixAdd" claylib/wrap::matrix-add)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::left (:pointer claylib/wrap::matrix))
              (claylib/wrap::right (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-determinant))

(cffi:defcfun ("MatrixDeterminant" claylib/wrap::matrix-determinant)
              :float
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-frustum))

(cffi:defcfun ("MatrixFrustum" claylib/wrap::matrix-frustum)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::left :double)
              (claylib/wrap::right :double)
              (claylib/wrap::bottom :double)
              (claylib/wrap::top :double)
              (claylib/wrap::near :double)
              (claylib/wrap::far :double))

(declaim (inline claylib/wrap::matrix-identity))

(cffi:defcfun ("MatrixIdentity" claylib/wrap::matrix-identity)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-invert))

(cffi:defcfun ("MatrixInvert" claylib/wrap::matrix-invert)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-look-at))

(cffi:defcfun ("MatrixLookAt" claylib/wrap::matrix-look-at)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::eye (:pointer claylib/wrap::vector3))
              (claylib/wrap::target (:pointer claylib/wrap::vector3))
              (claylib/wrap::up (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::matrix-multiply))

(cffi:defcfun ("MatrixMultiply" claylib/wrap::matrix-multiply)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::left (:pointer claylib/wrap::matrix))
              (claylib/wrap::right (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-ortho))

(cffi:defcfun ("MatrixOrtho" claylib/wrap::matrix-ortho)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::left :double)
              (claylib/wrap::right :double)
              (claylib/wrap::bottom :double)
              (claylib/wrap::top :double)
              (claylib/wrap::near :double)
              (claylib/wrap::far :double))

(declaim (inline claylib/wrap::matrix-perspective))

(cffi:defcfun ("MatrixPerspective" claylib/wrap::matrix-perspective)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::fovy :double)
              (claylib/wrap::aspect :double)
              (claylib/wrap::near :double)
              (claylib/wrap::far :double))

(declaim (inline claylib/wrap::matrix-rotate))

(cffi:defcfun ("MatrixRotate" claylib/wrap::matrix-rotate)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::axis (:pointer claylib/wrap::vector3))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::matrix-rotate-x))

(cffi:defcfun ("MatrixRotateX" claylib/wrap::matrix-rotate-x)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::matrix-rotate-xyz))

(cffi:defcfun ("MatrixRotateXYZ" claylib/wrap::matrix-rotate-xyz)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::matrix-rotate-y))

(cffi:defcfun ("MatrixRotateY" claylib/wrap::matrix-rotate-y)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::matrix-rotate-z))

(cffi:defcfun ("MatrixRotateZ" claylib/wrap::matrix-rotate-z)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::matrix-rotate-zyx))

(cffi:defcfun ("MatrixRotateZYX" claylib/wrap::matrix-rotate-zyx)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::angle (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::matrix-scale))

(cffi:defcfun ("MatrixScale" claylib/wrap::matrix-scale)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::x :float)
              (claylib/wrap::y :float)
              (claylib/wrap::z :float))

(declaim (inline claylib/wrap::matrix-subtract))

(cffi:defcfun ("MatrixSubtract" claylib/wrap::matrix-subtract)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::left (:pointer claylib/wrap::matrix))
              (claylib/wrap::right (:pointer claylib/wrap::matrix)))

(cffi:defcstruct (claylib/wrap::float16 :size 64)
                 (claylib/wrap::v :float :count 16 :offset 0))

(cffi:defctype claylib/wrap::float16 (:struct claylib/wrap::float16))

(declaim (inline claylib/wrap::matrix-to-float-v))

(cffi:defcfun ("MatrixToFloatV" claylib/wrap::matrix-to-float-v)
              (:pointer claylib/wrap::float16)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::float16))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-trace))

(cffi:defcfun ("MatrixTrace" claylib/wrap::matrix-trace)
              :float
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::matrix-translate))

(cffi:defcfun ("MatrixTranslate" claylib/wrap::matrix-translate)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::x :float)
              (claylib/wrap::y :float)
              (claylib/wrap::z :float))

(declaim (inline claylib/wrap::matrix-transpose))

(cffi:defcfun ("MatrixTranspose" claylib/wrap::matrix-transpose)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::maximize-window))

(cffi:defcfun ("MaximizeWindow" claylib/wrap::maximize-window) :void)

(declaim (inline claylib/wrap::measure-text))

(cffi:defcfun ("MeasureText" claylib/wrap::measure-text)
              :int
              (claylib/wrap::text :string)
              (claylib/wrap::font-size :int))

(declaim (inline claylib/wrap::measure-text-ex))

(cffi:defcfun ("MeasureTextEx" claylib/wrap::measure-text-ex)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::font (:pointer claylib/wrap::font))
              (claylib/wrap::text :string)
              (claylib/wrap::font-size :float)
              (claylib/wrap::spacing :float))

(declaim (inline claylib/wrap::mem-alloc))

(cffi:defcfun ("MemAlloc" claylib/wrap::mem-alloc)
              (:pointer :void)
              (claylib/wrap::size :int))

(declaim (inline claylib/wrap::mem-free))

(cffi:defcfun ("MemFree" claylib/wrap::mem-free)
              :void
              (claylib/wrap::ptr (:pointer :void)))

(declaim (inline claylib/wrap::mem-realloc))

(cffi:defcfun ("MemRealloc" claylib/wrap::mem-realloc)
              (:pointer :void)
              (claylib/wrap::ptr (:pointer :void))
              (claylib/wrap::size :int))

(declaim (inline claylib/wrap::minimize-window))

(cffi:defcfun ("MinimizeWindow" claylib/wrap::minimize-window) :void)

(declaim (inline claylib/wrap::normalize))

(cffi:defcfun ("Normalize" claylib/wrap::normalize)
              :float
              (claylib/wrap::value :float)
              (claylib/wrap::start :float)
              (claylib/wrap::end :float))

(declaim (inline claylib/wrap::open-url))

(cffi:defcfun ("OpenURL" claylib/wrap::open-url)
              :void
              (claylib/wrap::url :string))

(declaim (inline claylib/wrap::pause-audio-stream))

(cffi:defcfun ("PauseAudioStream" claylib/wrap::pause-audio-stream)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::pause-music-stream))

(cffi:defcfun ("PauseMusicStream" claylib/wrap::pause-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::pause-sound))

(cffi:defcfun ("PauseSound" claylib/wrap::pause-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::play-audio-stream))

(cffi:defcfun ("PlayAudioStream" claylib/wrap::play-audio-stream)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::play-music-stream))

(cffi:defcfun ("PlayMusicStream" claylib/wrap::play-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::play-sound))

(cffi:defcfun ("PlaySound" claylib/wrap::play-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::play-sound-multi))

(cffi:defcfun ("PlaySoundMulti" claylib/wrap::play-sound-multi)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::poll-input-events))

(cffi:defcfun ("PollInputEvents" claylib/wrap::poll-input-events)
              :void)

(declaim (inline claylib/wrap::quaternion-add))

(cffi:defcfun ("QuaternionAdd" claylib/wrap::quaternion-add)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-add-value))

(cffi:defcfun ("QuaternionAddValue"
               claylib/wrap::quaternion-add-value)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::add :float))

(declaim (inline claylib/wrap::quaternion-divide))

(cffi:defcfun ("QuaternionDivide" claylib/wrap::quaternion-divide)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-equals))

(cffi:defcfun ("QuaternionEquals" claylib/wrap::quaternion-equals)
              :int
              (claylib/wrap::p (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-from-axis-angle))

(cffi:defcfun ("QuaternionFromAxisAngle"
               claylib/wrap::quaternion-from-axis-angle)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::axis (:pointer claylib/wrap::vector3))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::quaternion-from-euler))

(cffi:defcfun ("QuaternionFromEuler"
               claylib/wrap::quaternion-from-euler)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::pitch :float)
              (claylib/wrap::yaw :float)
              (claylib/wrap::roll :float))

(declaim (inline claylib/wrap::quaternion-from-matrix))

(cffi:defcfun ("QuaternionFromMatrix"
               claylib/wrap::quaternion-from-matrix)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::quaternion-from-vector3to-vector3))

(cffi:defcfun ("QuaternionFromVector3ToVector3"
               claylib/wrap::quaternion-from-vector3to-vector3)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::from (:pointer claylib/wrap::vector3))
              (claylib/wrap::to (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::quaternion-identity))

(cffi:defcfun ("QuaternionIdentity"
               claylib/wrap::quaternion-identity)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-invert))

(cffi:defcfun ("QuaternionInvert" claylib/wrap::quaternion-invert)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-length))

(cffi:defcfun ("QuaternionLength" claylib/wrap::quaternion-length)
              :float
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-lerp))

(cffi:defcfun ("QuaternionLerp" claylib/wrap::quaternion-lerp)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::quaternion-multiply))

(cffi:defcfun ("QuaternionMultiply"
               claylib/wrap::quaternion-multiply)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-nlerp))

(cffi:defcfun ("QuaternionNlerp" claylib/wrap::quaternion-nlerp)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::quaternion-normalize))

(cffi:defcfun ("QuaternionNormalize"
               claylib/wrap::quaternion-normalize)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-scale))

(cffi:defcfun ("QuaternionScale" claylib/wrap::quaternion-scale)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::mul :float))

(declaim (inline claylib/wrap::quaternion-slerp))

(cffi:defcfun ("QuaternionSlerp" claylib/wrap::quaternion-slerp)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::quaternion-subtract))

(cffi:defcfun ("QuaternionSubtract"
               claylib/wrap::quaternion-subtract)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q1 (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q2 (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-subtract-value))

(cffi:defcfun ("QuaternionSubtractValue"
               claylib/wrap::quaternion-subtract-value)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::sub :float))

(declaim (inline claylib/wrap::quaternion-to-axis-angle))

(cffi:defcfun ("QuaternionToAxisAngle"
               claylib/wrap::quaternion-to-axis-angle)
              :void
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::out-axis
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::out-angle (:pointer :float)))

(declaim (inline claylib/wrap::quaternion-to-euler))

(cffi:defcfun ("QuaternionToEuler" claylib/wrap::quaternion-to-euler)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-to-matrix))

(cffi:defcfun ("QuaternionToMatrix"
               claylib/wrap::quaternion-to-matrix)
              (:pointer claylib/wrap::matrix)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::quaternion-transform))

(cffi:defcfun ("QuaternionTransform"
               claylib/wrap::quaternion-transform)
              (:pointer claylib/wrap::quaternion)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::quaternion))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::remap))

(cffi:defcfun ("Remap" claylib/wrap::remap)
              :float
              (claylib/wrap::value :float)
              (claylib/wrap::input-start :float)
              (claylib/wrap::input-end :float)
              (claylib/wrap::output-start :float)
              (claylib/wrap::output-end :float))

(declaim (inline claylib/wrap::restore-window))

(cffi:defcfun ("RestoreWindow" claylib/wrap::restore-window) :void)

(declaim (inline claylib/wrap::resume-audio-stream))

(cffi:defcfun ("ResumeAudioStream" claylib/wrap::resume-audio-stream)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::resume-music-stream))

(cffi:defcfun ("ResumeMusicStream" claylib/wrap::resume-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::resume-sound))

(cffi:defcfun ("ResumeSound" claylib/wrap::resume-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::save-file-data))

(cffi:defcfun ("SaveFileData" claylib/wrap::save-file-data)
              :bool
              (claylib/wrap::file-name :string)
              (claylib/wrap::data (:pointer :void))
              (claylib/wrap::bytes-to-write :unsigned-int))

(declaim (inline claylib/wrap::save-file-text))

(cffi:defcfun ("SaveFileText" claylib/wrap::save-file-text)
              :bool
              (claylib/wrap::file-name :string)
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::seek-music-stream))

(cffi:defcfun ("SeekMusicStream" claylib/wrap::seek-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music))
              (claylib/wrap::c-position :float))

(declaim (inline claylib/wrap::set-audio-stream-buffer-size-default))

(cffi:defcfun ("SetAudioStreamBufferSizeDefault"
               claylib/wrap::set-audio-stream-buffer-size-default)
              :void
              (claylib/wrap::size :int))

(declaim (inline claylib/wrap::set-audio-stream-callback))

(cffi:defcfun ("SetAudioStreamCallback"
               claylib/wrap::set-audio-stream-callback)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::callback claylib/wrap::audio-callback))

(declaim (inline claylib/wrap::set-audio-stream-pan))

(cffi:defcfun ("SetAudioStreamPan"
               claylib/wrap::set-audio-stream-pan)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::pan :float))

(declaim (inline claylib/wrap::set-audio-stream-pitch))

(cffi:defcfun ("SetAudioStreamPitch"
               claylib/wrap::set-audio-stream-pitch)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::pitch :float))

(declaim (inline claylib/wrap::set-audio-stream-volume))

(cffi:defcfun ("SetAudioStreamVolume"
               claylib/wrap::set-audio-stream-volume)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::volume :float))

(declaim (inline claylib/wrap::set-camera-alt-control))

(cffi:defcfun ("SetCameraAltControl"
               claylib/wrap::set-camera-alt-control)
              :void
              (claylib/wrap::key-alt :int))

(declaim (inline claylib/wrap::set-camera-mode))

(cffi:defcfun ("SetCameraMode" claylib/wrap::set-camera-mode)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera))
              (claylib/wrap::mode :int))

(declaim (inline claylib/wrap::set-camera-move-controls))

(cffi:defcfun ("SetCameraMoveControls"
               claylib/wrap::set-camera-move-controls)
              :void
              (claylib/wrap::key-front :int)
              (claylib/wrap::key-back :int)
              (claylib/wrap::key-right :int)
              (claylib/wrap::key-left :int)
              (claylib/wrap::key-up :int)
              (claylib/wrap::key-down :int))

(declaim (inline claylib/wrap::set-camera-pan-control))

(cffi:defcfun ("SetCameraPanControl"
               claylib/wrap::set-camera-pan-control)
              :void
              (claylib/wrap::key-pan :int))

(declaim (inline claylib/wrap::set-camera-smooth-zoom-control))

(cffi:defcfun ("SetCameraSmoothZoomControl"
               claylib/wrap::set-camera-smooth-zoom-control)
              :void
              (claylib/wrap::key-smooth-zoom :int))

(declaim (inline claylib/wrap::set-clipboard-text))

(cffi:defcfun ("SetClipboardText" claylib/wrap::set-clipboard-text)
              :void
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::set-config-flags))

(cffi:defcfun ("SetConfigFlags" claylib/wrap::set-config-flags)
              :void
              (claylib/wrap::flags :unsigned-int))

(declaim (inline claylib/wrap::set-exit-key))

(cffi:defcfun ("SetExitKey" claylib/wrap::set-exit-key)
              :void
              (claylib/wrap::key :int))

(declaim (inline claylib/wrap::set-gamepad-mappings))

(cffi:defcfun ("SetGamepadMappings"
               claylib/wrap::set-gamepad-mappings)
              :int
              (claylib/wrap::mappings :string))

(declaim (inline claylib/wrap::set-gestures-enabled))

(cffi:defcfun ("SetGesturesEnabled"
               claylib/wrap::set-gestures-enabled)
              :void
              (claylib/wrap::flags :unsigned-int))

(cffi:defctype claylib/wrap::load-file-data-callback (:pointer :void))

(declaim (inline claylib/wrap::set-load-file-data-callback))

(cffi:defcfun ("SetLoadFileDataCallback"
               claylib/wrap::set-load-file-data-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::load-file-data-callback))

(cffi:defctype claylib/wrap::load-file-text-callback (:pointer :void))

(declaim (inline claylib/wrap::set-load-file-text-callback))

(cffi:defcfun ("SetLoadFileTextCallback"
               claylib/wrap::set-load-file-text-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::load-file-text-callback))

(declaim (inline claylib/wrap::set-master-volume))

(cffi:defcfun ("SetMasterVolume" claylib/wrap::set-master-volume)
              :void
              (claylib/wrap::volume :float))

(declaim (inline claylib/wrap::set-material-texture))

(cffi:defcfun ("SetMaterialTexture"
               claylib/wrap::set-material-texture)
              :void
              (claylib/wrap::material
               (:pointer claylib/wrap::material))
              (claylib/wrap::map-type :int)
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d)))

(declaim (inline claylib/wrap::set-model-mesh-material))

(cffi:defcfun ("SetModelMeshMaterial"
               claylib/wrap::set-model-mesh-material)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::mesh-id :int)
              (claylib/wrap::material-id :int))

(declaim (inline claylib/wrap::set-mouse-cursor))

(cffi:defcfun ("SetMouseCursor" claylib/wrap::set-mouse-cursor)
              :void
              (claylib/wrap::cursor :int))

(declaim (inline claylib/wrap::set-mouse-offset))

(cffi:defcfun ("SetMouseOffset" claylib/wrap::set-mouse-offset)
              :void
              (claylib/wrap::offset-x :int)
              (claylib/wrap::offset-y :int))

(declaim (inline claylib/wrap::set-mouse-position))

(cffi:defcfun ("SetMousePosition" claylib/wrap::set-mouse-position)
              :void
              (claylib/wrap::x :int)
              (claylib/wrap::y :int))

(declaim (inline claylib/wrap::set-mouse-scale))

(cffi:defcfun ("SetMouseScale" claylib/wrap::set-mouse-scale)
              :void
              (claylib/wrap::scale-x :float)
              (claylib/wrap::scale-y :float))

(declaim (inline claylib/wrap::set-music-pan))

(cffi:defcfun ("SetMusicPan" claylib/wrap::set-music-pan)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music))
              (claylib/wrap::pan :float))

(declaim (inline claylib/wrap::set-music-pitch))

(cffi:defcfun ("SetMusicPitch" claylib/wrap::set-music-pitch)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music))
              (claylib/wrap::pitch :float))

(declaim (inline claylib/wrap::set-music-volume))

(cffi:defcfun ("SetMusicVolume" claylib/wrap::set-music-volume)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music))
              (claylib/wrap::volume :float))

(declaim (inline claylib/wrap::set-pixel-color))

(cffi:defcfun ("SetPixelColor" claylib/wrap::set-pixel-color)
              :void
              (claylib/wrap::dst-ptr (:pointer :void))
              (claylib/wrap::color (:pointer claylib/wrap::color))
              (claylib/wrap::c-format :int))

(declaim (inline claylib/wrap::set-random-seed))

(cffi:defcfun ("SetRandomSeed" claylib/wrap::set-random-seed)
              :void
              (claylib/wrap::seed :unsigned-int))

(cffi:defctype claylib/wrap::save-file-data-callback (:pointer :void))

(declaim (inline claylib/wrap::set-save-file-data-callback))

(cffi:defcfun ("SetSaveFileDataCallback"
               claylib/wrap::set-save-file-data-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::save-file-data-callback))

(cffi:defctype claylib/wrap::save-file-text-callback (:pointer :void))

(declaim (inline claylib/wrap::set-save-file-text-callback))

(cffi:defcfun ("SetSaveFileTextCallback"
               claylib/wrap::set-save-file-text-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::save-file-text-callback))

(declaim (inline claylib/wrap::set-shader-value))

(cffi:defcfun ("SetShaderValue" claylib/wrap::set-shader-value)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::loc-index :int)
              (claylib/wrap::value (:pointer :void))
              (claylib/wrap::uniform-type :int))

(declaim (inline claylib/wrap::set-shader-value-matrix))

(cffi:defcfun ("SetShaderValueMatrix"
               claylib/wrap::set-shader-value-matrix)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::loc-index :int)
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::set-shader-value-texture))

(cffi:defcfun ("SetShaderValueTexture"
               claylib/wrap::set-shader-value-texture)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::loc-index :int)
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d)))

(declaim (inline claylib/wrap::set-shader-value-v))

(cffi:defcfun ("SetShaderValueV" claylib/wrap::set-shader-value-v)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader))
              (claylib/wrap::loc-index :int)
              (claylib/wrap::value (:pointer :void))
              (claylib/wrap::uniform-type :int)
              (claylib/wrap::c-count :int))

(declaim (inline claylib/wrap::set-shapes-texture))

(cffi:defcfun ("SetShapesTexture" claylib/wrap::set-shapes-texture)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::source
               (:pointer claylib/wrap::rectangle)))

(declaim (inline claylib/wrap::set-sound-pan))

(cffi:defcfun ("SetSoundPan" claylib/wrap::set-sound-pan)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound))
              (claylib/wrap::pan :float))

(declaim (inline claylib/wrap::set-sound-pitch))

(cffi:defcfun ("SetSoundPitch" claylib/wrap::set-sound-pitch)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound))
              (claylib/wrap::pitch :float))

(declaim (inline claylib/wrap::set-sound-volume))

(cffi:defcfun ("SetSoundVolume" claylib/wrap::set-sound-volume)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound))
              (claylib/wrap::volume :float))

(declaim (inline claylib/wrap::set-target-fps))

(cffi:defcfun ("SetTargetFPS" claylib/wrap::set-target-fps)
              :void
              (claylib/wrap::fps :int))

(declaim (inline claylib/wrap::set-texture-filter))

(cffi:defcfun ("SetTextureFilter" claylib/wrap::set-texture-filter)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::filter :int))

(declaim (inline claylib/wrap::set-texture-wrap))

(cffi:defcfun ("SetTextureWrap" claylib/wrap::set-texture-wrap)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::wrap :int))

(cffi:defctype claylib/wrap::trace-log-callback (:pointer :void))

(declaim (inline claylib/wrap::set-trace-log-callback))

(cffi:defcfun ("SetTraceLogCallback"
               claylib/wrap::set-trace-log-callback)
              :void
              (claylib/wrap::callback
               claylib/wrap::trace-log-callback))

(declaim (inline claylib/wrap::set-trace-log-level))

(cffi:defcfun ("SetTraceLogLevel" claylib/wrap::set-trace-log-level)
              :void
              (claylib/wrap::log-level :int))

(declaim (inline claylib/wrap::set-window-icon))

(cffi:defcfun ("SetWindowIcon" claylib/wrap::set-window-icon)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::set-window-min-size))

(cffi:defcfun ("SetWindowMinSize" claylib/wrap::set-window-min-size)
              :void
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(declaim (inline claylib/wrap::set-window-monitor))

(cffi:defcfun ("SetWindowMonitor" claylib/wrap::set-window-monitor)
              :void
              (claylib/wrap::monitor :int))

(declaim (inline claylib/wrap::set-window-opacity))

(cffi:defcfun ("SetWindowOpacity" claylib/wrap::set-window-opacity)
              :void
              (claylib/wrap::opacity :float))

(declaim (inline claylib/wrap::set-window-position))

(cffi:defcfun ("SetWindowPosition" claylib/wrap::set-window-position)
              :void
              (claylib/wrap::x :int)
              (claylib/wrap::y :int))

(declaim (inline claylib/wrap::set-window-size))

(cffi:defcfun ("SetWindowSize" claylib/wrap::set-window-size)
              :void
              (claylib/wrap::width :int)
              (claylib/wrap::height :int))

(declaim (inline claylib/wrap::set-window-state))

(cffi:defcfun ("SetWindowState" claylib/wrap::set-window-state)
              :void
              (claylib/wrap::flags :unsigned-int))

(declaim (inline claylib/wrap::set-window-title))

(cffi:defcfun ("SetWindowTitle" claylib/wrap::set-window-title)
              :void
              (claylib/wrap::title :string))

(declaim (inline claylib/wrap::show-cursor))

(cffi:defcfun ("ShowCursor" claylib/wrap::show-cursor) :void)

(declaim (inline claylib/wrap::stop-audio-stream))

(cffi:defcfun ("StopAudioStream" claylib/wrap::stop-audio-stream)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::stop-music-stream))

(cffi:defcfun ("StopMusicStream" claylib/wrap::stop-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::stop-sound))

(cffi:defcfun ("StopSound" claylib/wrap::stop-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::stop-sound-multi))

(cffi:defcfun ("StopSoundMulti" claylib/wrap::stop-sound-multi) :void)

(declaim (inline claylib/wrap::swap-screen-buffer))

(cffi:defcfun ("SwapScreenBuffer" claylib/wrap::swap-screen-buffer)
              :void)

(declaim (inline claylib/wrap::take-screenshot))

(cffi:defcfun ("TakeScreenshot" claylib/wrap::take-screenshot)
              :void
              (claylib/wrap::file-name :string))

(declaim (inline claylib/wrap::text-append))

(cffi:defcfun ("TextAppend" claylib/wrap::text-append)
              :void
              (claylib/wrap::text :string)
              (claylib/wrap::append :string)
              (claylib/wrap::c-position (:pointer :int)))

(declaim (inline claylib/wrap::text-codepoints-to-utf8))

(cffi:defcfun ("TextCodepointsToUTF8"
               claylib/wrap::text-codepoints-to-utf8)
              :string
              (claylib/wrap::codepoints (:pointer :int))
              (claylib/wrap::length :int))

(declaim (inline claylib/wrap::text-copy))

(cffi:defcfun ("TextCopy" claylib/wrap::text-copy)
              :int
              (claylib/wrap::dst :string)
              (claylib/wrap::src :string))

(declaim (inline claylib/wrap::text-find-index))

(cffi:defcfun ("TextFindIndex" claylib/wrap::text-find-index)
              :int
              (claylib/wrap::text :string)
              (claylib/wrap::find :string))

(declaim (inline claylib/wrap::text-format))

(cffi:defcfun ("TextFormat" claylib/wrap::text-format)
              :string
              (claylib/wrap::text :string)
              &rest)

(declaim (inline claylib/wrap::text-insert))

(cffi:defcfun ("TextInsert" claylib/wrap::text-insert)
              :string
              (claylib/wrap::text :string)
              (claylib/wrap::insert :string)
              (claylib/wrap::c-position :int))

(declaim (inline claylib/wrap::text-is-equal))

(cffi:defcfun ("TextIsEqual" claylib/wrap::text-is-equal)
              :bool
              (claylib/wrap::text1 :string)
              (claylib/wrap::text2 :string))

(declaim (inline claylib/wrap::text-join))

(cffi:defcfun ("TextJoin" claylib/wrap::text-join)
              :string
              (claylib/wrap::text-list :string)
              (claylib/wrap::c-count :int)
              (claylib/wrap::delimiter :string))

(declaim (inline claylib/wrap::text-length))

(cffi:defcfun ("TextLength" claylib/wrap::text-length)
              :unsigned-int
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::text-replace))

(cffi:defcfun ("TextReplace" claylib/wrap::text-replace)
              :string
              (claylib/wrap::text :string)
              (claylib/wrap::replace :string)
              (claylib/wrap::by :string))

(declaim (inline claylib/wrap::text-split))

(cffi:defcfun ("TextSplit" claylib/wrap::text-split)
              :string
              (claylib/wrap::text :string)
              (claylib/wrap::delimiter :char)
              (claylib/wrap::c-count (:pointer :int)))

(declaim (inline claylib/wrap::text-subtext))

(cffi:defcfun ("TextSubtext" claylib/wrap::text-subtext)
              :string
              (claylib/wrap::text :string)
              (claylib/wrap::c-position :int)
              (claylib/wrap::length :int))

(declaim (inline claylib/wrap::text-to-integer))

(cffi:defcfun ("TextToInteger" claylib/wrap::text-to-integer)
              :int
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::text-to-lower))

(cffi:defcfun ("TextToLower" claylib/wrap::text-to-lower)
              :string
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::text-to-pascal))

(cffi:defcfun ("TextToPascal" claylib/wrap::text-to-pascal)
              :string
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::text-to-upper))

(cffi:defcfun ("TextToUpper" claylib/wrap::text-to-upper)
              :string
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::toggle-fullscreen))

(cffi:defcfun ("ToggleFullscreen" claylib/wrap::toggle-fullscreen)
              :void)

(declaim (inline claylib/wrap::trace-log))

(cffi:defcfun ("TraceLog" claylib/wrap::trace-log)
              :void
              (claylib/wrap::log-level :int)
              (claylib/wrap::text :string)
              &rest)

(declaim (inline claylib/wrap::unload-audio-stream))

(cffi:defcfun ("UnloadAudioStream" claylib/wrap::unload-audio-stream)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream)))

(declaim (inline claylib/wrap::unload-codepoints))

(cffi:defcfun ("UnloadCodepoints" claylib/wrap::unload-codepoints)
              :void
              (claylib/wrap::codepoints (:pointer :int)))

(declaim (inline claylib/wrap::unload-directory-files))

(cffi:defcfun ("UnloadDirectoryFiles"
               claylib/wrap::unload-directory-files)
              :void
              (claylib/wrap::files
               (:pointer claylib/wrap::file-path-list)))

(declaim (inline claylib/wrap::unload-dropped-files))

(cffi:defcfun ("UnloadDroppedFiles"
               claylib/wrap::unload-dropped-files)
              :void
              (claylib/wrap::files
               (:pointer claylib/wrap::file-path-list)))

(declaim (inline claylib/wrap::unload-file-data))

(cffi:defcfun ("UnloadFileData" claylib/wrap::unload-file-data)
              :void
              (claylib/wrap::data (:pointer :unsigned-char)))

(declaim (inline claylib/wrap::unload-file-text))

(cffi:defcfun ("UnloadFileText" claylib/wrap::unload-file-text)
              :void
              (claylib/wrap::text :string))

(declaim (inline claylib/wrap::unload-font))

(cffi:defcfun ("UnloadFont" claylib/wrap::unload-font)
              :void
              (claylib/wrap::font (:pointer claylib/wrap::font)))

(declaim (inline claylib/wrap::unload-font-data))

(cffi:defcfun ("UnloadFontData" claylib/wrap::unload-font-data)
              :void
              (claylib/wrap::chars
               (:pointer claylib/wrap::glyph-info))
              (claylib/wrap::glyph-count :int))

(declaim (inline claylib/wrap::unload-image))

(cffi:defcfun ("UnloadImage" claylib/wrap::unload-image)
              :void
              (claylib/wrap::image (:pointer claylib/wrap::image)))

(declaim (inline claylib/wrap::unload-image-colors))

(cffi:defcfun ("UnloadImageColors" claylib/wrap::unload-image-colors)
              :void
              (claylib/wrap::colors (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::unload-image-palette))

(cffi:defcfun ("UnloadImagePalette"
               claylib/wrap::unload-image-palette)
              :void
              (claylib/wrap::colors (:pointer claylib/wrap::color)))

(declaim (inline claylib/wrap::unload-material))

(cffi:defcfun ("UnloadMaterial" claylib/wrap::unload-material)
              :void
              (claylib/wrap::material
               (:pointer claylib/wrap::material)))

(declaim (inline claylib/wrap::unload-mesh))

(cffi:defcfun ("UnloadMesh" claylib/wrap::unload-mesh)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh)))

(declaim (inline claylib/wrap::unload-model))

(cffi:defcfun ("UnloadModel" claylib/wrap::unload-model)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model)))

(declaim (inline claylib/wrap::unload-model-animation))

(cffi:defcfun ("UnloadModelAnimation"
               claylib/wrap::unload-model-animation)
              :void
              (claylib/wrap::anim
               (:pointer claylib/wrap::model-animation)))

(declaim (inline claylib/wrap::unload-model-animations))

(cffi:defcfun ("UnloadModelAnimations"
               claylib/wrap::unload-model-animations)
              :void
              (claylib/wrap::animations
               (:pointer claylib/wrap::model-animation))
              (claylib/wrap::c-count :unsigned-int))

(declaim (inline claylib/wrap::unload-model-keep-meshes))

(cffi:defcfun ("UnloadModelKeepMeshes"
               claylib/wrap::unload-model-keep-meshes)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model)))

(declaim (inline claylib/wrap::unload-music-stream))

(cffi:defcfun ("UnloadMusicStream" claylib/wrap::unload-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::unload-render-texture))

(cffi:defcfun ("UnloadRenderTexture"
               claylib/wrap::unload-render-texture)
              :void
              (claylib/wrap::target
               (:pointer claylib/wrap::render-texture2d)))

(declaim (inline claylib/wrap::unload-shader))

(cffi:defcfun ("UnloadShader" claylib/wrap::unload-shader)
              :void
              (claylib/wrap::shader (:pointer claylib/wrap::shader)))

(declaim (inline claylib/wrap::unload-sound))

(cffi:defcfun ("UnloadSound" claylib/wrap::unload-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound)))

(declaim (inline claylib/wrap::unload-texture))

(cffi:defcfun ("UnloadTexture" claylib/wrap::unload-texture)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d)))

(declaim (inline claylib/wrap::unload-vr-stereo-config))

(cffi:defcfun ("UnloadVrStereoConfig"
               claylib/wrap::unload-vr-stereo-config)
              :void
              (claylib/wrap::config
               (:pointer claylib/wrap::vr-stereo-config)))

(declaim (inline claylib/wrap::unload-wave))

(cffi:defcfun ("UnloadWave" claylib/wrap::unload-wave)
              :void
              (claylib/wrap::wave (:pointer claylib/wrap::wave)))

(declaim (inline claylib/wrap::unload-wave-samples))

(cffi:defcfun ("UnloadWaveSamples" claylib/wrap::unload-wave-samples)
              :void
              (claylib/wrap::samples (:pointer :float)))

(declaim (inline claylib/wrap::update-audio-stream))

(cffi:defcfun ("UpdateAudioStream" claylib/wrap::update-audio-stream)
              :void
              (claylib/wrap::c-stream
               (:pointer claylib/wrap::audio-stream))
              (claylib/wrap::data (:pointer :void))
              (claylib/wrap::frame-count :int))

(declaim (inline claylib/wrap::update-camera))

(cffi:defcfun ("UpdateCamera" claylib/wrap::update-camera)
              :void
              (claylib/wrap::camera (:pointer claylib/wrap::camera)))

(declaim (inline claylib/wrap::update-mesh-buffer))

(cffi:defcfun ("UpdateMeshBuffer" claylib/wrap::update-mesh-buffer)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::index :int)
              (claylib/wrap::data (:pointer :void))
              (claylib/wrap::data-size :int)
              (claylib/wrap::offset :int))

(declaim (inline claylib/wrap::update-model-animation))

(cffi:defcfun ("UpdateModelAnimation"
               claylib/wrap::update-model-animation)
              :void
              (claylib/wrap::model (:pointer claylib/wrap::model))
              (claylib/wrap::anim
               (:pointer claylib/wrap::model-animation))
              (claylib/wrap::frame :int))

(declaim (inline claylib/wrap::update-music-stream))

(cffi:defcfun ("UpdateMusicStream" claylib/wrap::update-music-stream)
              :void
              (claylib/wrap::music (:pointer claylib/wrap::music)))

(declaim (inline claylib/wrap::update-sound))

(cffi:defcfun ("UpdateSound" claylib/wrap::update-sound)
              :void
              (claylib/wrap::sound (:pointer claylib/wrap::sound))
              (claylib/wrap::data (:pointer :void))
              (claylib/wrap::sample-count :int))

(declaim (inline claylib/wrap::update-texture))

(cffi:defcfun ("UpdateTexture" claylib/wrap::update-texture)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::pixels (:pointer :void)))

(declaim (inline claylib/wrap::update-texture-rec))

(cffi:defcfun ("UpdateTextureRec" claylib/wrap::update-texture-rec)
              :void
              (claylib/wrap::texture
               (:pointer claylib/wrap::texture2d))
              (claylib/wrap::rec (:pointer claylib/wrap::rectangle))
              (claylib/wrap::pixels (:pointer :void)))

(declaim (inline claylib/wrap::upload-mesh))

(cffi:defcfun ("UploadMesh" claylib/wrap::upload-mesh)
              :void
              (claylib/wrap::mesh (:pointer claylib/wrap::mesh))
              (claylib/wrap::dynamic :bool))

(declaim (inline claylib/wrap::vector2add))

(cffi:defcfun ("Vector2Add" claylib/wrap::vector2add)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2add-value))

(cffi:defcfun ("Vector2AddValue" claylib/wrap::vector2add-value)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::add :float))

(declaim (inline claylib/wrap::vector2angle))

(cffi:defcfun ("Vector2Angle" claylib/wrap::vector2angle)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2clamp))

(cffi:defcfun ("Vector2Clamp" claylib/wrap::vector2clamp)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::c-min (:pointer claylib/wrap::vector2))
              (claylib/wrap::c-max (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2clamp-value))

(cffi:defcfun ("Vector2ClampValue" claylib/wrap::vector2clamp-value)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::c-min :float)
              (claylib/wrap::c-max :float))

(declaim (inline claylib/wrap::vector2distance))

(cffi:defcfun ("Vector2Distance" claylib/wrap::vector2distance)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2distance-sqr))

(cffi:defcfun ("Vector2DistanceSqr"
               claylib/wrap::vector2distance-sqr)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2divide))

(cffi:defcfun ("Vector2Divide" claylib/wrap::vector2divide)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2dot-product))

(cffi:defcfun ("Vector2DotProduct" claylib/wrap::vector2dot-product)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2equals))

(cffi:defcfun ("Vector2Equals" claylib/wrap::vector2equals)
              :int
              (claylib/wrap::p (:pointer claylib/wrap::vector2))
              (claylib/wrap::q (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2invert))

(cffi:defcfun ("Vector2Invert" claylib/wrap::vector2invert)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2length))

(cffi:defcfun ("Vector2Length" claylib/wrap::vector2length)
              :float
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2length-sqr))

(cffi:defcfun ("Vector2LengthSqr" claylib/wrap::vector2length-sqr)
              :float
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2lerp))

(cffi:defcfun ("Vector2Lerp" claylib/wrap::vector2lerp)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::vector2move-towards))

(cffi:defcfun ("Vector2MoveTowards"
               claylib/wrap::vector2move-towards)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::target (:pointer claylib/wrap::vector2))
              (claylib/wrap::max-distance :float))

(declaim (inline claylib/wrap::vector2multiply))

(cffi:defcfun ("Vector2Multiply" claylib/wrap::vector2multiply)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2negate))

(cffi:defcfun ("Vector2Negate" claylib/wrap::vector2negate)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2normalize))

(cffi:defcfun ("Vector2Normalize" claylib/wrap::vector2normalize)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2one))

(cffi:defcfun ("Vector2One" claylib/wrap::vector2one)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2reflect))

(cffi:defcfun ("Vector2Reflect" claylib/wrap::vector2reflect)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::normal (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2rotate))

(cffi:defcfun ("Vector2Rotate" claylib/wrap::vector2rotate)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::vector2scale))

(cffi:defcfun ("Vector2Scale" claylib/wrap::vector2scale)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::scale :float))

(declaim (inline claylib/wrap::vector2subtract))

(cffi:defcfun ("Vector2Subtract" claylib/wrap::vector2subtract)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector2))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector2subtract-value))

(cffi:defcfun ("Vector2SubtractValue"
               claylib/wrap::vector2subtract-value)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::sub :float))

(declaim (inline claylib/wrap::vector2transform))

(cffi:defcfun ("Vector2Transform" claylib/wrap::vector2transform)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2))
              (claylib/wrap::v (:pointer claylib/wrap::vector2))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::vector2zero))

(cffi:defcfun ("Vector2Zero" claylib/wrap::vector2zero)
              (:pointer claylib/wrap::vector2)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector2)))

(declaim (inline claylib/wrap::vector3add))

(cffi:defcfun ("Vector3Add" claylib/wrap::vector3add)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3add-value))

(cffi:defcfun ("Vector3AddValue" claylib/wrap::vector3add-value)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::add :float))

(declaim (inline claylib/wrap::vector3angle))

(cffi:defcfun ("Vector3Angle" claylib/wrap::vector3angle)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3barycenter))

(cffi:defcfun ("Vector3Barycenter" claylib/wrap::vector3barycenter)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::p (:pointer claylib/wrap::vector3))
              (claylib/wrap::a (:pointer claylib/wrap::vector3))
              (claylib/wrap::b (:pointer claylib/wrap::vector3))
              (claylib/wrap::c (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3clamp))

(cffi:defcfun ("Vector3Clamp" claylib/wrap::vector3clamp)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::c-min (:pointer claylib/wrap::vector3))
              (claylib/wrap::c-max (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3clamp-value))

(cffi:defcfun ("Vector3ClampValue" claylib/wrap::vector3clamp-value)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::c-min :float)
              (claylib/wrap::c-max :float))

(declaim (inline claylib/wrap::vector3cross-product))

(cffi:defcfun ("Vector3CrossProduct"
               claylib/wrap::vector3cross-product)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3distance))

(cffi:defcfun ("Vector3Distance" claylib/wrap::vector3distance)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3distance-sqr))

(cffi:defcfun ("Vector3DistanceSqr"
               claylib/wrap::vector3distance-sqr)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3divide))

(cffi:defcfun ("Vector3Divide" claylib/wrap::vector3divide)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3dot-product))

(cffi:defcfun ("Vector3DotProduct" claylib/wrap::vector3dot-product)
              :float
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3equals))

(cffi:defcfun ("Vector3Equals" claylib/wrap::vector3equals)
              :int
              (claylib/wrap::p (:pointer claylib/wrap::vector3))
              (claylib/wrap::q (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3invert))

(cffi:defcfun ("Vector3Invert" claylib/wrap::vector3invert)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3length))

(cffi:defcfun ("Vector3Length" claylib/wrap::vector3length)
              :float
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3length-sqr))

(cffi:defcfun ("Vector3LengthSqr" claylib/wrap::vector3length-sqr)
              :float
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3lerp))

(cffi:defcfun ("Vector3Lerp" claylib/wrap::vector3lerp)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3))
              (claylib/wrap::amount :float))

(declaim (inline claylib/wrap::vector3max))

(cffi:defcfun ("Vector3Max" claylib/wrap::vector3max)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3min))

(cffi:defcfun ("Vector3Min" claylib/wrap::vector3min)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3multiply))

(cffi:defcfun ("Vector3Multiply" claylib/wrap::vector3multiply)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3negate))

(cffi:defcfun ("Vector3Negate" claylib/wrap::vector3negate)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3normalize))

(cffi:defcfun ("Vector3Normalize" claylib/wrap::vector3normalize)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3one))

(cffi:defcfun ("Vector3One" claylib/wrap::vector3one)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3ortho-normalize))

(cffi:defcfun ("Vector3OrthoNormalize"
               claylib/wrap::vector3ortho-normalize)
              :void
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3perpendicular))

(cffi:defcfun ("Vector3Perpendicular"
               claylib/wrap::vector3perpendicular)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3reflect))

(cffi:defcfun ("Vector3Reflect" claylib/wrap::vector3reflect)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::normal (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3refract))

(cffi:defcfun ("Vector3Refract" claylib/wrap::vector3refract)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::n (:pointer claylib/wrap::vector3))
              (claylib/wrap::r :float))

(declaim (inline claylib/wrap::vector3rotate-by-axis-angle))

(cffi:defcfun ("Vector3RotateByAxisAngle"
               claylib/wrap::vector3rotate-by-axis-angle)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::axis (:pointer claylib/wrap::vector3))
              (claylib/wrap::angle :float))

(declaim (inline claylib/wrap::vector3rotate-by-quaternion))

(cffi:defcfun ("Vector3RotateByQuaternion"
               claylib/wrap::vector3rotate-by-quaternion)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::q (:pointer claylib/wrap::quaternion)))

(declaim (inline claylib/wrap::vector3scale))

(cffi:defcfun ("Vector3Scale" claylib/wrap::vector3scale)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::scalar :float))

(declaim (inline claylib/wrap::vector3subtract))

(cffi:defcfun ("Vector3Subtract" claylib/wrap::vector3subtract)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v1 (:pointer claylib/wrap::vector3))
              (claylib/wrap::v2 (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3subtract-value))

(cffi:defcfun ("Vector3SubtractValue"
               claylib/wrap::vector3subtract-value)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::sub :float))

(cffi:defcstruct (claylib/wrap::float3 :size 12)
                 (claylib/wrap::v :float :count 3 :offset 0))

(cffi:defctype claylib/wrap::float3 (:struct claylib/wrap::float3))

(declaim (inline claylib/wrap::vector3to-float-v))

(cffi:defcfun ("Vector3ToFloatV" claylib/wrap::vector3to-float-v)
              (:pointer claylib/wrap::float3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::float3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::vector3transform))

(cffi:defcfun ("Vector3Transform" claylib/wrap::vector3transform)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::v (:pointer claylib/wrap::vector3))
              (claylib/wrap::mat (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::vector3unproject))

(cffi:defcfun ("Vector3Unproject" claylib/wrap::vector3unproject)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3))
              (claylib/wrap::source (:pointer claylib/wrap::vector3))
              (claylib/wrap::projection
               (:pointer claylib/wrap::matrix))
              (claylib/wrap::view (:pointer claylib/wrap::matrix)))

(declaim (inline claylib/wrap::vector3zero))

(cffi:defcfun ("Vector3Zero" claylib/wrap::vector3zero)
              (:pointer claylib/wrap::vector3)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::vector3)))

(declaim (inline claylib/wrap::wait-time))

(cffi:defcfun ("WaitTime" claylib/wrap::wait-time)
              :void
              (claylib/wrap::seconds :double))

(declaim (inline claylib/wrap::wave-copy))

(cffi:defcfun ("WaveCopy" claylib/wrap::wave-copy)
              (:pointer claylib/wrap::wave)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::wave))
              (claylib/wrap::wave (:pointer claylib/wrap::wave)))

(declaim (inline claylib/wrap::wave-crop))

(cffi:defcfun ("WaveCrop" claylib/wrap::wave-crop)
              :void
              (claylib/wrap::wave (:pointer claylib/wrap::wave))
              (claylib/wrap::init-sample :int)
              (claylib/wrap::final-sample :int))

(declaim (inline claylib/wrap::wave-format))

(cffi:defcfun ("WaveFormat" claylib/wrap::wave-format)
              :void
              (claylib/wrap::wave (:pointer claylib/wrap::wave))
              (claylib/wrap::sample-rate :int)
              (claylib/wrap::sample-size :int)
              (claylib/wrap::channels :int))

(declaim (inline claylib/wrap::window-should-close))

(cffi:defcfun ("WindowShouldClose" claylib/wrap::window-should-close)
              :bool)

(declaim (inline claylib/wrap::wrap))

(cffi:defcfun ("Wrap" claylib/wrap::wrap)
              :float
              (claylib/wrap::value :float)
              (claylib/wrap::c-min :float)
              (claylib/wrap::c-max :float))

(declaim (inline claylib/wrap::%%acos))

(cffi:defcfun ("__acos" claylib/wrap::%%acos)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%acosf))

(cffi:defcfun ("__acosf" claylib/wrap::%%acosf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%acosh))

(cffi:defcfun ("__acosh" claylib/wrap::%%acosh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%acoshf))

(cffi:defcfun ("__acoshf" claylib/wrap::%%acoshf)
              :float
              (claylib/wrap::%%x :float))

(cffi:defcstruct (claylib/wrap::long-double :class
                  claylib/wrap::emulated$long-double :size 8)
                 (claylib/wrap::data :unsigned-char :count 8))

(defmethod cffi:foreign-type-alignment ((claylib/wrap::this
                                         claylib/wrap::emulated$long-double))
  (declare (ignore claylib/wrap::this))
  8)

(cffi:defctype claylib/wrap::long-double
               (:struct claylib/wrap::long-double))

(declaim (inline claylib/wrap::%%acoshl))

(cffi:defcfun ("__acoshl" claylib/wrap::%%acoshl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%acosl))

(cffi:defcfun ("__acosl" claylib/wrap::%%acosl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%asin))

(cffi:defcfun ("__asin" claylib/wrap::%%asin)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%asinf))

(cffi:defcfun ("__asinf" claylib/wrap::%%asinf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%asinh))

(cffi:defcfun ("__asinh" claylib/wrap::%%asinh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%asinhf))

(cffi:defcfun ("__asinhf" claylib/wrap::%%asinhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%asinhl))

(cffi:defcfun ("__asinhl" claylib/wrap::%%asinhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%asinl))

(cffi:defcfun ("__asinl" claylib/wrap::%%asinl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%atan))

(cffi:defcfun ("__atan" claylib/wrap::%%atan)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%atan2))

(cffi:defcfun ("__atan2" claylib/wrap::%%atan2)
              :double
              (claylib/wrap::%%y :double)
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%atan2f))

(cffi:defcfun ("__atan2f" claylib/wrap::%%atan2f)
              :float
              (claylib/wrap::%%y :float)
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%atan2l))

(cffi:defcfun ("__atan2l" claylib/wrap::%%atan2l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%atanf))

(cffi:defcfun ("__atanf" claylib/wrap::%%atanf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%atanh))

(cffi:defcfun ("__atanh" claylib/wrap::%%atanh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%atanhf))

(cffi:defcfun ("__atanhf" claylib/wrap::%%atanhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%atanhl))

(cffi:defcfun ("__atanhl" claylib/wrap::%%atanhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%atanl))

(cffi:defcfun ("__atanl" claylib/wrap::%%atanl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%cbrt))

(cffi:defcfun ("__cbrt" claylib/wrap::%%cbrt)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%cbrtf))

(cffi:defcfun ("__cbrtf" claylib/wrap::%%cbrtf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%cbrtl))

(cffi:defcfun ("__cbrtl" claylib/wrap::%%cbrtl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%ceil))

(cffi:defcfun ("__ceil" claylib/wrap::%%ceil)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%ceilf))

(cffi:defcfun ("__ceilf" claylib/wrap::%%ceilf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%ceill))

(cffi:defcfun ("__ceill" claylib/wrap::%%ceill)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%copysign))

(cffi:defcfun ("__copysign" claylib/wrap::%%copysign)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%copysignf))

(cffi:defcfun ("__copysignf" claylib/wrap::%%copysignf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%copysignl))

(cffi:defcfun ("__copysignl" claylib/wrap::%%copysignl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%cos))

(cffi:defcfun ("__cos" claylib/wrap::%%cos)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%cosf))

(cffi:defcfun ("__cosf" claylib/wrap::%%cosf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%cosh))

(cffi:defcfun ("__cosh" claylib/wrap::%%cosh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%coshf))

(cffi:defcfun ("__coshf" claylib/wrap::%%coshf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%coshl))

(cffi:defcfun ("__coshl" claylib/wrap::%%coshl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%cosl))

(cffi:defcfun ("__cosl" claylib/wrap::%%cosl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%drem))

(cffi:defcfun ("__drem" claylib/wrap::%%drem)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%dremf))

(cffi:defcfun ("__dremf" claylib/wrap::%%dremf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%dreml))

(cffi:defcfun ("__dreml" claylib/wrap::%%dreml)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%erf))

(cffi:defcfun ("__erf" claylib/wrap::%%erf)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::%%erfc))

(cffi:defcfun ("__erfc" claylib/wrap::%%erfc)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::%%erfcf))

(cffi:defcfun ("__erfcf" claylib/wrap::%%erfcf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::%%erfcl))

(cffi:defcfun ("__erfcl" claylib/wrap::%%erfcl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%erff))

(cffi:defcfun ("__erff" claylib/wrap::%%erff)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::%%erfl))

(cffi:defcfun ("__erfl" claylib/wrap::%%erfl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%exp))

(cffi:defcfun ("__exp" claylib/wrap::%%exp)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%exp2))

(cffi:defcfun ("__exp2" claylib/wrap::%%exp2)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%exp2f))

(cffi:defcfun ("__exp2f" claylib/wrap::%%exp2f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%exp2l))

(cffi:defcfun ("__exp2l" claylib/wrap::%%exp2l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%expf))

(cffi:defcfun ("__expf" claylib/wrap::%%expf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%expl))

(cffi:defcfun ("__expl" claylib/wrap::%%expl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%expm1))

(cffi:defcfun ("__expm1" claylib/wrap::%%expm1)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%expm1f))

(cffi:defcfun ("__expm1f" claylib/wrap::%%expm1f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%expm1l))

(cffi:defcfun ("__expm1l" claylib/wrap::%%expm1l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%fabs))

(cffi:defcfun ("__fabs" claylib/wrap::%%fabs)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%fabsf))

(cffi:defcfun ("__fabsf" claylib/wrap::%%fabsf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%fabsl))

(cffi:defcfun ("__fabsl" claylib/wrap::%%fabsl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%fdim))

(cffi:defcfun ("__fdim" claylib/wrap::%%fdim)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%fdimf))

(cffi:defcfun ("__fdimf" claylib/wrap::%%fdimf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%fdiml))

(cffi:defcfun ("__fdiml" claylib/wrap::%%fdiml)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%finite))

(cffi:defcfun ("__finite" claylib/wrap::%%finite)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::%%finitef))

(cffi:defcfun ("__finitef" claylib/wrap::%%finitef)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::%%finitel))

(cffi:defcfun ("__finitel" claylib/wrap::%%finitel)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%floor))

(cffi:defcfun ("__floor" claylib/wrap::%%floor)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%floorf))

(cffi:defcfun ("__floorf" claylib/wrap::%%floorf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%floorl))

(cffi:defcfun ("__floorl" claylib/wrap::%%floorl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%fma))

(cffi:defcfun ("__fma" claylib/wrap::%%fma)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double)
              (claylib/wrap::%%z :double))

(declaim (inline claylib/wrap::%%fmaf))

(cffi:defcfun ("__fmaf" claylib/wrap::%%fmaf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float)
              (claylib/wrap::%%z :float))

(declaim (inline claylib/wrap::%%fmal))

(cffi:defcfun ("__fmal" claylib/wrap::%%fmal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%z
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%fmax))

(cffi:defcfun ("__fmax" claylib/wrap::%%fmax)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%fmaxf))

(cffi:defcfun ("__fmaxf" claylib/wrap::%%fmaxf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%fmaxl))

(cffi:defcfun ("__fmaxl" claylib/wrap::%%fmaxl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%fmin))

(cffi:defcfun ("__fmin" claylib/wrap::%%fmin)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%fminf))

(cffi:defcfun ("__fminf" claylib/wrap::%%fminf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%fminl))

(cffi:defcfun ("__fminl" claylib/wrap::%%fminl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%fmod))

(cffi:defcfun ("__fmod" claylib/wrap::%%fmod)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%fmodf))

(cffi:defcfun ("__fmodf" claylib/wrap::%%fmodf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%fmodl))

(cffi:defcfun ("__fmodl" claylib/wrap::%%fmodl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%fpclassify))

(cffi:defcfun ("__fpclassify" claylib/wrap::%%fpclassify)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::%%fpclassifyf))

(cffi:defcfun ("__fpclassifyf" claylib/wrap::%%fpclassifyf)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::%%fpclassifyl))

(cffi:defcfun ("__fpclassifyl" claylib/wrap::%%fpclassifyl)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%frexp))

(cffi:defcfun ("__frexp" claylib/wrap::%%frexp)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%exponent (:pointer :int)))

(declaim (inline claylib/wrap::%%frexpf))

(cffi:defcfun ("__frexpf" claylib/wrap::%%frexpf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%exponent (:pointer :int)))

(declaim (inline claylib/wrap::%%frexpl))

(cffi:defcfun ("__frexpl" claylib/wrap::%%frexpl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%exponent (:pointer :int)))

(declaim (inline claylib/wrap::%%gamma))

(cffi:defcfun ("__gamma" claylib/wrap::%%gamma)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::%%gammaf))

(cffi:defcfun ("__gammaf" claylib/wrap::%%gammaf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::%%gammal))

(cffi:defcfun ("__gammal" claylib/wrap::%%gammal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%hypot))

(cffi:defcfun ("__hypot" claylib/wrap::%%hypot)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%hypotf))

(cffi:defcfun ("__hypotf" claylib/wrap::%%hypotf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%hypotl))

(cffi:defcfun ("__hypotl" claylib/wrap::%%hypotl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%ilogb))

(cffi:defcfun ("__ilogb" claylib/wrap::%%ilogb)
              :int
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%ilogbf))

(cffi:defcfun ("__ilogbf" claylib/wrap::%%ilogbf)
              :int
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%ilogbl))

(cffi:defcfun ("__ilogbl" claylib/wrap::%%ilogbl)
              :int
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%iseqsig))

(cffi:defcfun ("__iseqsig" claylib/wrap::%%iseqsig)
              :int
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%iseqsigf))

(cffi:defcfun ("__iseqsigf" claylib/wrap::%%iseqsigf)
              :int
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%iseqsigl))

(cffi:defcfun ("__iseqsigl" claylib/wrap::%%iseqsigl)
              :int
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%isinf))

(cffi:defcfun ("__isinf" claylib/wrap::%%isinf)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::%%isinff))

(cffi:defcfun ("__isinff" claylib/wrap::%%isinff)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::%%isinfl))

(cffi:defcfun ("__isinfl" claylib/wrap::%%isinfl)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%isnan))

(cffi:defcfun ("__isnan" claylib/wrap::%%isnan)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::%%isnanf))

(cffi:defcfun ("__isnanf" claylib/wrap::%%isnanf)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::%%isnanl))

(cffi:defcfun ("__isnanl" claylib/wrap::%%isnanl)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%issignaling))

(cffi:defcfun ("__issignaling" claylib/wrap::%%issignaling)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::%%issignalingf))

(cffi:defcfun ("__issignalingf" claylib/wrap::%%issignalingf)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::%%issignalingl))

(cffi:defcfun ("__issignalingl" claylib/wrap::%%issignalingl)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%j0))

(cffi:defcfun ("__j0" claylib/wrap::%%j0)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::%%j0f))

(cffi:defcfun ("__j0f" claylib/wrap::%%j0f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::%%j0l))

(cffi:defcfun ("__j0l" claylib/wrap::%%j0l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%j1))

(cffi:defcfun ("__j1" claylib/wrap::%%j1)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::%%j1f))

(cffi:defcfun ("__j1f" claylib/wrap::%%j1f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::%%j1l))

(cffi:defcfun ("__j1l" claylib/wrap::%%j1l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%jn))

(cffi:defcfun ("__jn" claylib/wrap::%%jn)
              :double
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :double))

(declaim (inline claylib/wrap::%%jnf))

(cffi:defcfun ("__jnf" claylib/wrap::%%jnf)
              :float
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :float))

(declaim (inline claylib/wrap::%%jnl))

(cffi:defcfun ("__jnl" claylib/wrap::%%jnl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%ldexp))

(cffi:defcfun ("__ldexp" claylib/wrap::%%ldexp)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%exponent :int))

(declaim (inline claylib/wrap::%%ldexpf))

(cffi:defcfun ("__ldexpf" claylib/wrap::%%ldexpf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%exponent :int))

(declaim (inline claylib/wrap::%%ldexpl))

(cffi:defcfun ("__ldexpl" claylib/wrap::%%ldexpl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%exponent :int))

(declaim (inline claylib/wrap::%%lgamma))

(cffi:defcfun ("__lgamma" claylib/wrap::%%lgamma)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::%%lgamma-r))

(cffi:defcfun ("__lgamma_r" claylib/wrap::%%lgamma-r)
              :double
              (claylib/wrap::arg0 :double)
              (claylib/wrap::%%signgamp (:pointer :int)))

(declaim (inline claylib/wrap::%%lgammaf))

(cffi:defcfun ("__lgammaf" claylib/wrap::%%lgammaf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::%%lgammaf-r))

(cffi:defcfun ("__lgammaf_r" claylib/wrap::%%lgammaf-r)
              :float
              (claylib/wrap::arg0 :float)
              (claylib/wrap::%%signgamp (:pointer :int)))

(declaim (inline claylib/wrap::%%lgammal))

(cffi:defcfun ("__lgammal" claylib/wrap::%%lgammal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%lgammal-r))

(cffi:defcfun ("__lgammal_r" claylib/wrap::%%lgammal-r)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%signgamp (:pointer :int)))

(declaim (inline claylib/wrap::%%llrint))

(cffi:defcfun ("__llrint" claylib/wrap::%%llrint)
              :long-long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%llrintf))

(cffi:defcfun ("__llrintf" claylib/wrap::%%llrintf)
              :long-long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%llrintl))

(cffi:defcfun ("__llrintl" claylib/wrap::%%llrintl)
              :long-long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%llround))

(cffi:defcfun ("__llround" claylib/wrap::%%llround)
              :long-long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%llroundf))

(cffi:defcfun ("__llroundf" claylib/wrap::%%llroundf)
              :long-long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%llroundl))

(cffi:defcfun ("__llroundl" claylib/wrap::%%llroundl)
              :long-long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%log))

(cffi:defcfun ("__log" claylib/wrap::%%log)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%log10))

(cffi:defcfun ("__log10" claylib/wrap::%%log10)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%log10f))

(cffi:defcfun ("__log10f" claylib/wrap::%%log10f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%log10l))

(cffi:defcfun ("__log10l" claylib/wrap::%%log10l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%log1p))

(cffi:defcfun ("__log1p" claylib/wrap::%%log1p)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%log1pf))

(cffi:defcfun ("__log1pf" claylib/wrap::%%log1pf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%log1pl))

(cffi:defcfun ("__log1pl" claylib/wrap::%%log1pl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%log2))

(cffi:defcfun ("__log2" claylib/wrap::%%log2)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%log2f))

(cffi:defcfun ("__log2f" claylib/wrap::%%log2f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%log2l))

(cffi:defcfun ("__log2l" claylib/wrap::%%log2l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%logb))

(cffi:defcfun ("__logb" claylib/wrap::%%logb)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%logbf))

(cffi:defcfun ("__logbf" claylib/wrap::%%logbf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%logbl))

(cffi:defcfun ("__logbl" claylib/wrap::%%logbl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%logf))

(cffi:defcfun ("__logf" claylib/wrap::%%logf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%logl))

(cffi:defcfun ("__logl" claylib/wrap::%%logl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%lrint))

(cffi:defcfun ("__lrint" claylib/wrap::%%lrint)
              :long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%lrintf))

(cffi:defcfun ("__lrintf" claylib/wrap::%%lrintf)
              :long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%lrintl))

(cffi:defcfun ("__lrintl" claylib/wrap::%%lrintl)
              :long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%lround))

(cffi:defcfun ("__lround" claylib/wrap::%%lround)
              :long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%lroundf))

(cffi:defcfun ("__lroundf" claylib/wrap::%%lroundf)
              :long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%lroundl))

(cffi:defcfun ("__lroundl" claylib/wrap::%%lroundl)
              :long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%modf))

(cffi:defcfun ("__modf" claylib/wrap::%%modf)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%iptr (:pointer :double)))

(declaim (inline claylib/wrap::%%modff))

(cffi:defcfun ("__modff" claylib/wrap::%%modff)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%iptr (:pointer :float)))

(declaim (inline claylib/wrap::%%modfl))

(cffi:defcfun ("__modfl" claylib/wrap::%%modfl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%iptr
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%nan))

(cffi:defcfun ("__nan" claylib/wrap::%%nan)
              :double
              (claylib/wrap::%%tagb :string))

(declaim (inline claylib/wrap::%%nanf))

(cffi:defcfun ("__nanf" claylib/wrap::%%nanf)
              :float
              (claylib/wrap::%%tagb :string))

(declaim (inline claylib/wrap::%%nanl))

(cffi:defcfun ("__nanl" claylib/wrap::%%nanl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%tagb :string))

(declaim (inline claylib/wrap::%%nearbyint))

(cffi:defcfun ("__nearbyint" claylib/wrap::%%nearbyint)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%nearbyintf))

(cffi:defcfun ("__nearbyintf" claylib/wrap::%%nearbyintf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%nearbyintl))

(cffi:defcfun ("__nearbyintl" claylib/wrap::%%nearbyintl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%nextafter))

(cffi:defcfun ("__nextafter" claylib/wrap::%%nextafter)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%nextafterf))

(cffi:defcfun ("__nextafterf" claylib/wrap::%%nextafterf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%nextafterl))

(cffi:defcfun ("__nextafterl" claylib/wrap::%%nextafterl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%nexttoward))

(cffi:defcfun ("__nexttoward" claylib/wrap::%%nexttoward)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%nexttowardf))

(cffi:defcfun ("__nexttowardf" claylib/wrap::%%nexttowardf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%nexttowardl))

(cffi:defcfun ("__nexttowardl" claylib/wrap::%%nexttowardl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%pow))

(cffi:defcfun ("__pow" claylib/wrap::%%pow)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%powf))

(cffi:defcfun ("__powf" claylib/wrap::%%powf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%powl))

(cffi:defcfun ("__powl" claylib/wrap::%%powl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%remainder))

(cffi:defcfun ("__remainder" claylib/wrap::%%remainder)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::%%remainderf))

(cffi:defcfun ("__remainderf" claylib/wrap::%%remainderf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::%%remainderl))

(cffi:defcfun ("__remainderl" claylib/wrap::%%remainderl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%remquo))

(cffi:defcfun ("__remquo" claylib/wrap::%%remquo)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double)
              (claylib/wrap::%%quo (:pointer :int)))

(declaim (inline claylib/wrap::%%remquof))

(cffi:defcfun ("__remquof" claylib/wrap::%%remquof)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float)
              (claylib/wrap::%%quo (:pointer :int)))

(declaim (inline claylib/wrap::%%remquol))

(cffi:defcfun ("__remquol" claylib/wrap::%%remquol)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%quo (:pointer :int)))

(declaim (inline claylib/wrap::%%rint))

(cffi:defcfun ("__rint" claylib/wrap::%%rint)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%rintf))

(cffi:defcfun ("__rintf" claylib/wrap::%%rintf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%rintl))

(cffi:defcfun ("__rintl" claylib/wrap::%%rintl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%round))

(cffi:defcfun ("__round" claylib/wrap::%%round)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%roundf))

(cffi:defcfun ("__roundf" claylib/wrap::%%roundf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%roundl))

(cffi:defcfun ("__roundl" claylib/wrap::%%roundl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%scalb))

(cffi:defcfun ("__scalb" claylib/wrap::%%scalb)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%n :double))

(declaim (inline claylib/wrap::%%scalbf))

(cffi:defcfun ("__scalbf" claylib/wrap::%%scalbf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%n :float))

(declaim (inline claylib/wrap::%%scalbl))

(cffi:defcfun ("__scalbl" claylib/wrap::%%scalbl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%n
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%scalbln))

(cffi:defcfun ("__scalbln" claylib/wrap::%%scalbln)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::%%scalblnf))

(cffi:defcfun ("__scalblnf" claylib/wrap::%%scalblnf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::%%scalblnl))

(cffi:defcfun ("__scalblnl" claylib/wrap::%%scalblnl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::%%scalbn))

(cffi:defcfun ("__scalbn" claylib/wrap::%%scalbn)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%n :int))

(declaim (inline claylib/wrap::%%scalbnf))

(cffi:defcfun ("__scalbnf" claylib/wrap::%%scalbnf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%n :int))

(declaim (inline claylib/wrap::%%scalbnl))

(cffi:defcfun ("__scalbnl" claylib/wrap::%%scalbnl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%n :int))

(declaim (inline claylib/wrap::%%signbit))

(cffi:defcfun ("__signbit" claylib/wrap::%%signbit)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::%%signbitf))

(cffi:defcfun ("__signbitf" claylib/wrap::%%signbitf)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::%%signbitl))

(cffi:defcfun ("__signbitl" claylib/wrap::%%signbitl)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%significand))

(cffi:defcfun ("__significand" claylib/wrap::%%significand)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%significandf))

(cffi:defcfun ("__significandf" claylib/wrap::%%significandf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%significandl))

(cffi:defcfun ("__significandl" claylib/wrap::%%significandl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%sin))

(cffi:defcfun ("__sin" claylib/wrap::%%sin)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%sinf))

(cffi:defcfun ("__sinf" claylib/wrap::%%sinf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%sinh))

(cffi:defcfun ("__sinh" claylib/wrap::%%sinh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%sinhf))

(cffi:defcfun ("__sinhf" claylib/wrap::%%sinhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%sinhl))

(cffi:defcfun ("__sinhl" claylib/wrap::%%sinhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%sinl))

(cffi:defcfun ("__sinl" claylib/wrap::%%sinl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%sqrt))

(cffi:defcfun ("__sqrt" claylib/wrap::%%sqrt)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%sqrtf))

(cffi:defcfun ("__sqrtf" claylib/wrap::%%sqrtf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%sqrtl))

(cffi:defcfun ("__sqrtl" claylib/wrap::%%sqrtl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%tan))

(cffi:defcfun ("__tan" claylib/wrap::%%tan)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%tanf))

(cffi:defcfun ("__tanf" claylib/wrap::%%tanf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%tanh))

(cffi:defcfun ("__tanh" claylib/wrap::%%tanh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%tanhf))

(cffi:defcfun ("__tanhf" claylib/wrap::%%tanhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%tanhl))

(cffi:defcfun ("__tanhl" claylib/wrap::%%tanhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%tanl))

(cffi:defcfun ("__tanl" claylib/wrap::%%tanl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%tgamma))

(cffi:defcfun ("__tgamma" claylib/wrap::%%tgamma)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::%%tgammaf))

(cffi:defcfun ("__tgammaf" claylib/wrap::%%tgammaf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::%%tgammal))

(cffi:defcfun ("__tgammal" claylib/wrap::%%tgammal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%trunc))

(cffi:defcfun ("__trunc" claylib/wrap::%%trunc)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::%%truncf))

(cffi:defcfun ("__truncf" claylib/wrap::%%truncf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::%%truncl))

(cffi:defcfun ("__truncl" claylib/wrap::%%truncl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%y0))

(cffi:defcfun ("__y0" claylib/wrap::%%y0)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::%%y0f))

(cffi:defcfun ("__y0f" claylib/wrap::%%y0f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::%%y0l))

(cffi:defcfun ("__y0l" claylib/wrap::%%y0l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%y1))

(cffi:defcfun ("__y1" claylib/wrap::%%y1)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::%%y1f))

(cffi:defcfun ("__y1f" claylib/wrap::%%y1f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::%%y1l))

(cffi:defcfun ("__y1l" claylib/wrap::%%y1l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::%%yn))

(cffi:defcfun ("__yn" claylib/wrap::%%yn)
              :double
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :double))

(declaim (inline claylib/wrap::%%ynf))

(cffi:defcfun ("__ynf" claylib/wrap::%%ynf)
              :float
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :float))

(declaim (inline claylib/wrap::%%ynl))

(cffi:defcfun ("__ynl" claylib/wrap::%%ynl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-acos))

(cffi:defcfun ("acos" claylib/wrap::c-acos)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::acosf))

(cffi:defcfun ("acosf" claylib/wrap::acosf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-acosh))

(cffi:defcfun ("acosh" claylib/wrap::c-acosh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::acoshf))

(cffi:defcfun ("acoshf" claylib/wrap::acoshf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::acoshl))

(cffi:defcfun ("acoshl" claylib/wrap::acoshl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::acosl))

(cffi:defcfun ("acosl" claylib/wrap::acosl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-asin))

(cffi:defcfun ("asin" claylib/wrap::c-asin)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::asinf))

(cffi:defcfun ("asinf" claylib/wrap::asinf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-asinh))

(cffi:defcfun ("asinh" claylib/wrap::c-asinh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::asinhf))

(cffi:defcfun ("asinhf" claylib/wrap::asinhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::asinhl))

(cffi:defcfun ("asinhl" claylib/wrap::asinhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::asinl))

(cffi:defcfun ("asinl" claylib/wrap::asinl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-atan))

(cffi:defcfun ("atan" claylib/wrap::c-atan)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::atan2))

(cffi:defcfun ("atan2" claylib/wrap::atan2)
              :double
              (claylib/wrap::%%y :double)
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::atan2f))

(cffi:defcfun ("atan2f" claylib/wrap::atan2f)
              :float
              (claylib/wrap::%%y :float)
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::atan2l))

(cffi:defcfun ("atan2l" claylib/wrap::atan2l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::atanf))

(cffi:defcfun ("atanf" claylib/wrap::atanf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-atanh))

(cffi:defcfun ("atanh" claylib/wrap::c-atanh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::atanhf))

(cffi:defcfun ("atanhf" claylib/wrap::atanhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::atanhl))

(cffi:defcfun ("atanhl" claylib/wrap::atanhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::atanl))

(cffi:defcfun ("atanl" claylib/wrap::atanl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::cbrt))

(cffi:defcfun ("cbrt" claylib/wrap::cbrt)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::cbrtf))

(cffi:defcfun ("cbrtf" claylib/wrap::cbrtf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::cbrtl))

(cffi:defcfun ("cbrtl" claylib/wrap::cbrtl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::ceil))

(cffi:defcfun ("ceil" claylib/wrap::ceil)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::ceilf))

(cffi:defcfun ("ceilf" claylib/wrap::ceilf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::ceill))

(cffi:defcfun ("ceill" claylib/wrap::ceill)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::copysign))

(cffi:defcfun ("copysign" claylib/wrap::copysign)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::copysignf))

(cffi:defcfun ("copysignf" claylib/wrap::copysignf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::copysignl))

(cffi:defcfun ("copysignl" claylib/wrap::copysignl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-cos))

(cffi:defcfun ("cos" claylib/wrap::c-cos)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::cosf))

(cffi:defcfun ("cosf" claylib/wrap::cosf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-cosh))

(cffi:defcfun ("cosh" claylib/wrap::c-cosh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::coshf))

(cffi:defcfun ("coshf" claylib/wrap::coshf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::coshl))

(cffi:defcfun ("coshl" claylib/wrap::coshl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::cosl))

(cffi:defcfun ("cosl" claylib/wrap::cosl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::drem))

(cffi:defcfun ("drem" claylib/wrap::drem)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::dremf))

(cffi:defcfun ("dremf" claylib/wrap::dremf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::dreml))

(cffi:defcfun ("dreml" claylib/wrap::dreml)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::erf))

(cffi:defcfun ("erf" claylib/wrap::erf)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::erfc))

(cffi:defcfun ("erfc" claylib/wrap::erfc)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::erfcf))

(cffi:defcfun ("erfcf" claylib/wrap::erfcf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::erfcl))

(cffi:defcfun ("erfcl" claylib/wrap::erfcl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::erff))

(cffi:defcfun ("erff" claylib/wrap::erff)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::erfl))

(cffi:defcfun ("erfl" claylib/wrap::erfl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-exp))

(cffi:defcfun ("exp" claylib/wrap::c-exp)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::exp2))

(cffi:defcfun ("exp2" claylib/wrap::exp2)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::exp2f))

(cffi:defcfun ("exp2f" claylib/wrap::exp2f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::exp2l))

(cffi:defcfun ("exp2l" claylib/wrap::exp2l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::expf))

(cffi:defcfun ("expf" claylib/wrap::expf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::expl))

(cffi:defcfun ("expl" claylib/wrap::expl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::expm1))

(cffi:defcfun ("expm1" claylib/wrap::expm1)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::expm1f))

(cffi:defcfun ("expm1f" claylib/wrap::expm1f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::expm1l))

(cffi:defcfun ("expm1l" claylib/wrap::expm1l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fabs))

(cffi:defcfun ("fabs" claylib/wrap::fabs)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::fabsf))

(cffi:defcfun ("fabsf" claylib/wrap::fabsf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::fabsl))

(cffi:defcfun ("fabsl" claylib/wrap::fabsl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fdim))

(cffi:defcfun ("fdim" claylib/wrap::fdim)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::fdimf))

(cffi:defcfun ("fdimf" claylib/wrap::fdimf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::fdiml))

(cffi:defcfun ("fdiml" claylib/wrap::fdiml)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::finite))

(cffi:defcfun ("finite" claylib/wrap::finite)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::finitef))

(cffi:defcfun ("finitef" claylib/wrap::finitef)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::finitel))

(cffi:defcfun ("finitel" claylib/wrap::finitel)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-floor))

(cffi:defcfun ("floor" claylib/wrap::c-floor)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::floorf))

(cffi:defcfun ("floorf" claylib/wrap::floorf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::floorl))

(cffi:defcfun ("floorl" claylib/wrap::floorl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fma))

(cffi:defcfun ("fma" claylib/wrap::fma)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double)
              (claylib/wrap::%%z :double))

(declaim (inline claylib/wrap::fmaf))

(cffi:defcfun ("fmaf" claylib/wrap::fmaf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float)
              (claylib/wrap::%%z :float))

(declaim (inline claylib/wrap::fmal))

(cffi:defcfun ("fmal" claylib/wrap::fmal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%z
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fmax))

(cffi:defcfun ("fmax" claylib/wrap::fmax)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::fmaxf))

(cffi:defcfun ("fmaxf" claylib/wrap::fmaxf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::fmaxl))

(cffi:defcfun ("fmaxl" claylib/wrap::fmaxl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fmin))

(cffi:defcfun ("fmin" claylib/wrap::fmin)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::fminf))

(cffi:defcfun ("fminf" claylib/wrap::fminf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::fminl))

(cffi:defcfun ("fminl" claylib/wrap::fminl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::fmod))

(cffi:defcfun ("fmod" claylib/wrap::fmod)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::fmodf))

(cffi:defcfun ("fmodf" claylib/wrap::fmodf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::fmodl))

(cffi:defcfun ("fmodl" claylib/wrap::fmodl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::frexp))

(cffi:defcfun ("frexp" claylib/wrap::frexp)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%exponent (:pointer :int)))

(declaim (inline claylib/wrap::frexpf))

(cffi:defcfun ("frexpf" claylib/wrap::frexpf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%exponent (:pointer :int)))

(declaim (inline claylib/wrap::frexpl))

(cffi:defcfun ("frexpl" claylib/wrap::frexpl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%exponent (:pointer :int)))

(declaim (inline claylib/wrap::gamma))

(cffi:defcfun ("gamma" claylib/wrap::gamma)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::gammaf))

(cffi:defcfun ("gammaf" claylib/wrap::gammaf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::gammal))

(cffi:defcfun ("gammal" claylib/wrap::gammal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::hypot))

(cffi:defcfun ("hypot" claylib/wrap::hypot)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::hypotf))

(cffi:defcfun ("hypotf" claylib/wrap::hypotf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::hypotl))

(cffi:defcfun ("hypotl" claylib/wrap::hypotl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::ilogb))

(cffi:defcfun ("ilogb" claylib/wrap::ilogb)
              :int
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::ilogbf))

(cffi:defcfun ("ilogbf" claylib/wrap::ilogbf)
              :int
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::ilogbl))

(cffi:defcfun ("ilogbl" claylib/wrap::ilogbl)
              :int
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::isinf))

(cffi:defcfun ("isinf" claylib/wrap::isinf)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::isinff))

(cffi:defcfun ("isinff" claylib/wrap::isinff)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::isinfl))

(cffi:defcfun ("isinfl" claylib/wrap::isinfl)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::isnan))

(cffi:defcfun ("isnan" claylib/wrap::isnan)
              :int
              (claylib/wrap::%%value :double))

(declaim (inline claylib/wrap::isnanf))

(cffi:defcfun ("isnanf" claylib/wrap::isnanf)
              :int
              (claylib/wrap::%%value :float))

(declaim (inline claylib/wrap::isnanl))

(cffi:defcfun ("isnanl" claylib/wrap::isnanl)
              :int
              (claylib/wrap::%%value
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::j0))

(cffi:defcfun ("j0" claylib/wrap::j0)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::j0f))

(cffi:defcfun ("j0f" claylib/wrap::j0f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::j0l))

(cffi:defcfun ("j0l" claylib/wrap::j0l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::j1))

(cffi:defcfun ("j1" claylib/wrap::j1)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::j1f))

(cffi:defcfun ("j1f" claylib/wrap::j1f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::j1l))

(cffi:defcfun ("j1l" claylib/wrap::j1l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::jn))

(cffi:defcfun ("jn" claylib/wrap::jn)
              :double
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :double))

(declaim (inline claylib/wrap::jnf))

(cffi:defcfun ("jnf" claylib/wrap::jnf)
              :float
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :float))

(declaim (inline claylib/wrap::jnl))

(cffi:defcfun ("jnl" claylib/wrap::jnl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::ldexp))

(cffi:defcfun ("ldexp" claylib/wrap::ldexp)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%exponent :int))

(declaim (inline claylib/wrap::ldexpf))

(cffi:defcfun ("ldexpf" claylib/wrap::ldexpf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%exponent :int))

(declaim (inline claylib/wrap::ldexpl))

(cffi:defcfun ("ldexpl" claylib/wrap::ldexpl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%exponent :int))

(declaim (inline claylib/wrap::lgamma))

(cffi:defcfun ("lgamma" claylib/wrap::lgamma)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::lgamma-r))

(cffi:defcfun ("lgamma_r" claylib/wrap::lgamma-r)
              :double
              (claylib/wrap::arg0 :double)
              (claylib/wrap::%%signgamp (:pointer :int)))

(declaim (inline claylib/wrap::lgammaf))

(cffi:defcfun ("lgammaf" claylib/wrap::lgammaf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::lgammaf-r))

(cffi:defcfun ("lgammaf_r" claylib/wrap::lgammaf-r)
              :float
              (claylib/wrap::arg0 :float)
              (claylib/wrap::%%signgamp (:pointer :int)))

(declaim (inline claylib/wrap::lgammal))

(cffi:defcfun ("lgammal" claylib/wrap::lgammal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::lgammal-r))

(cffi:defcfun ("lgammal_r" claylib/wrap::lgammal-r)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%signgamp (:pointer :int)))

(declaim (inline claylib/wrap::llrint))

(cffi:defcfun ("llrint" claylib/wrap::llrint)
              :long-long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::llrintf))

(cffi:defcfun ("llrintf" claylib/wrap::llrintf)
              :long-long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::llrintl))

(cffi:defcfun ("llrintl" claylib/wrap::llrintl)
              :long-long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::llround))

(cffi:defcfun ("llround" claylib/wrap::llround)
              :long-long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::llroundf))

(cffi:defcfun ("llroundf" claylib/wrap::llroundf)
              :long-long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::llroundl))

(cffi:defcfun ("llroundl" claylib/wrap::llroundl)
              :long-long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-log))

(cffi:defcfun ("log" claylib/wrap::c-log)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::log10))

(cffi:defcfun ("log10" claylib/wrap::log10)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::log10f))

(cffi:defcfun ("log10f" claylib/wrap::log10f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::log10l))

(cffi:defcfun ("log10l" claylib/wrap::log10l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::log1p))

(cffi:defcfun ("log1p" claylib/wrap::log1p)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::log1pf))

(cffi:defcfun ("log1pf" claylib/wrap::log1pf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::log1pl))

(cffi:defcfun ("log1pl" claylib/wrap::log1pl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::log2))

(cffi:defcfun ("log2" claylib/wrap::log2)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::log2f))

(cffi:defcfun ("log2f" claylib/wrap::log2f)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::log2l))

(cffi:defcfun ("log2l" claylib/wrap::log2l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::logb))

(cffi:defcfun ("logb" claylib/wrap::logb)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::logbf))

(cffi:defcfun ("logbf" claylib/wrap::logbf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::logbl))

(cffi:defcfun ("logbl" claylib/wrap::logbl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::logf))

(cffi:defcfun ("logf" claylib/wrap::logf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::logl))

(cffi:defcfun ("logl" claylib/wrap::logl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::lrint))

(cffi:defcfun ("lrint" claylib/wrap::lrint)
              :long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::lrintf))

(cffi:defcfun ("lrintf" claylib/wrap::lrintf)
              :long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::lrintl))

(cffi:defcfun ("lrintl" claylib/wrap::lrintl)
              :long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::lround))

(cffi:defcfun ("lround" claylib/wrap::lround)
              :long
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::lroundf))

(cffi:defcfun ("lroundf" claylib/wrap::lroundf)
              :long
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::lroundl))

(cffi:defcfun ("lroundl" claylib/wrap::lroundl)
              :long
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::modf))

(cffi:defcfun ("modf" claylib/wrap::modf)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%iptr (:pointer :double)))

(declaim (inline claylib/wrap::modff))

(cffi:defcfun ("modff" claylib/wrap::modff)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%iptr (:pointer :float)))

(declaim (inline claylib/wrap::modfl))

(cffi:defcfun ("modfl" claylib/wrap::modfl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%iptr
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nan))

(cffi:defcfun ("nan" claylib/wrap::nan)
              :double
              (claylib/wrap::%%tagb :string))

(declaim (inline claylib/wrap::nanf))

(cffi:defcfun ("nanf" claylib/wrap::nanf)
              :float
              (claylib/wrap::%%tagb :string))

(declaim (inline claylib/wrap::nanl))

(cffi:defcfun ("nanl" claylib/wrap::nanl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%tagb :string))

(declaim (inline claylib/wrap::nearbyint))

(cffi:defcfun ("nearbyint" claylib/wrap::nearbyint)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::nearbyintf))

(cffi:defcfun ("nearbyintf" claylib/wrap::nearbyintf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::nearbyintl))

(cffi:defcfun ("nearbyintl" claylib/wrap::nearbyintl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nextafter))

(cffi:defcfun ("nextafter" claylib/wrap::nextafter)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::nextafterf))

(cffi:defcfun ("nextafterf" claylib/wrap::nextafterf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::nextafterl))

(cffi:defcfun ("nextafterl" claylib/wrap::nextafterl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nexttoward))

(cffi:defcfun ("nexttoward" claylib/wrap::nexttoward)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nexttowardf))

(cffi:defcfun ("nexttowardf" claylib/wrap::nexttowardf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::nexttowardl))

(cffi:defcfun ("nexttowardl" claylib/wrap::nexttowardl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::pow))

(cffi:defcfun ("pow" claylib/wrap::pow)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::powf))

(cffi:defcfun ("powf" claylib/wrap::powf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::powl))

(cffi:defcfun ("powl" claylib/wrap::powl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::remainder))

(cffi:defcfun ("remainder" claylib/wrap::remainder)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double))

(declaim (inline claylib/wrap::remainderf))

(cffi:defcfun ("remainderf" claylib/wrap::remainderf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float))

(declaim (inline claylib/wrap::remainderl))

(cffi:defcfun ("remainderl" claylib/wrap::remainderl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::remquo))

(cffi:defcfun ("remquo" claylib/wrap::remquo)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%y :double)
              (claylib/wrap::%%quo (:pointer :int)))

(declaim (inline claylib/wrap::remquof))

(cffi:defcfun ("remquof" claylib/wrap::remquof)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%y :float)
              (claylib/wrap::%%quo (:pointer :int)))

(declaim (inline claylib/wrap::remquol))

(cffi:defcfun ("remquol" claylib/wrap::remquol)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%y
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%quo (:pointer :int)))

(declaim (inline claylib/wrap::rint))

(cffi:defcfun ("rint" claylib/wrap::rint)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::rintf))

(cffi:defcfun ("rintf" claylib/wrap::rintf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::rintl))

(cffi:defcfun ("rintl" claylib/wrap::rintl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-round))

(cffi:defcfun ("round" claylib/wrap::c-round)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::roundf))

(cffi:defcfun ("roundf" claylib/wrap::roundf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::roundl))

(cffi:defcfun ("roundl" claylib/wrap::roundl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::scalb))

(cffi:defcfun ("scalb" claylib/wrap::scalb)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%n :double))

(declaim (inline claylib/wrap::scalbf))

(cffi:defcfun ("scalbf" claylib/wrap::scalbf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%n :float))

(declaim (inline claylib/wrap::scalbl))

(cffi:defcfun ("scalbl" claylib/wrap::scalbl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%n
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::scalbln))

(cffi:defcfun ("scalbln" claylib/wrap::scalbln)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::scalblnf))

(cffi:defcfun ("scalblnf" claylib/wrap::scalblnf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::scalblnl))

(cffi:defcfun ("scalblnl" claylib/wrap::scalblnl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%n :long))

(declaim (inline claylib/wrap::scalbn))

(cffi:defcfun ("scalbn" claylib/wrap::scalbn)
              :double
              (claylib/wrap::%%x :double)
              (claylib/wrap::%%n :int))

(declaim (inline claylib/wrap::scalbnf))

(cffi:defcfun ("scalbnf" claylib/wrap::scalbnf)
              :float
              (claylib/wrap::%%x :float)
              (claylib/wrap::%%n :int))

(declaim (inline claylib/wrap::scalbnl))

(cffi:defcfun ("scalbnl" claylib/wrap::scalbnl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%n :int))

(declaim (inline claylib/wrap::significand))

(cffi:defcfun ("significand" claylib/wrap::significand)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::significandf))

(cffi:defcfun ("significandf" claylib/wrap::significandf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::significandl))

(cffi:defcfun ("significandl" claylib/wrap::significandl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-sin))

(cffi:defcfun ("sin" claylib/wrap::c-sin)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::sinf))

(cffi:defcfun ("sinf" claylib/wrap::sinf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-sinh))

(cffi:defcfun ("sinh" claylib/wrap::c-sinh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::sinhf))

(cffi:defcfun ("sinhf" claylib/wrap::sinhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::sinhl))

(cffi:defcfun ("sinhl" claylib/wrap::sinhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::sinl))

(cffi:defcfun ("sinl" claylib/wrap::sinl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-sqrt))

(cffi:defcfun ("sqrt" claylib/wrap::c-sqrt)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::sqrtf))

(cffi:defcfun ("sqrtf" claylib/wrap::sqrtf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::sqrtl))

(cffi:defcfun ("sqrtl" claylib/wrap::sqrtl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::c-tan))

(cffi:defcfun ("tan" claylib/wrap::c-tan)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::tanf))

(cffi:defcfun ("tanf" claylib/wrap::tanf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::c-tanh))

(cffi:defcfun ("tanh" claylib/wrap::c-tanh)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::tanhf))

(cffi:defcfun ("tanhf" claylib/wrap::tanhf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::tanhl))

(cffi:defcfun ("tanhl" claylib/wrap::tanhl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::tanl))

(cffi:defcfun ("tanl" claylib/wrap::tanl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::tgamma))

(cffi:defcfun ("tgamma" claylib/wrap::tgamma)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::tgammaf))

(cffi:defcfun ("tgammaf" claylib/wrap::tgammaf)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::tgammal))

(cffi:defcfun ("tgammal" claylib/wrap::tgammal)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::trunc))

(cffi:defcfun ("trunc" claylib/wrap::trunc)
              :double
              (claylib/wrap::%%x :double))

(declaim (inline claylib/wrap::truncf))

(cffi:defcfun ("truncf" claylib/wrap::truncf)
              :float
              (claylib/wrap::%%x :float))

(declaim (inline claylib/wrap::truncl))

(cffi:defcfun ("truncl" claylib/wrap::truncl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::%%x
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::y0))

(cffi:defcfun ("y0" claylib/wrap::y0)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::y0f))

(cffi:defcfun ("y0f" claylib/wrap::y0f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::y0l))

(cffi:defcfun ("y0l" claylib/wrap::y0l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::y1))

(cffi:defcfun ("y1" claylib/wrap::y1)
              :double
              (claylib/wrap::arg0 :double))

(declaim (inline claylib/wrap::y1f))

(cffi:defcfun ("y1f" claylib/wrap::y1f)
              :float
              (claylib/wrap::arg0 :float))

(declaim (inline claylib/wrap::y1l))

(cffi:defcfun ("y1l" claylib/wrap::y1l)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0
               (:pointer claylib/wrap::long-double)))

(declaim (inline claylib/wrap::yn))

(cffi:defcfun ("yn" claylib/wrap::yn)
              :double
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :double))

(declaim (inline claylib/wrap::ynf))

(cffi:defcfun ("ynf" claylib/wrap::ynf)
              :float
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1 :float))

(declaim (inline claylib/wrap::ynl))

(cffi:defcfun ("ynl" claylib/wrap::ynl)
              (:pointer claylib/wrap::long-double)
              (claylib/wrap::%%claw-result-
               (:pointer claylib/wrap::long-double))
              (claylib/wrap::arg0 :int)
              (claylib/wrap::arg1
               (:pointer claylib/wrap::long-double)))

(cffi:defcstruct (claylib/wrap::gui-style-prop :size 8)
                 (claylib/wrap::control-id :unsigned-short :offset 0)
                 (claylib/wrap::property-id :unsigned-short :offset
                  2)
                 (claylib/wrap::property-value :unsigned-int :offset
                  4))

(cffi:defcstruct (claylib/wrap::|C:@SA@--FSID-T| :size 8)
                 (claylib/wrap::%%val :int :count 2 :offset 0))

(cffi:defctype claylib/wrap::blend-mode
               claylib/wrap::|C:@EA@BLEND-MODE|)

(cffi:defctype claylib/wrap::camera-mode
               claylib/wrap::|C:@EA@CAMERA-MODE|)

(cffi:defctype claylib/wrap::camera-projection
               claylib/wrap::|C:@EA@CAMERA-PROJECTION|)

(cffi:defctype claylib/wrap::config-flags
               claylib/wrap::|C:@EA@CONFIG-FLAGS|)

(cffi:defctype claylib/wrap::cubemap-layout
               claylib/wrap::|C:@EA@CUBEMAP-LAYOUT|)

(cffi:defctype claylib/wrap::font-type
               claylib/wrap::|C:@EA@FONT-TYPE|)

(cffi:defctype claylib/wrap::gamepad-axis
               claylib/wrap::|C:@EA@GAMEPAD-AXIS|)

(cffi:defctype claylib/wrap::gamepad-button
               claylib/wrap::|C:@EA@GAMEPAD-BUTTON|)

(cffi:defctype claylib/wrap::gesture claylib/wrap::|C:@EA@GESTURE|)

(cffi:defctype claylib/wrap::gui-check-box-property
               claylib/wrap::|C:@EA@GUI-CHECK-BOX-PROPERTY|)

(cffi:defctype claylib/wrap::gui-color-picker-property
               claylib/wrap::|C:@EA@GUI-COLOR-PICKER-PROPERTY|)

(cffi:defctype claylib/wrap::gui-combo-box-property
               claylib/wrap::|C:@EA@GUI-COMBO-BOX-PROPERTY|)

(cffi:defctype claylib/wrap::gui-control
               claylib/wrap::|C:@EA@GUI-CONTROL|)

(cffi:defctype claylib/wrap::gui-control-property
               claylib/wrap::|C:@EA@GUI-CONTROL-PROPERTY|)

(cffi:defctype claylib/wrap::gui-default-property
               claylib/wrap::|C:@EA@GUI-DEFAULT-PROPERTY|)

(cffi:defctype claylib/wrap::gui-dropdown-box-property
               claylib/wrap::|C:@EA@GUI-DROPDOWN-BOX-PROPERTY|)

(cffi:defctype claylib/wrap::gui-icon-name
               claylib/wrap::|C:@EA@GUI-ICON-NAME|)

(cffi:defctype claylib/wrap::gui-list-view-property
               claylib/wrap::|C:@EA@GUI-LIST-VIEW-PROPERTY|)

(cffi:defctype claylib/wrap::gui-progress-bar-property
               claylib/wrap::|C:@EA@GUI-PROGRESS-BAR-PROPERTY|)

(cffi:defctype claylib/wrap::gui-scroll-bar-property
               claylib/wrap::|C:@EA@GUI-SCROLL-BAR-PROPERTY|)

(cffi:defctype claylib/wrap::gui-slider-property
               claylib/wrap::|C:@EA@GUI-SLIDER-PROPERTY|)

(cffi:defctype claylib/wrap::gui-spinner-property
               claylib/wrap::|C:@EA@GUI-SPINNER-PROPERTY|)

(cffi:defctype claylib/wrap::gui-state
               claylib/wrap::|C:@EA@GUI-STATE|)

(cffi:defctype claylib/wrap::gui-text-alignment
               claylib/wrap::|C:@EA@GUI-TEXT-ALIGNMENT|)

(cffi:defctype claylib/wrap::gui-text-box-property
               claylib/wrap::|C:@EA@GUI-TEXT-BOX-PROPERTY|)

(cffi:defctype claylib/wrap::gui-toggle-property
               claylib/wrap::|C:@EA@GUI-TOGGLE-PROPERTY|)

(cffi:defctype claylib/wrap::keyboard-key
               claylib/wrap::|C:@EA@KEYBOARD-KEY|)

(cffi:defctype claylib/wrap::material-map-index
               claylib/wrap::|C:@EA@MATERIAL-MAP-INDEX|)

(cffi:defctype claylib/wrap::mouse-button
               claylib/wrap::|C:@EA@MOUSE-BUTTON|)

(cffi:defctype claylib/wrap::mouse-cursor
               claylib/wrap::|C:@EA@MOUSE-CURSOR|)

(cffi:defctype claylib/wrap::n-patch-layout
               claylib/wrap::|C:@EA@N-PATCH-LAYOUT|)

(cffi:defctype claylib/wrap::pixel-format
               claylib/wrap::|C:@EA@PIXEL-FORMAT|)

(cffi:defctype claylib/wrap::shader-attribute-data-type
               claylib/wrap::|C:@EA@SHADER-ATTRIBUTE-DATA-TYPE|)

(cffi:defctype claylib/wrap::shader-location-index
               claylib/wrap::|C:@EA@SHADER-LOCATION-INDEX|)

(cffi:defctype claylib/wrap::shader-uniform-data-type
               claylib/wrap::|C:@EA@SHADER-UNIFORM-DATA-TYPE|)

(cffi:defctype claylib/wrap::texture-filter
               claylib/wrap::|C:@EA@TEXTURE-FILTER|)

(cffi:defctype claylib/wrap::texture-wrap
               claylib/wrap::|C:@EA@TEXTURE-WRAP|)

(cffi:defctype claylib/wrap::trace-log-level
               claylib/wrap::|C:@EA@TRACE-LOG-LEVEL|)

(cffi:defctype claylib/wrap::%%fsid-t
               (:struct claylib/wrap::|C:@SA@--FSID-T|))

(define-symbol-macro
  claylib/wrap::*signgam*
  (let ((claylib/wrap::ptr (cffi:foreign-symbol-pointer "signgam")))
    (when claylib/wrap::ptr (cffi:mem-ref claylib/wrap::ptr ':int))))

(cffi:defctype claylib/wrap::%float32 :float)

(cffi:defctype claylib/wrap::%float32x :double)

(cffi:defctype claylib/wrap::%float64 :double)

(cffi:defctype claylib/wrap::%float64x claylib/wrap::long-double)

(cffi:defctype claylib/wrap::double-t :double)

(cffi:defctype claylib/wrap::float-t :float)

(cffi:defctype claylib/wrap::gui-style-prop
               (:struct claylib/wrap::gui-style-prop))

(cffi:defctype claylib/wrap::render-texture
               (:struct claylib/wrap::render-texture))

(cffi:defctype claylib/wrap::%%gnuc-va-list :string)

(cffi:defctype claylib/wrap::%%blkcnt64-t :long)

(cffi:defctype claylib/wrap::%%blkcnt-t :long)

(cffi:defctype claylib/wrap::%%blksize-t :long)

(cffi:defctype claylib/wrap::%%caddr-t :string)

(cffi:defctype claylib/wrap::%%clock-t :long)

(cffi:defctype claylib/wrap::%%clockid-t :int)

(cffi:defctype claylib/wrap::%%daddr-t :int)

(cffi:defctype claylib/wrap::%%dev-t :unsigned-long)

(cffi:defctype claylib/wrap::%%fsblkcnt64-t :unsigned-long)

(cffi:defctype claylib/wrap::%%fsblkcnt-t :unsigned-long)

(cffi:defctype claylib/wrap::%%fsfilcnt64-t :unsigned-long)

(cffi:defctype claylib/wrap::%%fsfilcnt-t :unsigned-long)

(cffi:defctype claylib/wrap::%%fsword-t :long)

(cffi:defctype claylib/wrap::%%gid-t :unsigned-int)

(cffi:defctype claylib/wrap::%%id-t :unsigned-int)

(cffi:defctype claylib/wrap::%%ino64-t :unsigned-long)

(cffi:defctype claylib/wrap::%%ino-t :unsigned-long)

(cffi:defctype claylib/wrap::%%int16-t :short)

(cffi:defctype claylib/wrap::%%int32-t :int)

(cffi:defctype claylib/wrap::%%int64-t :long)

(cffi:defctype claylib/wrap::%%int8-t :char)

(cffi:defctype claylib/wrap::%%int-least16-t :short)

(cffi:defctype claylib/wrap::%%int-least32-t :int)

(cffi:defctype claylib/wrap::%%int-least64-t :long)

(cffi:defctype claylib/wrap::%%int-least8-t :char)

(cffi:defctype claylib/wrap::%%intmax-t :long)

(cffi:defctype claylib/wrap::%%intptr-t :long)

(cffi:defctype claylib/wrap::%%key-t :int)

(cffi:defctype claylib/wrap::%%loff-t :long)

(cffi:defctype claylib/wrap::%%mode-t :unsigned-int)

(cffi:defctype claylib/wrap::%%nlink-t :unsigned-long)

(cffi:defctype claylib/wrap::%%off64-t :long)

(cffi:defctype claylib/wrap::%%off-t :long)

(cffi:defctype claylib/wrap::%%pid-t :int)

(cffi:defctype claylib/wrap::%%quad-t :long)

(cffi:defctype claylib/wrap::%%rlim64-t :unsigned-long)

(cffi:defctype claylib/wrap::%%rlim-t :unsigned-long)

(cffi:defctype claylib/wrap::%%sig-atomic-t :int)

(cffi:defctype claylib/wrap::%%socklen-t :unsigned-int)

(cffi:defctype claylib/wrap::%%ssize-t :long)

(cffi:defctype claylib/wrap::%%suseconds64-t :long)

(cffi:defctype claylib/wrap::%%suseconds-t :long)

(cffi:defctype claylib/wrap::%%syscall-slong-t :long)

(cffi:defctype claylib/wrap::%%syscall-ulong-t :unsigned-long)

(cffi:defctype claylib/wrap::%%time-t :long)

(cffi:defctype claylib/wrap::%%timer-t (:pointer :void))

(cffi:defctype claylib/wrap::%%u-char :unsigned-char)

(cffi:defctype claylib/wrap::%%u-int :unsigned-int)

(cffi:defctype claylib/wrap::%%u-long :unsigned-long)

(cffi:defctype claylib/wrap::%%u-quad-t :unsigned-long)

(cffi:defctype claylib/wrap::%%u-short :unsigned-short)

(cffi:defctype claylib/wrap::%%uid-t :unsigned-int)

(cffi:defctype claylib/wrap::%%uint16-t :unsigned-short)

(cffi:defctype claylib/wrap::%%uint32-t :unsigned-int)

(cffi:defctype claylib/wrap::%%uint64-t :unsigned-long)

(cffi:defctype claylib/wrap::%%uint8-t :unsigned-char)

(cffi:defctype claylib/wrap::%%uint-least16-t :unsigned-short)

(cffi:defctype claylib/wrap::%%uint-least32-t :unsigned-int)

(cffi:defctype claylib/wrap::%%uint-least64-t :unsigned-long)

(cffi:defctype claylib/wrap::%%uint-least8-t :unsigned-char)

(cffi:defctype claylib/wrap::%%uintmax-t :unsigned-long)

(cffi:defctype claylib/wrap::%%useconds-t :unsigned-int)

(cffi:defctype claylib/wrap::va-list (:pointer :void))

(eval-when (:load-toplevel :compile-toplevel :execute)
  (export 'claylib/wrap::%%iseqsigl :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least64-max--+ :claylib/wrap)
  (export 'claylib/wrap::gui-dropdown-box-property :claylib/wrap)
  (export 'claylib/wrap::%%clock-t :claylib/wrap)
  (export 'claylib/wrap::image-draw-pixel :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-pure--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uintmax-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::vector3clamp-value :claylib/wrap)
  (export 'claylib/wrap::c-atan :claylib/wrap)
  (export 'claylib/wrap::gui-text-box :claylib/wrap)
  (export 'claylib/wrap::+%%int32-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-STATE| :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanhl+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10f64x+ :claylib/wrap)
  (export 'claylib/wrap::+epsilon+ :claylib/wrap)
  (export 'claylib/wrap::+%%flt-has-infinity--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint8-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-denorm-min--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint32-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincosf+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfl+ :claylib/wrap)
  (export 'claylib/wrap::vector2dot-product :claylib/wrap)
  (export 'claylib/wrap::quaternion-add :claylib/wrap)
  (export 'claylib/wrap::text-find-index :claylib/wrap)
  (export 'claylib/wrap::m8 :claylib/wrap)
  (export 'claylib/wrap::+%%user-label-prefix--+ :claylib/wrap)
  (export 'claylib/wrap::%%fmin :claylib/wrap)
  (export 'claylib/wrap::clear-window-state :claylib/wrap)
  (export 'claylib/wrap::%%nextafter :claylib/wrap)
  (export 'claylib/wrap::parent :claylib/wrap)
  (export 'claylib/wrap::+%features-h+ :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-epsilon--+ :claylib/wrap)
  (export 'claylib/wrap::+math-errexcept+ :claylib/wrap)
  (export 'claylib/wrap::%%atanhf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expf128+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acoshf32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acoshl+ :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-llong-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10f+ :claylib/wrap)
  (export 'claylib/wrap::draw-circle-v :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expf16+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint64-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::update-camera :claylib/wrap)
  (export 'claylib/wrap::gui-get-icon-data :claylib/wrap)
  (export 'claylib/wrap::+%%have-distinct-float64+ :claylib/wrap)
  (export 'claylib/wrap::+%%int8-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::chroma-ab-correction :claylib/wrap)
  (export 'claylib/wrap::projection :claylib/wrap)
  (export 'claylib/wrap::+%%uint8-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::c-stream :claylib/wrap)
  (export 'claylib/wrap::gui-text-input-box :claylib/wrap)
  (export 'claylib/wrap::erfcl :claylib/wrap)
  (export 'claylib/wrap::v :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1pl+ :claylib/wrap)
  (export 'claylib/wrap::+%%opencl-memory-scope-all-svm-devices+
          :claylib/wrap)
  (export 'claylib/wrap::text-copy :claylib/wrap)
  (export 'claylib/wrap::gui-style-prop :claylib/wrap)
  (export 'claylib/wrap::jnl :claylib/wrap)
  (export 'claylib/wrap::+%%k8--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint32-type--+ :claylib/wrap)
  (export 'claylib/wrap::%%gammal :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-quad :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast8-max--+ :claylib/wrap)
  (export 'claylib/wrap::m15 :claylib/wrap)
  (export 'claylib/wrap::+%%opencl-memory-scope-work-item+
          :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expf32+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosf16+ :claylib/wrap)
  (export 'claylib/wrap::w :claylib/wrap)
  (export 'claylib/wrap::%%frexp :claylib/wrap)
  (export 'claylib/wrap::gui-load-style :claylib/wrap)
  (export 'claylib/wrap::draw-ring :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1f64x+ :claylib/wrap)
  (export 'claylib/wrap::+magenta+ :claylib/wrap)
  (export 'claylib/wrap::+fp-ilogb0+ :claylib/wrap)
  (export 'claylib/wrap::%%erf :claylib/wrap)
  (export 'claylib/wrap::load-render-texture :claylib/wrap)
  (export 'claylib/wrap::load-file-text-callback :claylib/wrap)
  (export 'claylib/wrap::get-shader-location :claylib/wrap)
  (export 'claylib/wrap::wave-format :claylib/wrap)
  (export 'claylib/wrap::+%%int32-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::is-window-state :claylib/wrap)
  (export 'claylib/wrap::+lightgray+ :claylib/wrap)
  (export 'claylib/wrap::+%%ino-t-type+ :claylib/wrap)
  (export 'claylib/wrap::unload-music-stream :claylib/wrap)
  (export 'claylib/wrap::+%%bool-true-false-are-defined+
          :claylib/wrap)
  (export 'claylib/wrap::%%sinl :claylib/wrap)
  (export 'claylib/wrap::gui-get-style :claylib/wrap)
  (export 'claylib/wrap::+material-map-specular+ :claylib/wrap)
  (export 'claylib/wrap::get-screen-width :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-double--+ :claylib/wrap)
  (export 'claylib/wrap::+%%claw-uberheader+ :claylib/wrap)
  (export 'claylib/wrap::vector2equals :claylib/wrap)
  (export 'claylib/wrap::%%dremf :claylib/wrap)
  (export 'claylib/wrap::gui-load-style-default :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanf16+ :claylib/wrap)
  (export 'claylib/wrap::check-collision-boxes :claylib/wrap)
  (export 'claylib/wrap::%%llrintl :claylib/wrap)
  (export 'claylib/wrap::texture2d :claylib/wrap)
  (export 'claylib/wrap::+%%s32-type+ :claylib/wrap)
  (export 'claylib/wrap::gui-group-box :claylib/wrap)
  (export 'claylib/wrap::asinhl :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-iec-60559-bfp-ext+
          :claylib/wrap)
  (export 'claylib/wrap::+%%suseconds-t-type+ :claylib/wrap)
  (export 'claylib/wrap::%%truncl :claylib/wrap)
  (export 'claylib/wrap::%%remainder :claylib/wrap)
  (export 'claylib/wrap::remainderf :claylib/wrap)
  (export 'claylib/wrap::+%%have-distinct-float128x+ :claylib/wrap)
  (export 'claylib/wrap::image-alpha-mask :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-logf16+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-logf128+ :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-max-exp--+ :claylib/wrap)
  (export 'claylib/wrap::get-prev-directory-path :claylib/wrap)
  (export 'claylib/wrap::gui-text-box-multi :claylib/wrap)
  (export 'claylib/wrap::b :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-warn-unused-result--+
          :claylib/wrap)
  (export 'claylib/wrap::draw-texture-quad :claylib/wrap)
  (export 'claylib/wrap::vector2clamp :claylib/wrap)
  (export 'claylib/wrap::+%%timer-t-type+ :claylib/wrap)
  (export 'claylib/wrap::c-floor :claylib/wrap)
  (export 'claylib/wrap::m12 :claylib/wrap)
  (export 'claylib/wrap::+%%math-precname+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-least16-max--+ :claylib/wrap)
  (export 'claylib/wrap::is-key-up :claylib/wrap)
  (export 'claylib/wrap::+%va-list+ :claylib/wrap)
  (export 'claylib/wrap::gui-check-icon-pixel :claylib/wrap)
  (export 'claylib/wrap::clamp :claylib/wrap)
  (export 'claylib/wrap::+%%have-distinct-float16+ :claylib/wrap)
  (export 'claylib/wrap::isinff :claylib/wrap)
  (export 'claylib/wrap::+%%ino64-t-type+ :claylib/wrap)
  (export 'claylib/wrap::set-pixel-color :claylib/wrap)
  (export 'claylib/wrap::gen-image-gradient-radial :claylib/wrap)
  (export 'claylib/wrap::draw-circle3d :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-CHECK-BOX-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-coshf128+ :claylib/wrap)
  (export 'claylib/wrap::vector3length :claylib/wrap)
  (export 'claylib/wrap::normals :claylib/wrap)
  (export 'claylib/wrap::draw-poly :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-powl+ :claylib/wrap)
  (export 'claylib/wrap::draw-circle :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-denorm-min--+ :claylib/wrap)
  (export 'claylib/wrap::+%posix-c-source+ :claylib/wrap)
  (export 'claylib/wrap::floorl :claylib/wrap)
  (export 'claylib/wrap::gui-combo-box :claylib/wrap)
  (export 'claylib/wrap::copysignl :claylib/wrap)
  (export 'claylib/wrap::gui-enable :claylib/wrap)
  (export 'claylib/wrap::maps :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanh+ :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-used--+ :claylib/wrap)
  (export 'claylib/wrap::c-count :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2f16+ :claylib/wrap)
  (export 'claylib/wrap::+%%clang-version--+ :claylib/wrap)
  (export 'claylib/wrap::+%%wchar-type--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint8-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uintmax-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::roundl :claylib/wrap)
  (export 'claylib/wrap::vector2divide :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinl+ :claylib/wrap)
  (export 'claylib/wrap::vector2one :claylib/wrap)
  (export 'claylib/wrap::+%%sse2--+ :claylib/wrap)
  (export 'claylib/wrap::vector3add-value :claylib/wrap)
  (export 'claylib/wrap::tanhf :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-min-exp--+ :claylib/wrap)
  (export 'claylib/wrap::+%%timesize+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1f64+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast64-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::+%%version--+ :claylib/wrap)
  (export 'claylib/wrap::%%erfl :claylib/wrap)
  (export 'claylib/wrap::%%asinl :claylib/wrap)
  (export 'claylib/wrap::+%%always-inline+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast64-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::vector3clamp :claylib/wrap)
  (export 'claylib/wrap::+%%thrownl+ :claylib/wrap)
  (export 'claylib/wrap::+%bits-types-h+ :claylib/wrap)
  (export 'claylib/wrap::%%j0 :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosf64x+ :claylib/wrap)
  (export 'claylib/wrap::id :claylib/wrap)
  (export 'claylib/wrap::%%log1pf :claylib/wrap)
  (export 'claylib/wrap::%%hypotf :claylib/wrap)
  (export 'claylib/wrap::camera-projection :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-coshf128x+ :claylib/wrap)
  (export 'claylib/wrap::set-target-fps :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least32-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::%%frexpf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypotf+ :claylib/wrap)
  (export 'claylib/wrap::+%%uid-t-type+ :claylib/wrap)
  (export 'claylib/wrap::image-draw-rectangle :claylib/wrap)
  (export 'claylib/wrap::%%expm1 :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate :claylib/wrap)
  (export 'claylib/wrap::+raymath-h+ :claylib/wrap)
  (export 'claylib/wrap::vbo-id :claylib/wrap)
  (export 'claylib/wrap::set-window-opacity :claylib/wrap)
  (export 'claylib/wrap::+%%ptr-t+ :claylib/wrap)
  (export 'claylib/wrap::+%%mmx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-coshl+ :claylib/wrap)
  (export 'claylib/wrap::end-shader-mode :claylib/wrap)
  (export 'claylib/wrap::render-texture :claylib/wrap)
  (export 'claylib/wrap::c-cos :claylib/wrap)
  (export 'claylib/wrap::+%%have-float16+ :claylib/wrap)
  (export 'claylib/wrap::camera2d :claylib/wrap)
  (export 'claylib/wrap::+%%atomic-seq-cst+ :claylib/wrap)
  (export 'claylib/wrap::expf :claylib/wrap)
  (export 'claylib/wrap::+scrollbar-right-side+ :claylib/wrap)
  (export 'claylib/wrap::is-mouse-button-up :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinhf64x+ :claylib/wrap)
  (export 'claylib/wrap::%%scalbf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2+ :claylib/wrap)
  (export 'claylib/wrap::+%%sse2-math--+ :claylib/wrap)
  (export 'claylib/wrap::%%finitel :claylib/wrap)
  (export 'claylib/wrap::%%j1l :claylib/wrap)
  (export 'claylib/wrap::%%lgammaf :claylib/wrap)
  (export 'claylib/wrap::get-mouse-x :claylib/wrap)
  (export 'claylib/wrap::g :claylib/wrap)
  (export 'claylib/wrap::%%coshf :claylib/wrap)
  (export 'claylib/wrap::load-font-from-image :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinhf32+ :claylib/wrap)
  (export 'claylib/wrap::finite :claylib/wrap)
  (export 'claylib/wrap::cubemap-layout :claylib/wrap)
  (export 'claylib/wrap::gui-line :claylib/wrap)
  (export 'claylib/wrap::+%%uint32-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least32-type--+ :claylib/wrap)
  (export 'claylib/wrap::fmaxl :claylib/wrap)
  (export 'claylib/wrap::+%%cfloat32x+ :claylib/wrap)
  (export 'claylib/wrap::cbrtf :claylib/wrap)
  (export 'claylib/wrap::vector3divide :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-powf16+ :claylib/wrap)
  (export 'claylib/wrap::is-cursor-on-screen :claylib/wrap)
  (export 'claylib/wrap::+%%extern-always-inline+ :claylib/wrap)
  (export 'claylib/wrap::frame-count :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least8-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::+%%intptr-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::+%%schar-max--+ :claylib/wrap)
  (export 'claylib/wrap::%%socklen-t :claylib/wrap)
  (export 'claylib/wrap::load-image-from-texture :claylib/wrap)
  (export 'claylib/wrap::%%blksize-t :claylib/wrap)
  (export 'claylib/wrap::+%%size-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::is-mouse-button-down :claylib/wrap)
  (export 'claylib/wrap::check-collision-spheres :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2f32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least16-max--+ :claylib/wrap)
  (export 'claylib/wrap::%%remquol :claylib/wrap)
  (export 'claylib/wrap::gui-label-button :claylib/wrap)
  (export 'claylib/wrap::get-touch-point-count :claylib/wrap)
  (export 'claylib/wrap::%%asinh :claylib/wrap)
  (export 'claylib/wrap::+raygui-version+ :claylib/wrap)
  (export 'claylib/wrap::set-window-monitor :claylib/wrap)
  (export 'claylib/wrap::get-model-bounding-box :claylib/wrap)
  (export 'claylib/wrap::+%%clock-t-type+ :claylib/wrap)
  (export 'claylib/wrap::image-copy :claylib/wrap)
  (export 'claylib/wrap::+%%mathdecl-alias+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expl+ :claylib/wrap)
  (export 'claylib/wrap::%%significandl :claylib/wrap)
  (export 'claylib/wrap::+%%uint8-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+red+ :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-decimal-dig--+ :claylib/wrap)
  (export 'claylib/wrap::get-monitor-count :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@KEYBOARD-KEY| :claylib/wrap)
  (export 'claylib/wrap::vector2negate :claylib/wrap)
  (export 'claylib/wrap::set-gestures-enabled :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erff128+ :claylib/wrap)
  (export 'claylib/wrap::draw-texture-pro :claylib/wrap)
  (export 'claylib/wrap::c-position :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10f64+ :claylib/wrap)
  (export 'claylib/wrap::y0f :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acoshf32+ :claylib/wrap)
  (export 'claylib/wrap::%%pow :claylib/wrap)
  (export 'claylib/wrap::%%lroundf :claylib/wrap)
  (export 'claylib/wrap::%%tanhf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosf32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-min--+ :claylib/wrap)
  (export 'claylib/wrap::remquol :claylib/wrap)
  (export 'claylib/wrap::m2 :claylib/wrap)
  (export 'claylib/wrap::matrix-trace :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosf64x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least64-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::atanf :claylib/wrap)
  (export 'claylib/wrap::+%%squad-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%char16-type--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least32-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::%%rint :claylib/wrap)
  (export 'claylib/wrap::+rl-color-type+ :claylib/wrap)
  (export 'claylib/wrap::end-texture-mode :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-min-10-exp--+ :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-lib-ext2+ :claylib/wrap)
  (export 'claylib/wrap::tanhl :claylib/wrap)
  (export 'claylib/wrap::+%%u64-type+ :claylib/wrap)
  (export 'claylib/wrap::erf :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast32-type--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1pf32x+ :claylib/wrap)
  (export 'claylib/wrap::stop-audio-stream :claylib/wrap)
  (export 'claylib/wrap::c-max :claylib/wrap)
  (export 'claylib/wrap::draw-poly-lines-ex :claylib/wrap)
  (export 'claylib/wrap::update-texture :claylib/wrap)
  (export 'claylib/wrap::draw-texture-tiled :claylib/wrap)
  (export 'claylib/wrap::+%%u16-type+ :claylib/wrap)
  (export 'claylib/wrap::gui-set-font :claylib/wrap)
  (export 'claylib/wrap::j1f :claylib/wrap)
  (export 'claylib/wrap::fmodl :claylib/wrap)
  (export 'claylib/wrap::%%nanf :claylib/wrap)
  (export 'claylib/wrap::%%remainderf :claylib/wrap)
  (export 'claylib/wrap::vector2add :claylib/wrap)
  (export 'claylib/wrap::+%%useconds-t-type+ :claylib/wrap)
  (export 'claylib/wrap::vector2subtract-value :claylib/wrap)
  (export 'claylib/wrap::%%gammaf :claylib/wrap)
  (export 'claylib/wrap::matrix-ortho :claylib/wrap)
  (export 'claylib/wrap::+%%sse--+ :claylib/wrap)
  (export 'claylib/wrap::texture-filter :claylib/wrap)
  (export 'claylib/wrap::get-pixel-color :claylib/wrap)
  (export 'claylib/wrap::+%%opencl-memory-scope-sub-group+
          :claylib/wrap)
  (export 'claylib/wrap::is-key-released :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypotf32+ :claylib/wrap)
  (export 'claylib/wrap::+%%amd64--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrtf32+ :claylib/wrap)
  (export 'claylib/wrap::nanf :claylib/wrap)
  (export 'claylib/wrap::config-flags :claylib/wrap)
  (export 'claylib/wrap::+%%cfloat64x+ :claylib/wrap)
  (export 'claylib/wrap::%%truncf :claylib/wrap)
  (export 'claylib/wrap::left-screen-center :claylib/wrap)
  (export 'claylib/wrap::seek-music-stream :claylib/wrap)
  (export 'claylib/wrap::+%%extern-inline+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrt+ :claylib/wrap)
  (export 'claylib/wrap::%%ynl :claylib/wrap)
  (export 'claylib/wrap::%%floorl :claylib/wrap)
  (export 'claylib/wrap::%%y1l :claylib/wrap)
  (export 'claylib/wrap::%%expm1f :claylib/wrap)
  (export 'claylib/wrap::c-sqrt :claylib/wrap)
  (export 'claylib/wrap::%%fsblkcnt-t :claylib/wrap)
  (export 'claylib/wrap::+shader-loc-map-specular+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-COLOR-PICKER-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::+%%flt-epsilon--+ :claylib/wrap)
  (export 'claylib/wrap::gui-progress-bar-property :claylib/wrap)
  (export 'claylib/wrap::x :claylib/wrap)
  (export 'claylib/wrap::+%%throw+ :claylib/wrap)
  (export 'claylib/wrap::fabs :claylib/wrap)
  (export 'claylib/wrap::log2l :claylib/wrap)
  (export 'claylib/wrap::%%scalbln :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincosf16+ :claylib/wrap)
  (export 'claylib/wrap::control-id :claylib/wrap)
  (export 'claylib/wrap::logb :claylib/wrap)
  (export 'claylib/wrap::%%powl :claylib/wrap)
  (export 'claylib/wrap::show-cursor :claylib/wrap)
  (export 'claylib/wrap::load-font-from-memory :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfc+ :claylib/wrap)
  (export 'claylib/wrap::lroundl :claylib/wrap)
  (export 'claylib/wrap::+%%use-atfile+ :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-min-10-exp--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanf32+ :claylib/wrap)
  (export 'claylib/wrap::+black+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10l+ :claylib/wrap)
  (export 'claylib/wrap::offset-y :claylib/wrap)
  (export 'claylib/wrap::rintl :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincosl+ :claylib/wrap)
  (export 'claylib/wrap::unload-model-keep-meshes :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2l+ :claylib/wrap)
  (export 'claylib/wrap::right-screen-center :claylib/wrap)
  (export 'claylib/wrap::z :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinhf+ :claylib/wrap)
  (export 'claylib/wrap::unload-image-colors :claylib/wrap)
  (export 'claylib/wrap::%%y1 :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-CONTROL-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::%%u-int :claylib/wrap)
  (export 'claylib/wrap::+huge-valf+ :claylib/wrap)
  (export 'claylib/wrap::gui-icon-name :claylib/wrap)
  (export 'claylib/wrap::fmax :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-char32-t-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::%%fpclassifyl :claylib/wrap)
  (export 'claylib/wrap::is-window-minimized :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erff+ :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-maybe-unused--+ :claylib/wrap)
  (export 'claylib/wrap::value :claylib/wrap)
  (export 'claylib/wrap::set-config-flags :claylib/wrap)
  (export 'claylib/wrap::j1 :claylib/wrap)
  (export 'claylib/wrap::top :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanf128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%wchar-unsigned--+ :claylib/wrap)
  (export 'claylib/wrap::get-render-height :claylib/wrap)
  (export 'claylib/wrap::+%%flt-has-quiet-nan--+ :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-torus :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expf128x+ :claylib/wrap)
  (export 'claylib/wrap::%%uint-least32-t :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincosf128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acos+ :claylib/wrap)
  (export 'claylib/wrap::gui-toggle :claylib/wrap)
  (export 'claylib/wrap::%%int-least64-t :claylib/wrap)
  (export 'claylib/wrap::atan2l :claylib/wrap)
  (export 'claylib/wrap::set-exit-key :claylib/wrap)
  (export 'claylib/wrap::%%int64-t :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-hemi-sphere :claylib/wrap)
  (export 'claylib/wrap::j0f :claylib/wrap)
  (export 'claylib/wrap::%%nlink-t :claylib/wrap)
  (export 'claylib/wrap::c-log :claylib/wrap)
  (export 'claylib/wrap::+%%ptrdiff-width--+ :claylib/wrap)
  (export 'claylib/wrap::nextafter :claylib/wrap)
  (export 'claylib/wrap::%%y1f :claylib/wrap)
  (export 'claylib/wrap::%%finite :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfcf+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint16-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast8-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::%%ino-t :claylib/wrap)
  (export 'claylib/wrap::+%%mathcall+ :claylib/wrap)
  (export 'claylib/wrap::y :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast64-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%ptrdiff-max--+ :claylib/wrap)
  (export 'claylib/wrap::check-collision-circles :claylib/wrap)
  (export 'claylib/wrap::end-scissor-mode :claylib/wrap)
  (export 'claylib/wrap::draw-pixel :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-pan :claylib/wrap)
  (export 'claylib/wrap::nexttowardf :claylib/wrap)
  (export 'claylib/wrap::+%sys-cdefs-h+ :claylib/wrap)
  (export 'claylib/wrap::unload-dropped-files :claylib/wrap)
  (export 'claylib/wrap::draw-point3d :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1p+ :claylib/wrap)
  (export 'claylib/wrap::material-map :claylib/wrap)
  (export 'claylib/wrap::erfcf :claylib/wrap)
  (export 'claylib/wrap::is-audio-stream-playing :claylib/wrap)
  (export 'claylib/wrap::get-window-scale-dpi :claylib/wrap)
  (export 'claylib/wrap::vector2invert :claylib/wrap)
  (export 'claylib/wrap::+%%returns-nonnull+ :claylib/wrap)
  (export 'claylib/wrap::text-subtext :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erff32+ :claylib/wrap)
  (export 'claylib/wrap::measure-text :claylib/wrap)
  (export 'claylib/wrap::%%significandf :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast32-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::music :claylib/wrap)
  (export 'claylib/wrap::+%%stdc-iec-60559-bfp--+ :claylib/wrap)
  (export 'claylib/wrap::property-id :claylib/wrap)
  (export 'claylib/wrap::+%%clang-wide-literal-encoding--+
          :claylib/wrap)
  (export 'claylib/wrap::vector3min :claylib/wrap)
  (export 'claylib/wrap::+%%sword-type+ :claylib/wrap)
  (export 'claylib/wrap::image-text :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-SCROLL-BAR-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanhf32x+ :claylib/wrap)
  (export 'claylib/wrap::text-insert :claylib/wrap)
  (export 'claylib/wrap::acosf :claylib/wrap)
  (export 'claylib/wrap::looping :claylib/wrap)
  (export 'claylib/wrap::+mouse-right-button+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-ICON-NAME| :claylib/wrap)
  (export 'claylib/wrap::set-window-icon :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast32-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::+%%long-long-max--+ :claylib/wrap)
  (export 'claylib/wrap::powf :claylib/wrap)
  (export 'claylib/wrap::get-gamepad-axis-movement :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1f16+ :claylib/wrap)
  (export 'claylib/wrap::+%%gcc-have-sync-compare-and-swap-8+
          :claylib/wrap)
  (export 'claylib/wrap::text-join :claylib/wrap)
  (export 'claylib/wrap::vector3subtract-value :claylib/wrap)
  (export 'claylib/wrap::image-alpha-clear :claylib/wrap)
  (export 'claylib/wrap::audio-callback :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2f+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acoshf64x+ :claylib/wrap)
  (export 'claylib/wrap::get-mouse-wheel-move-v :claylib/wrap)
  (export 'claylib/wrap::set-random-seed :claylib/wrap)
  (export 'claylib/wrap::+%%uint8-type--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinhf128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint16-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::remap :claylib/wrap)
  (export 'claylib/wrap::m0 :claylib/wrap)
  (export 'claylib/wrap::image-draw-pixel-v :claylib/wrap)
  (export 'claylib/wrap::quaternion-from-vector3to-vector3
          :claylib/wrap)
  (export 'claylib/wrap::+%%end-decls+ :claylib/wrap)
  (export 'claylib/wrap::quaternion-slerp :claylib/wrap)
  (export 'claylib/wrap::draw-cube-texture :claylib/wrap)
  (export 'claylib/wrap::+darkpurple+ :claylib/wrap)
  (export 'claylib/wrap::lrintl :claylib/wrap)
  (export 'claylib/wrap::%%sinf :claylib/wrap)
  (export 'claylib/wrap::+%%int-least32-max--+ :claylib/wrap)
  (export 'claylib/wrap::glyph-info :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-cone :claylib/wrap)
  (export 'claylib/wrap::mem-realloc :claylib/wrap)
  (export 'claylib/wrap::+pink+ :claylib/wrap)
  (export 'claylib/wrap::unload-sound :claylib/wrap)
  (export 'claylib/wrap::quaternion-from-matrix :claylib/wrap)
  (export 'claylib/wrap::+%%fsfilcnt64-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%have-distinct-float128+ :claylib/wrap)
  (export 'claylib/wrap::%%int-least8-t :claylib/wrap)
  (export 'claylib/wrap::+%%int-least8-type--+ :claylib/wrap)
  (export 'claylib/wrap::close-window :claylib/wrap)
  (export 'claylib/wrap::get-file-extension :claylib/wrap)
  (export 'claylib/wrap::r :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least16-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%wchar-width--+ :claylib/wrap)
  (export 'claylib/wrap::%%nextafterf :claylib/wrap)
  (export 'claylib/wrap::load-sound-from-wave :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-has-denorm--+ :claylib/wrap)
  (export 'claylib/wrap::+rl-rectangle-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%use-xopen2k8+ :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-zyx :claylib/wrap)
  (export 'claylib/wrap::glyph-padding :claylib/wrap)
  (export 'claylib/wrap::%%timer-t :claylib/wrap)
  (export 'claylib/wrap::frame-poses :claylib/wrap)
  (export 'claylib/wrap::image-draw-text :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@FONT-TYPE| :claylib/wrap)
  (export 'claylib/wrap::+%%opencl-memory-scope-work-group+
          :claylib/wrap)
  (export 'claylib/wrap::+%%int32-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::gen-image-gradient-v :claylib/wrap)
  (export 'claylib/wrap::image-alpha-crop :claylib/wrap)
  (export 'claylib/wrap::end-blend-mode :claylib/wrap)
  (export 'claylib/wrap::%%ilogbl :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrtf128+ :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-heightmap :claylib/wrap)
  (export 'claylib/wrap::%%ldexpf :claylib/wrap)
  (export 'claylib/wrap::gui-list-view :claylib/wrap)
  (export 'claylib/wrap::+raywhite+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10f32+ :claylib/wrap)
  (export 'claylib/wrap::export-wave-as-code :claylib/wrap)
  (export 'claylib/wrap::pause-audio-stream :claylib/wrap)
  (export 'claylib/wrap::quaternion-length :claylib/wrap)
  (export 'claylib/wrap::%%log10f :claylib/wrap)
  (export 'claylib/wrap::unload-codepoints :claylib/wrap)
  (export 'claylib/wrap::+rl-quaternion-type+ :claylib/wrap)
  (export 'claylib/wrap::%%gamma :claylib/wrap)
  (export 'claylib/wrap::%%isnanl :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expf64x+ :claylib/wrap)
  (export 'claylib/wrap::gui-scroll-bar-property :claylib/wrap)
  (export 'claylib/wrap::acoshf :claylib/wrap)
  (export 'claylib/wrap::matrix-translate :claylib/wrap)
  (export 'claylib/wrap::gui-progress-bar :claylib/wrap)
  (export 'claylib/wrap::%%tanf :claylib/wrap)
  (export 'claylib/wrap::matrix-transpose :claylib/wrap)
  (export 'claylib/wrap::+rl-matrix-type+ :claylib/wrap)
  (export 'claylib/wrap::matrix-subtract :claylib/wrap)
  (export 'claylib/wrap::+%%seg-fs+ :claylib/wrap)
  (export 'claylib/wrap::%%lgamma-r :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanhf128x+ :claylib/wrap)
  (export 'claylib/wrap::remainderl :claylib/wrap)
  (export 'claylib/wrap::%%roundl :claylib/wrap)
  (export 'claylib/wrap::+%%uintmax-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@CAMERA-MODE| :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast16-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::float-equals :claylib/wrap)
  (export 'claylib/wrap::check-collision-point-circle :claylib/wrap)
  (export 'claylib/wrap::unload-model-animations :claylib/wrap)
  (export 'claylib/wrap::+%%int16-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::export-mesh :claylib/wrap)
  (export 'claylib/wrap::cbrt :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-char16-t-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::quaternion-normalize :claylib/wrap)
  (export 'claylib/wrap::get-file-name-without-ext :claylib/wrap)
  (export 'claylib/wrap::up :claylib/wrap)
  (export 'claylib/wrap::+%%size-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::image-rotate-ccw :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-callback :claylib/wrap)
  (export 'claylib/wrap::+m-pi-4+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-least8-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::set-trace-log-level :claylib/wrap)
  (export 'claylib/wrap::%%logbf :claylib/wrap)
  (export 'claylib/wrap::+skyblue+ :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-cube :claylib/wrap)
  (export 'claylib/wrap::ldexpf :claylib/wrap)
  (export 'claylib/wrap::+darkgray+ :claylib/wrap)
  (export 'claylib/wrap::fmaxf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acoshf128x+ :claylib/wrap)
  (export 'claylib/wrap::gui-control-property :claylib/wrap)
  (export 'claylib/wrap::begin-shader-mode :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-isoc2x+ :claylib/wrap)
  (export 'claylib/wrap::log1p :claylib/wrap)
  (export 'claylib/wrap::+%%no-inline--+ :claylib/wrap)
  (export 'claylib/wrap::vector2lerp :claylib/wrap)
  (export 'claylib/wrap::+%%ulong32-type+ :claylib/wrap)
  (export 'claylib/wrap::set-gamepad-mappings :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-float--+ :claylib/wrap)
  (export 'claylib/wrap::+gold+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1pf32+ :claylib/wrap)
  (export 'claylib/wrap::image-draw-circle :claylib/wrap)
  (export 'claylib/wrap::load-file-text :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfcf32+ :claylib/wrap)
  (export 'claylib/wrap::indices :claylib/wrap)
  (export 'claylib/wrap::%%rlim64-t :claylib/wrap)
  (export 'claylib/wrap::lerp :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-powf64+ :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-dig--+ :claylib/wrap)
  (export 'claylib/wrap::draw-sphere-wires :claylib/wrap)
  (export 'claylib/wrap::+%%syscall-ulong-type+ :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-plane :claylib/wrap)
  (export 'claylib/wrap::rint :claylib/wrap)
  (export 'claylib/wrap::gui-clear-icon-pixel :claylib/wrap)
  (export 'claylib/wrap::is-audio-device-ready :claylib/wrap)
  (export 'claylib/wrap::gui-toggle-property :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erff128x+ :claylib/wrap)
  (export 'claylib/wrap::enable-cursor :claylib/wrap)
  (export 'claylib/wrap::matrix :claylib/wrap)
  (export 'claylib/wrap::vector2normalize :claylib/wrap)
  (export 'claylib/wrap::+%%flt-denorm-min--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1f+ :claylib/wrap)
  (export 'claylib/wrap::lroundf :claylib/wrap)
  (export 'claylib/wrap::%%y0f :claylib/wrap)
  (export 'claylib/wrap::is-mouse-button-released :claylib/wrap)
  (export 'claylib/wrap::%%cbrtl :claylib/wrap)
  (export 'claylib/wrap::tgammaf :claylib/wrap)
  (export 'claylib/wrap::height :claylib/wrap)
  (export 'claylib/wrap::gui-scroll-panel :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-button-up :claylib/wrap)
  (export 'claylib/wrap::gui-check-box-property :claylib/wrap)
  (export 'claylib/wrap::draw-mesh :claylib/wrap)
  (export 'claylib/wrap::set-shader-value-texture :claylib/wrap)
  (export 'claylib/wrap::gui-unlock :claylib/wrap)
  (export 'claylib/wrap::scalb :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2f+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least64-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@PIXEL-FORMAT| :claylib/wrap)
  (export 'claylib/wrap::texture :claylib/wrap)
  (export 'claylib/wrap::+%%size-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanl+ :claylib/wrap)
  (export 'claylib/wrap::get-key-pressed :claylib/wrap)
  (export 'claylib/wrap::%%log1p :claylib/wrap)
  (export 'claylib/wrap::+%%rlim64-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%use-isoc11+ :claylib/wrap)
  (export 'claylib/wrap::get-file-name :claylib/wrap)
  (export 'claylib/wrap::draw-cube :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-artificial--+ :claylib/wrap)
  (export 'claylib/wrap::target :claylib/wrap)
  (export 'claylib/wrap::+%%use-xopen2k+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint8-max--+ :claylib/wrap)
  (export 'claylib/wrap::sound :claylib/wrap)
  (export 'claylib/wrap::audio-stream :claylib/wrap)
  (export 'claylib/wrap::export-image :claylib/wrap)
  (export 'claylib/wrap::color-normalize :claylib/wrap)
  (export 'claylib/wrap::%%dreml :claylib/wrap)
  (export 'claylib/wrap::+%%int8-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::image-color-invert :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-poly :claylib/wrap)
  (export 'claylib/wrap::vector3distance :claylib/wrap)
  (export 'claylib/wrap::+%%objc-bool-is-bool+ :claylib/wrap)
  (export 'claylib/wrap::gen-image-white-noise :claylib/wrap)
  (export 'claylib/wrap::text-to-integer :claylib/wrap)
  (export 'claylib/wrap::load-texture-cubemap :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast16-type--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypotf16+ :claylib/wrap)
  (export 'claylib/wrap::gui-window-box :claylib/wrap)
  (export 'claylib/wrap::load-image-anim :claylib/wrap)
  (export 'claylib/wrap::+%%use-misc+ :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-long--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint32-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::%%log2 :claylib/wrap)
  (export 'claylib/wrap::+%%dev-t-type+ :claylib/wrap)
  (export 'claylib/wrap::get-render-width :claylib/wrap)
  (export 'claylib/wrap::+blue+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypotf64+ :claylib/wrap)
  (export 'claylib/wrap::%%lrintf :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-DROPDOWN-BOX-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::get-glyph-atlas-rec :claylib/wrap)
  (export 'claylib/wrap::%%gnuc-va-list :claylib/wrap)
  (export 'claylib/wrap::+%%little-endian--+ :claylib/wrap)
  (export 'claylib/wrap::m11 :claylib/wrap)
  (export 'claylib/wrap::vector3max :claylib/wrap)
  (export 'claylib/wrap::draw-cube-texture-rec :claylib/wrap)
  (export 'claylib/wrap::+%%flt-max-exp--+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@SHADER-LOCATION-INDEX| :claylib/wrap)
  (export 'claylib/wrap::draw-fps :claylib/wrap)
  (export 'claylib/wrap::%%acosf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrtf32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-wchar-t--+ :claylib/wrap)
  (export 'claylib/wrap::offset-x :claylib/wrap)
  (export 'claylib/wrap::vector4 :claylib/wrap)
  (export 'claylib/wrap::+%%wint-width--+ :claylib/wrap)
  (export 'claylib/wrap::unload-model :claylib/wrap)
  (export 'claylib/wrap::%%llroundf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinf32x+ :claylib/wrap)
  (export 'claylib/wrap::text-to-upper :claylib/wrap)
  (export 'claylib/wrap::%%asinhf :claylib/wrap)
  (export 'claylib/wrap::c-sinh :claylib/wrap)
  (export 'claylib/wrap::is-window-ready :claylib/wrap)
  (export 'claylib/wrap::begin-blend-mode :claylib/wrap)
  (export 'claylib/wrap::sinl :claylib/wrap)
  (export 'claylib/wrap::powl :claylib/wrap)
  (export 'claylib/wrap::+%%no-math-inlines+ :claylib/wrap)
  (export 'claylib/wrap::normal :claylib/wrap)
  (export 'claylib/wrap::truncf :claylib/wrap)
  (export 'claylib/wrap::%%log :claylib/wrap)
  (export 'claylib/wrap::unload-font :claylib/wrap)
  (export 'claylib/wrap::y1 :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast8-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::%%uid-t :claylib/wrap)
  (export 'claylib/wrap::vector2length-sqr :claylib/wrap)
  (export 'claylib/wrap::atan2f :claylib/wrap)
  (export 'claylib/wrap::+%%uint16-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-long-long--+ :claylib/wrap)
  (export 'claylib/wrap::fminf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10l+ :claylib/wrap)
  (export 'claylib/wrap::nearbyintl :claylib/wrap)
  (export 'claylib/wrap::+darkblue+ :claylib/wrap)
  (export 'claylib/wrap::bone-weights :claylib/wrap)
  (export 'claylib/wrap::%%time-t :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincosf128+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least8-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%clang--+ :claylib/wrap)
  (export 'claylib/wrap::j0 :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-gradient-h :claylib/wrap)
  (export 'claylib/wrap::is-path-file :claylib/wrap)
  (export 'claylib/wrap::+%%begin-decls+ :claylib/wrap)
  (export 'claylib/wrap::triangle-count :claylib/wrap)
  (export 'claylib/wrap::%%loff-t :claylib/wrap)
  (export 'claylib/wrap::trace-log-level :claylib/wrap)
  (export 'claylib/wrap::vector3to-float-v :claylib/wrap)
  (export 'claylib/wrap::+%%stdc-hosted--+ :claylib/wrap)
  (export 'claylib/wrap::+%m-amd64+ :claylib/wrap)
  (export 'claylib/wrap::nearbyintf :claylib/wrap)
  (export 'claylib/wrap::is-sound-playing :claylib/wrap)
  (export 'claylib/wrap::is-mouse-button-pressed :claylib/wrap)
  (export 'claylib/wrap::get-clipboard-text :claylib/wrap)
  (export 'claylib/wrap::ctx-data :claylib/wrap)
  (export 'claylib/wrap::load-model-from-mesh :claylib/wrap)
  (export 'claylib/wrap::+%%attr-dealloc-free+ :claylib/wrap)
  (export 'claylib/wrap::+%default-source+ :claylib/wrap)
  (export 'claylib/wrap::+%%fsblkcnt64-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least64-type--+ :claylib/wrap)
  (export 'claylib/wrap::+fp-infinite+ :claylib/wrap)
  (export 'claylib/wrap::draw-texture-rec :claylib/wrap)
  (export 'claylib/wrap::m6 :claylib/wrap)
  (export 'claylib/wrap::c-tan :claylib/wrap)
  (export 'claylib/wrap::%%off-t :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-SPINNER-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::%%exp2l :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-minor--+ :claylib/wrap)
  (export 'claylib/wrap::set-music-pitch :claylib/wrap)
  (export 'claylib/wrap::+rayguiapi+ :claylib/wrap)
  (export 'claylib/wrap::+%%int64-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinhl+ :claylib/wrap)
  (export 'claylib/wrap::%%iseqsig :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanhf16+ :claylib/wrap)
  (export 'claylib/wrap::material-count :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1f128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least32-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::+%%shrt-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrtf64x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least16-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::unload-image-palette :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfcf128+ :claylib/wrap)
  (export 'claylib/wrap::shader :claylib/wrap)
  (export 'claylib/wrap::+%%byte-order--+ :claylib/wrap)
  (export 'claylib/wrap::set-save-file-data-callback :claylib/wrap)
  (export 'claylib/wrap::gamma :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosf64+ :claylib/wrap)
  (export 'claylib/wrap::logl :claylib/wrap)
  (export 'claylib/wrap::+%%llvm--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-coshf32x+ :claylib/wrap)
  (export 'claylib/wrap::image-draw-rectangle-lines :claylib/wrap)
  (export 'claylib/wrap::gui-spinner-property :claylib/wrap)
  (export 'claylib/wrap::%%gid-t :claylib/wrap)
  (export 'claylib/wrap::vector3zero :claylib/wrap)
  (export 'claylib/wrap::get-gesture-drag-angle :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinf128x+ :claylib/wrap)
  (export 'claylib/wrap::save-file-data-callback :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast32-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::llroundf :claylib/wrap)
  (export 'claylib/wrap::%%ilogbf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanf64+ :claylib/wrap)
  (export 'claylib/wrap::shader-attribute-data-type :claylib/wrap)
  (export 'claylib/wrap::get-touch-position :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-pointer--+ :claylib/wrap)
  (export 'claylib/wrap::zoom :claylib/wrap)
  (export 'claylib/wrap::%%clockid-t :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cos+ :claylib/wrap)
  (export 'claylib/wrap::bones :claylib/wrap)
  (export 'claylib/wrap::load-sound :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast64-type--+ :claylib/wrap)
  (export 'claylib/wrap::%%sinh :claylib/wrap)
  (export 'claylib/wrap::poll-input-events :claylib/wrap)
  (export 'claylib/wrap::j0l :claylib/wrap)
  (export 'claylib/wrap::image-dither :claylib/wrap)
  (export 'claylib/wrap::%%fminf :claylib/wrap)
  (export 'claylib/wrap::%%scalblnf :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast64-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::+%%fp-logb0-is-min+ :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-nonstring--+ :claylib/wrap)
  (export 'claylib/wrap::%%fabsf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypotf64x+ :claylib/wrap)
  (export 'claylib/wrap::%%floor :claylib/wrap)
  (export 'claylib/wrap::%%atan :claylib/wrap)
  (export 'claylib/wrap::gui-lock :claylib/wrap)
  (export 'claylib/wrap::gui-state :claylib/wrap)
  (export 'claylib/wrap::%%atan2l :claylib/wrap)
  (export 'claylib/wrap::+%%fsid-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanhf32+ :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-noinline--+ :claylib/wrap)
  (export 'claylib/wrap::end-vr-stereo-mode :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-z :claylib/wrap)
  (export 'claylib/wrap::bone-ids :claylib/wrap)
  (export 'claylib/wrap::draw-triangle :claylib/wrap)
  (export 'claylib/wrap::text-replace :claylib/wrap)
  (export 'claylib/wrap::source :claylib/wrap)
  (export 'claylib/wrap::mesh :claylib/wrap)
  (export 'claylib/wrap::decode-data-base64 :claylib/wrap)
  (export 'claylib/wrap::sinhl :claylib/wrap)
  (export 'claylib/wrap::+m-2-sqrtpi+ :claylib/wrap)
  (export 'claylib/wrap::image-alpha-premultiply :claylib/wrap)
  (export 'claylib/wrap::+%%ulongword-type+ :claylib/wrap)
  (export 'claylib/wrap::color-to-hsv :claylib/wrap)
  (export 'claylib/wrap::draw-model-wires-ex :claylib/wrap)
  (export 'claylib/wrap::vao-id :claylib/wrap)
  (export 'claylib/wrap::load-image :claylib/wrap)
  (export 'claylib/wrap::%%scalbnl :claylib/wrap)
  (export 'claylib/wrap::%%cosf :claylib/wrap)
  (export 'claylib/wrap::%%round :claylib/wrap)
  (export 'claylib/wrap::get-monitor-name :claylib/wrap)
  (export 'claylib/wrap::+%%stdc-utf-32--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2f32+ :claylib/wrap)
  (export 'claylib/wrap::quaternion-from-euler :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-max--+ :claylib/wrap)
  (export 'claylib/wrap::ynf :claylib/wrap)
  (export 'claylib/wrap::stop-sound-multi :claylib/wrap)
  (export 'claylib/wrap::ldexp :claylib/wrap)
  (export 'claylib/wrap::m7 :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast16-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::draw-text-ex :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-button-pressed :claylib/wrap)
  (export 'claylib/wrap::+fp-nan+ :claylib/wrap)
  (export 'claylib/wrap::%%blkcnt64-t :claylib/wrap)
  (export 'claylib/wrap::+%%mathcall-narrow-normal+ :claylib/wrap)
  (export 'claylib/wrap::trunc :claylib/wrap)
  (export 'claylib/wrap::+%%size-type--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-coshf16+ :claylib/wrap)
  (export 'claylib/wrap::+rl-vector2-type+ :claylib/wrap)
  (export 'claylib/wrap::%%mode-t :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinhf64+ :claylib/wrap)
  (export 'claylib/wrap::draw-circle-lines :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-COMBO-BOX-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::camera :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast16-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::%%cosl :claylib/wrap)
  (export 'claylib/wrap::%%u-long :claylib/wrap)
  (export 'claylib/wrap::%%ino64-t :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-deprecated--+ :claylib/wrap)
  (export 'claylib/wrap::%%uint-least16-t :claylib/wrap)
  (export 'claylib/wrap::bone-count :claylib/wrap)
  (export 'claylib/wrap::ldexpl :claylib/wrap)
  (export 'claylib/wrap::camera3d :claylib/wrap)
  (export 'claylib/wrap::draw-billboard-rec :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinhf16+ :claylib/wrap)
  (export 'claylib/wrap::unload-mesh :claylib/wrap)
  (export 'claylib/wrap::get-monitor-position :claylib/wrap)
  (export 'claylib/wrap::get-image-color :claylib/wrap)
  (export 'claylib/wrap::c-asinh :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-rounded-lines :claylib/wrap)
  (export 'claylib/wrap::matrix-add :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanf16+ :claylib/wrap)
  (export 'claylib/wrap::matrix-frustum :claylib/wrap)
  (export 'claylib/wrap::%%erff :claylib/wrap)
  (export 'claylib/wrap::+%%id-t-type+ :claylib/wrap)
  (export 'claylib/wrap::shader-location-index :claylib/wrap)
  (export 'claylib/wrap::ctx-type :claylib/wrap)
  (export 'claylib/wrap::+lime+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least32-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfcl+ :claylib/wrap)
  (export 'claylib/wrap::quaternion-to-matrix :claylib/wrap)
  (export 'claylib/wrap::dreml :claylib/wrap)
  (export 'claylib/wrap::+%mdouble-+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint64-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::image-text-ex :claylib/wrap)
  (export 'claylib/wrap::vector3negate :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-size-t--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asin+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint8-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::+%%int64-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10f16+ :claylib/wrap)
  (export 'claylib/wrap::save-file-text :claylib/wrap)
  (export 'claylib/wrap::vector2reflect :claylib/wrap)
  (export 'claylib/wrap::%%acosl :claylib/wrap)
  (export 'claylib/wrap::is-music-stream-playing :claylib/wrap)
  (export 'claylib/wrap::cosf :claylib/wrap)
  (export 'claylib/wrap::wave-crop :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinhf32x+ :claylib/wrap)
  (export 'claylib/wrap::tanf :claylib/wrap)
  (export 'claylib/wrap::r-audio-processor :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosf32+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast16-type--+ :claylib/wrap)
  (export 'claylib/wrap::image-color-tint :claylib/wrap)
  (export 'claylib/wrap::%%remquof :claylib/wrap)
  (export 'claylib/wrap::vector3scale :claylib/wrap)
  (export 'claylib/wrap::get-frame-time :claylib/wrap)
  (export 'claylib/wrap::unload-shader :claylib/wrap)
  (export 'claylib/wrap::get-gesture-pinch-angle :claylib/wrap)
  (export 'claylib/wrap::+%math-h+ :claylib/wrap)
  (export 'claylib/wrap::save-file-data :claylib/wrap)
  (export 'claylib/wrap::%%exp :claylib/wrap)
  (export 'claylib/wrap::unload-render-texture :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanf32+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erf+ :claylib/wrap)
  (export 'claylib/wrap::+brown+ :claylib/wrap)
  (export 'claylib/wrap::log1pf :claylib/wrap)
  (export 'claylib/wrap::%%j0f :claylib/wrap)
  (export 'claylib/wrap::%%asin :claylib/wrap)
  (export 'claylib/wrap::draw-cube-wires-v :claylib/wrap)
  (export 'claylib/wrap::get-glyph-info :claylib/wrap)
  (export 'claylib/wrap::%%atanhl :claylib/wrap)
  (export 'claylib/wrap::file-exists :claylib/wrap)
  (export 'claylib/wrap::%%daddr-t :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-mesh :claylib/wrap)
  (export 'claylib/wrap::fdimf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expf64+ :claylib/wrap)
  (export 'claylib/wrap::%%fabs :claylib/wrap)
  (export 'claylib/wrap::draw-ring-lines :claylib/wrap)
  (export 'claylib/wrap::mesh-material :claylib/wrap)
  (export 'claylib/wrap::finitel :claylib/wrap)
  (export 'claylib/wrap::channels :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2f128x+ :claylib/wrap)
  (export 'claylib/wrap::%%scalb :claylib/wrap)
  (export 'claylib/wrap::lrintf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosl+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2f64+ :claylib/wrap)
  (export 'claylib/wrap::+%%fxsr--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypotl+ :claylib/wrap)
  (export 'claylib/wrap::%%nearbyintf :claylib/wrap)
  (export 'claylib/wrap::image-to-pot :claylib/wrap)
  (export 'claylib/wrap::get-color :claylib/wrap)
  (export 'claylib/wrap::hide-cursor :claylib/wrap)
  (export 'claylib/wrap::+%%fsfilcnt-t-type+ :claylib/wrap)
  (export 'claylib/wrap::%%fmod :claylib/wrap)
  (export 'claylib/wrap::cosl :claylib/wrap)
  (export 'claylib/wrap::is-cursor-hidden :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2f128+ :claylib/wrap)
  (export 'claylib/wrap::%%iseqsigf :claylib/wrap)
  (export 'claylib/wrap::gui-color-picker-property :claylib/wrap)
  (export 'claylib/wrap::+m-ln2+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-logf32x+ :claylib/wrap)
  (export 'claylib/wrap::vr-device-info :claylib/wrap)
  (export 'claylib/wrap::+true+ :claylib/wrap)
  (export 'claylib/wrap::get-gesture-detected :claylib/wrap)
  (export 'claylib/wrap::log1pl :claylib/wrap)
  (export 'claylib/wrap::%%tanhl :claylib/wrap)
  (export 'claylib/wrap::image-clear-background :claylib/wrap)
  (export 'claylib/wrap::shader-uniform-data-type :claylib/wrap)
  (export 'claylib/wrap::%%u-char :claylib/wrap)
  (export 'claylib/wrap::set-window-min-size :claylib/wrap)
  (export 'claylib/wrap::draw-line-bezier :claylib/wrap)
  (export 'claylib/wrap::quaternion :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanhf64x+ :claylib/wrap)
  (export 'claylib/wrap::+%%char-bit--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanhf64+ :claylib/wrap)
  (export 'claylib/wrap::text-length :claylib/wrap)
  (export 'claylib/wrap::text-append :claylib/wrap)
  (export 'claylib/wrap::+%%code-model-small--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast32-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-has-quiet-nan--+ :claylib/wrap)
  (export 'claylib/wrap::%%floorf :claylib/wrap)
  (export 'claylib/wrap::+m-e+ :claylib/wrap)
  (export 'claylib/wrap::get-sounds-playing :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-deprecated-gets+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinhf128+ :claylib/wrap)
  (export 'claylib/wrap::begin-texture-mode :claylib/wrap)
  (export 'claylib/wrap::m9 :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-has-quiet-nan--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acoshf128+ :claylib/wrap)
  (export 'claylib/wrap::+%%register-prefix--+ :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-rec :claylib/wrap)
  (export 'claylib/wrap::set-texture-filter :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosh+ :claylib/wrap)
  (export 'claylib/wrap::+%%use-posix199506+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10f128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uintptr-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::load-texture :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanf64+ :claylib/wrap)
  (export 'claylib/wrap::long-double :claylib/wrap)
  (export 'claylib/wrap::asinf :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast16-max--+ :claylib/wrap)
  (export 'claylib/wrap::load-model-animations :claylib/wrap)
  (export 'claylib/wrap::+%%size-max--+ :claylib/wrap)
  (export 'claylib/wrap::%%uint64-t :claylib/wrap)
  (export 'claylib/wrap::draw-mesh-instanced :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-cubicmap :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erff64+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinhl+ :claylib/wrap)
  (export 'claylib/wrap::end-drawing :claylib/wrap)
  (export 'claylib/wrap::advance-x :claylib/wrap)
  (export 'claylib/wrap::%%llroundl :claylib/wrap)
  (export 'claylib/wrap::%%intptr-t :claylib/wrap)
  (export 'claylib/wrap::float16 :claylib/wrap)
  (export 'claylib/wrap::+%%uint16-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-least64-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::hypotl :claylib/wrap)
  (export 'claylib/wrap::draw-sphere :claylib/wrap)
  (export 'claylib/wrap::export-wave :claylib/wrap)
  (export 'claylib/wrap::gui-color-panel :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast64-max--+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-SLIDER-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::material :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfcf64x+ :claylib/wrap)
  (export 'claylib/wrap::+%%have-float32+ :claylib/wrap)
  (export 'claylib/wrap::get-monitor-physical-height :claylib/wrap)
  (export 'claylib/wrap::gen-image-cellular :claylib/wrap)
  (export 'claylib/wrap::+%%uintptr-type--+ :claylib/wrap)
  (export 'claylib/wrap::%%log2f :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanf+ :claylib/wrap)
  (export 'claylib/wrap::%%lroundl :claylib/wrap)
  (export 'claylib/wrap::color-alpha-blend :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast8-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanf+ :claylib/wrap)
  (export 'claylib/wrap::get-glyph-index :claylib/wrap)
  (export 'claylib/wrap::draw-poly-lines :claylib/wrap)
  (export 'claylib/wrap::vector3angle :claylib/wrap)
  (export 'claylib/wrap::get-camera-matrix2d :claylib/wrap)
  (export 'claylib/wrap::tangents :claylib/wrap)
  (export 'claylib/wrap::+%%use-fortify-level+ :claylib/wrap)
  (export 'claylib/wrap::+%%flt-mant-dig--+ :claylib/wrap)
  (export 'claylib/wrap::%%nexttoward :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinh+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1+ :claylib/wrap)
  (export 'claylib/wrap::modf :claylib/wrap)
  (export 'claylib/wrap::color :claylib/wrap)
  (export 'claylib/wrap::+%%have-float64x+ :claylib/wrap)
  (export 'claylib/wrap::+%%gid-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanhf16+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint32-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::+m-1-pi+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan+ :claylib/wrap)
  (export 'claylib/wrap::+%%cpu-mask-type+ :claylib/wrap)
  (export 'claylib/wrap::%%quad-t :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-button-released :claylib/wrap)
  (export 'claylib/wrap::+%%constant-cfstrings--+ :claylib/wrap)
  (export 'claylib/wrap::%%isinfl :claylib/wrap)
  (export 'claylib/wrap::exp2l :claylib/wrap)
  (export 'claylib/wrap::vector2distance-sqr :claylib/wrap)
  (export 'claylib/wrap::+%%std-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%uquad-type+ :claylib/wrap)
  (export 'claylib/wrap::%%modff :claylib/wrap)
  (export 'claylib/wrap::+%%mathcall-narrow+ :claylib/wrap)
  (export 'claylib/wrap::+%%have-float32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast64-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%have-distinct-float64x+ :claylib/wrap)
  (export 'claylib/wrap::get-current-monitor :claylib/wrap)
  (export 'claylib/wrap::%%suseconds64-t :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-volume :claylib/wrap)
  (export 'claylib/wrap::image-resize-canvas :claylib/wrap)
  (export 'claylib/wrap::%%logl :claylib/wrap)
  (export 'claylib/wrap::+%%uintmax-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::+white+ :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-v :claylib/wrap)
  (export 'claylib/wrap::check-collision-point-triangle
          :claylib/wrap)
  (export 'claylib/wrap::m1 :claylib/wrap)
  (export 'claylib/wrap::+%%have-float128x+ :claylib/wrap)
  (export 'claylib/wrap::%%expm1l :claylib/wrap)
  (export 'claylib/wrap::set-shader-value-v :claylib/wrap)
  (export 'claylib/wrap::gen-image-color :claylib/wrap)
  (export 'claylib/wrap::+math-errno+ :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-epsilon--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanhf+ :claylib/wrap)
  (export 'claylib/wrap::get-mouse-position :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2f128+ :claylib/wrap)
  (export 'claylib/wrap::recs :claylib/wrap)
  (export 'claylib/wrap::+m-2-pi+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanhf128x+ :claylib/wrap)
  (export 'claylib/wrap::rectangle :claylib/wrap)
  (export 'claylib/wrap::+%integral-max-bits+ :claylib/wrap)
  (export 'claylib/wrap::play-music-stream :claylib/wrap)
  (export 'claylib/wrap::draw-text-codepoint :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrtf64+ :claylib/wrap)
  (export 'claylib/wrap::+math-errhandling+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sin+ :claylib/wrap)
  (export 'claylib/wrap::lgammal-r :claylib/wrap)
  (export 'claylib/wrap::%%tgammal :claylib/wrap)
  (export 'claylib/wrap::load-font-ex :claylib/wrap)
  (export 'claylib/wrap::vector3multiply :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrtf+ :claylib/wrap)
  (export 'claylib/wrap::set-window-position :claylib/wrap)
  (export 'claylib/wrap::get-gesture-drag-vector :claylib/wrap)
  (export 'claylib/wrap::load-wave-samples :claylib/wrap)
  (export 'claylib/wrap::unload-file-data :claylib/wrap)
  (export 'claylib/wrap::direction :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast16-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::set-material-texture :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanf128+ :claylib/wrap)
  (export 'claylib/wrap::load-shader :claylib/wrap)
  (export 'claylib/wrap::+%%uintptr-width--+ :claylib/wrap)
  (export 'claylib/wrap::floorf :claylib/wrap)
  (export 'claylib/wrap::vector3subtract :claylib/wrap)
  (export 'claylib/wrap::%%int-least32-t :claylib/wrap)
  (export 'claylib/wrap::+%%gcc-have-sync-compare-and-swap-4+
          :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosf32x+ :claylib/wrap)
  (export 'claylib/wrap::get-world-to-screen-ex :claylib/wrap)
  (export 'claylib/wrap::sample-size :claylib/wrap)
  (export 'claylib/wrap::load-dropped-files :claylib/wrap)
  (export 'claylib/wrap::jn :claylib/wrap)
  (export 'claylib/wrap::%%uint8-t :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-max-10-exp--+ :claylib/wrap)
  (export 'claylib/wrap::erff :claylib/wrap)
  (export 'claylib/wrap::+raygui-h+ :claylib/wrap)
  (export 'claylib/wrap::%%exp2f :claylib/wrap)
  (export 'claylib/wrap::%%lgammal :claylib/wrap)
  (export 'claylib/wrap::%%log1pl :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10f32+ :claylib/wrap)
  (export 'claylib/wrap::is-window-focused :claylib/wrap)
  (export 'claylib/wrap::+rlapi+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast8-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinf+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-logf32+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@MATERIAL-MAP-INDEX| :claylib/wrap)
  (export 'claylib/wrap::+%%sse-math--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2f32+ :claylib/wrap)
  (export 'claylib/wrap::%%fdim :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least64-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanhf64+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-CONTROL| :claylib/wrap)
  (export 'claylib/wrap::+%%atomic-acquire+ :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-x :claylib/wrap)
  (export 'claylib/wrap::get-file-length :claylib/wrap)
  (export 'claylib/wrap::+%%atomic-acq-rel+ :claylib/wrap)
  (export 'claylib/wrap::+%%biggest-alignment--+ :claylib/wrap)
  (export 'claylib/wrap::get-monitor-height :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-mant-dig--+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@CONFIG-FLAGS| :claylib/wrap)
  (export 'claylib/wrap::model-animation :claylib/wrap)
  (export 'claylib/wrap::anim-vertices :claylib/wrap)
  (export 'claylib/wrap::mem-free :claylib/wrap)
  (export 'claylib/wrap::+purple+ :claylib/wrap)
  (export 'claylib/wrap::asinl :claylib/wrap)
  (export 'claylib/wrap::load-image-colors :claylib/wrap)
  (export 'claylib/wrap::%%isnan :claylib/wrap)
  (export 'claylib/wrap::%%atanf :claylib/wrap)
  (export 'claylib/wrap::c-round :claylib/wrap)
  (export 'claylib/wrap::mesh-count :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-c99-flexarr-available+
          :claylib/wrap)
  (export 'claylib/wrap::lgammaf :claylib/wrap)
  (export 'claylib/wrap::%%nexttowardl :claylib/wrap)
  (export 'claylib/wrap::image-color-contrast :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-int-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::remainder :claylib/wrap)
  (export 'claylib/wrap::processor :claylib/wrap)
  (export 'claylib/wrap::%%ldexpl :claylib/wrap)
  (export 'claylib/wrap::%%val :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosf16+ :claylib/wrap)
  (export 'claylib/wrap::+m-sqrt2+ :claylib/wrap)
  (export 'claylib/wrap::expm1f :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast64-type--+ :claylib/wrap)
  (export 'claylib/wrap::erfl :claylib/wrap)
  (export 'claylib/wrap::gamepad-axis :claylib/wrap)
  (export 'claylib/wrap::+raygui-support-log-info+ :claylib/wrap)
  (export 'claylib/wrap::begin-mode3d :claylib/wrap)
  (export 'claylib/wrap::llroundl :claylib/wrap)
  (export 'claylib/wrap::%%log10l :claylib/wrap)
  (export 'claylib/wrap::detach-audio-stream-processor :claylib/wrap)
  (export 'claylib/wrap::ilogbf :claylib/wrap)
  (export 'claylib/wrap::+%%syscall-wordsize+ :claylib/wrap)
  (export 'claylib/wrap::image-color-brightness :claylib/wrap)
  (export 'claylib/wrap::+%%ptrdiff-type--+ :claylib/wrap)
  (export 'claylib/wrap::vector3distance-sqr :claylib/wrap)
  (export 'claylib/wrap::gui-label :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erff16+ :claylib/wrap)
  (export 'claylib/wrap::vector2add-value :claylib/wrap)
  (export 'claylib/wrap::%%jnf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanf32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanhf32x+ :claylib/wrap)
  (export 'claylib/wrap::set-shapes-texture :claylib/wrap)
  (export 'claylib/wrap::isinf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanf64x+ :claylib/wrap)
  (export 'claylib/wrap::%%frexpl :claylib/wrap)
  (export 'claylib/wrap::set-window-size :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-wint-t--+ :claylib/wrap)
  (export 'claylib/wrap::vector3lerp :claylib/wrap)
  (export 'claylib/wrap::+%%int-least16-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-long-double--+ :claylib/wrap)
  (export 'claylib/wrap::%%scalbn :claylib/wrap)
  (export 'claylib/wrap::+%%stdc-utf-16--+ :claylib/wrap)
  (export 'claylib/wrap::ceilf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinh+ :claylib/wrap)
  (export 'claylib/wrap::quaternion-subtract-value :claylib/wrap)
  (export 'claylib/wrap::gesture :claylib/wrap)
  (export 'claylib/wrap::%%nearbyint :claylib/wrap)
  (export 'claylib/wrap::tgamma :claylib/wrap)
  (export 'claylib/wrap::%%tan :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-iec-60559-ext+ :claylib/wrap)
  (export 'claylib/wrap::get-screen-height :claylib/wrap)
  (export 'claylib/wrap::begin-vr-stereo-mode :claylib/wrap)
  (export 'claylib/wrap::ceil :claylib/wrap)
  (export 'claylib/wrap::%%llrint :claylib/wrap)
  (export 'claylib/wrap::get-gamepad-axis-count :claylib/wrap)
  (export 'claylib/wrap::get-working-directory :claylib/wrap)
  (export 'claylib/wrap::%%int16-t :claylib/wrap)
  (export 'claylib/wrap::%%dev-t :claylib/wrap)
  (export 'claylib/wrap::+%bits-time64-h+ :claylib/wrap)
  (export 'claylib/wrap::+rl-vector3-type+ :claylib/wrap)
  (export 'claylib/wrap::gui-get-state :claylib/wrap)
  (export 'claylib/wrap::+%%slongword-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%wint-type--+ :claylib/wrap)
  (export 'claylib/wrap::set-mouse-position :claylib/wrap)
  (export 'claylib/wrap::+%%tune-k8--+ :claylib/wrap)
  (export 'claylib/wrap::+%%x86-64--+ :claylib/wrap)
  (export 'claylib/wrap::image-draw-circle-v :claylib/wrap)
  (export 'claylib/wrap::+%%order-pdp-endian--+ :claylib/wrap)
  (export 'claylib/wrap::+%%kernel-old-timeval-matches-timeval64+
          :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast16-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::close-audio-device :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10f64+ :claylib/wrap)
  (export 'claylib/wrap::%%syscall-slong-t :claylib/wrap)
  (export 'claylib/wrap::%float32x :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10f16+ :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-long-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::%%fminl :claylib/wrap)
  (export 'claylib/wrap::quaternion-to-euler :claylib/wrap)
  (export 'claylib/wrap::nearbyint :claylib/wrap)
  (export 'claylib/wrap::+%%wint-unsigned--+ :claylib/wrap)
  (export 'claylib/wrap::+%%mathdecl+ :claylib/wrap)
  (export 'claylib/wrap::+%%s16-type+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@TEXTURE-FILTER| :claylib/wrap)
  (export 'claylib/wrap::%%issignalingl :claylib/wrap)
  (export 'claylib/wrap::+%%order-little-endian--+ :claylib/wrap)
  (export 'claylib/wrap::+%%have-float64+ :claylib/wrap)
  (export 'claylib/wrap::%%atanl :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tan+ :claylib/wrap)
  (export 'claylib/wrap::+%%time64-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+pi+ :claylib/wrap)
  (export 'claylib/wrap::log10f :claylib/wrap)
  (export 'claylib/wrap::%%uint-least64-t :claylib/wrap)
  (export 'claylib/wrap::%%erfc :claylib/wrap)
  (export 'claylib/wrap::%%j0l :claylib/wrap)
  (export 'claylib/wrap::+%%int-least32-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosf+ :claylib/wrap)
  (export 'claylib/wrap::scalbnf :claylib/wrap)
  (export 'claylib/wrap::decompress-data :claylib/wrap)
  (export 'claylib/wrap::%%nextafterl :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-triangle :claylib/wrap)
  (export 'claylib/wrap::quaternion-identity :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-wchar-t-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::unload-texture :claylib/wrap)
  (export 'claylib/wrap::matrix-invert :claylib/wrap)
  (export 'claylib/wrap::gui-text-box-property :claylib/wrap)
  (export 'claylib/wrap::get-gamepad-button-pressed :claylib/wrap)
  (export 'claylib/wrap::font :claylib/wrap)
  (export 'claylib/wrap::anim-normals :claylib/wrap)
  (export 'claylib/wrap::+%%uword-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinf64+ :claylib/wrap)
  (export 'claylib/wrap::transform :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincosf64+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinhf64+ :claylib/wrap)
  (export 'claylib/wrap::+%msc-ver+ :claylib/wrap)
  (export 'claylib/wrap::offset :claylib/wrap)
  (export 'claylib/wrap::+%%have-distinct-float32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast8-type--+ :claylib/wrap)
  (export 'claylib/wrap::color-from-normalized :claylib/wrap)
  (export 'claylib/wrap::gui-panel :claylib/wrap)
  (export 'claylib/wrap::scalbf :claylib/wrap)
  (export 'claylib/wrap::get-gesture-pinch-vector :claylib/wrap)
  (export 'claylib/wrap::bind-pose :claylib/wrap)
  (export 'claylib/wrap::draw-text :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-powf64x+ :claylib/wrap)
  (export 'claylib/wrap::params :claylib/wrap)
  (export 'claylib/wrap::fade :claylib/wrap)
  (export 'claylib/wrap::draw-texture-v :claylib/wrap)
  (export 'claylib/wrap::load-vr-stereo-config :claylib/wrap)
  (export 'claylib/wrap::+%%int-least64-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::+%%fp-logbnan-is-min+ :claylib/wrap)
  (export 'claylib/wrap::set-mouse-cursor :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2f64x+ :claylib/wrap)
  (export 'claylib/wrap::update-texture-rec :claylib/wrap)
  (export 'claylib/wrap::sample-rate :claylib/wrap)
  (export 'claylib/wrap::+%%int-least16-type--+ :claylib/wrap)
  (export 'claylib/wrap::matrix-look-at :claylib/wrap)
  (export 'claylib/wrap::+%%stdc-iso-10646--+ :claylib/wrap)
  (export 'claylib/wrap::%%cos :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-const--+ :claylib/wrap)
  (export 'claylib/wrap::m3 :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1l+ :claylib/wrap)
  (export 'claylib/wrap::+%%sig-atomic-width--+ :claylib/wrap)
  (export 'claylib/wrap::isnanf :claylib/wrap)
  (export 'claylib/wrap::set-shader-value-matrix :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast16-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::+%%have-floatn-not-typedef+ :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-gradient-v :claylib/wrap)
  (export 'claylib/wrap::gui-color-picker :claylib/wrap)
  (export 'claylib/wrap::+%%ldouble-redirects-to-float128-abi+
          :claylib/wrap)
  (export 'claylib/wrap::quaternion-divide :claylib/wrap)
  (export 'claylib/wrap::quaternion-add-value :claylib/wrap)
  (export 'claylib/wrap::+mouse-left-button+ :claylib/wrap)
  (export 'claylib/wrap::+rmapi+ :claylib/wrap)
  (export 'claylib/wrap::+%msc-full-ver+ :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-decimal-dig--+ :claylib/wrap)
  (export 'claylib/wrap::+%%flt-decimal-dig--+ :claylib/wrap)
  (export 'claylib/wrap::%%jnl :claylib/wrap)
  (export 'claylib/wrap::minimize-window :claylib/wrap)
  (export 'claylib/wrap::%%fma :claylib/wrap)
  (export 'claylib/wrap::locs :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinf32x+ :claylib/wrap)
  (export 'claylib/wrap::get-fps :claylib/wrap)
  (export 'claylib/wrap::text-split :claylib/wrap)
  (export 'claylib/wrap::left :claylib/wrap)
  (export 'claylib/wrap::%%signbitl :claylib/wrap)
  (export 'claylib/wrap::acoshl :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least64-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10f128+ :claylib/wrap)
  (export 'claylib/wrap::+rad2deg+ :claylib/wrap)
  (export 'claylib/wrap::%%uint-least8-t :claylib/wrap)
  (export 'claylib/wrap::sqrtl :claylib/wrap)
  (export 'claylib/wrap::%%llround :claylib/wrap)
  (export 'claylib/wrap::+%%key-t-type+ :claylib/wrap)
  (export 'claylib/wrap::load-directory-files-ex :claylib/wrap)
  (export 'claylib/wrap::+%posix-source+ :claylib/wrap)
  (export 'claylib/wrap::%%sqrt :claylib/wrap)
  (export 'claylib/wrap::draw-triangle-strip3d :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast8-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least8-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1pf128x+ :claylib/wrap)
  (export 'claylib/wrap::coshf :claylib/wrap)
  (export 'claylib/wrap::%%fpclassifyf :claylib/wrap)
  (export 'claylib/wrap::+%%off64-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10f128+ :claylib/wrap)
  (export 'claylib/wrap::get-world-to-screen2d :claylib/wrap)
  (export 'claylib/wrap::image-draw-line :claylib/wrap)
  (export 'claylib/wrap::vector3cross-product :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanf128+ :claylib/wrap)
  (export 'claylib/wrap::+mouse-middle-button+ :claylib/wrap)
  (export 'claylib/wrap::set-camera-alt-control :claylib/wrap)
  (export 'claylib/wrap::+%%blkcnt64-t-type+ :claylib/wrap)
  (export 'claylib/wrap::draw-plane :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosf128+ :claylib/wrap)
  (export 'claylib/wrap::+blank+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfcf16+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint16-type--+ :claylib/wrap)
  (export 'claylib/wrap::%%isinf :claylib/wrap)
  (export 'claylib/wrap::load-texture-from-image :claylib/wrap)
  (export 'claylib/wrap::coshl :claylib/wrap)
  (export 'claylib/wrap::draw-bounding-box :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-powf32+ :claylib/wrap)
  (export 'claylib/wrap::modfl :claylib/wrap)
  (export 'claylib/wrap::+%%int16-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrtl+ :claylib/wrap)
  (export 'claylib/wrap::+%%blkcnt-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%stdc-iec-559--+ :claylib/wrap)
  (export 'claylib/wrap::draw-model-ex :claylib/wrap)
  (export 'claylib/wrap::%%nanl :claylib/wrap)
  (export 'claylib/wrap::+%%wur+ :claylib/wrap)
  (export 'claylib/wrap::set-load-file-data-callback :claylib/wrap)
  (export 'claylib/wrap::mem-alloc :claylib/wrap)
  (export 'claylib/wrap::mouse-cursor :claylib/wrap)
  (export 'claylib/wrap::begin-drawing :claylib/wrap)
  (export 'claylib/wrap::wrap :claylib/wrap)
  (export 'claylib/wrap::m13 :claylib/wrap)
  (export 'claylib/wrap::get-font-default :claylib/wrap)
  (export 'claylib/wrap::+%%intptr-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%opencl-memory-scope-device+
          :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expf+ :claylib/wrap)
  (export 'claylib/wrap::+%%int16-type--+ :claylib/wrap)
  (export 'claylib/wrap::camera-mode :claylib/wrap)
  (export 'claylib/wrap::+%%leaf-attr+ :claylib/wrap)
  (export 'claylib/wrap::render-texture2d :claylib/wrap)
  (export 'claylib/wrap::texture-wrap :claylib/wrap)
  (export 'claylib/wrap::trace-log :claylib/wrap)
  (export 'claylib/wrap::set-camera-smooth-zoom-control
          :claylib/wrap)
  (export 'claylib/wrap::glyphs :claylib/wrap)
  (export 'claylib/wrap::%%lrintl :claylib/wrap)
  (export 'claylib/wrap::expm1l :claylib/wrap)
  (export 'claylib/wrap::%%sin :claylib/wrap)
  (export 'claylib/wrap::nexttoward :claylib/wrap)
  (export 'claylib/wrap::lround :claylib/wrap)
  (export 'claylib/wrap::%%copysignf :claylib/wrap)
  (export 'claylib/wrap::load-directory-files :claylib/wrap)
  (export 'claylib/wrap::unload-wave :claylib/wrap)
  (export 'claylib/wrap::+%%intptr-width--+ :claylib/wrap)
  (export 'claylib/wrap::update-music-stream :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinhf+ :claylib/wrap)
  (export 'claylib/wrap::translation :claylib/wrap)
  (export 'claylib/wrap::%%logbl :claylib/wrap)
  (export 'claylib/wrap::upload-mesh :claylib/wrap)
  (export 'claylib/wrap::fmin :claylib/wrap)
  (export 'claylib/wrap::%%modfl :claylib/wrap)
  (export 'claylib/wrap::hypotf :claylib/wrap)
  (export 'claylib/wrap::%float32 :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-min--+ :claylib/wrap)
  (export 'claylib/wrap::%%expf :claylib/wrap)
  (export 'claylib/wrap::rintf :claylib/wrap)
  (export 'claylib/wrap::ynl :claylib/wrap)
  (export 'claylib/wrap::%%trunc :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-bool-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::+%%cfloat32+ :claylib/wrap)
  (export 'claylib/wrap::load-image-raw :claylib/wrap)
  (export 'claylib/wrap::+%%slong32-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-powf128+ :claylib/wrap)
  (export 'claylib/wrap::draw-billboard :claylib/wrap)
  (export 'claylib/wrap::draw-texture-ex :claylib/wrap)
  (export 'claylib/wrap::%%acos :claylib/wrap)
  (export 'claylib/wrap::pixel-format :claylib/wrap)
  (export 'claylib/wrap::gamepad-button :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@TRACE-LOG-LEVEL| :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2f128+ :claylib/wrap)
  (export 'claylib/wrap::scale :claylib/wrap)
  (export 'claylib/wrap::+%%wint-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least8-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::%%rlim-t :claylib/wrap)
  (export 'claylib/wrap::+%%intmax-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::draw-text-codepoints :claylib/wrap)
  (export 'claylib/wrap::%%jn :claylib/wrap)
  (export 'claylib/wrap::quaternion-nlerp :claylib/wrap)
  (export 'claylib/wrap::llround :claylib/wrap)
  (export 'claylib/wrap::+m-log10e+ :claylib/wrap)
  (export 'claylib/wrap::rotation :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinhf32+ :claylib/wrap)
  (export 'claylib/wrap::%%hypot :claylib/wrap)
  (export 'claylib/wrap::+%%flt-min-10-exp--+ :claylib/wrap)
  (export 'claylib/wrap::load-font :claylib/wrap)
  (export 'claylib/wrap::+%%int16-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::+%%pid-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-max--+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@N-PATCH-LAYOUT| :claylib/wrap)
  (export 'claylib/wrap::gui-combo-box-property :claylib/wrap)
  (export 'claylib/wrap::+%%int64-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::unload-model-animation :claylib/wrap)
  (export 'claylib/wrap::tgammal :claylib/wrap)
  (export 'claylib/wrap::draw-line3d :claylib/wrap)
  (export 'claylib/wrap::pow :claylib/wrap)
  (export 'claylib/wrap::%%drem :claylib/wrap)
  (export 'claylib/wrap::%%fsfilcnt-t :claylib/wrap)
  (export 'claylib/wrap::%%key-t :claylib/wrap)
  (export 'claylib/wrap::data :claylib/wrap)
  (export 'claylib/wrap::image-color-replace :claylib/wrap)
  (export 'claylib/wrap::gui-control :claylib/wrap)
  (export 'claylib/wrap::+%%have-float64x-long-double+ :claylib/wrap)
  (export 'claylib/wrap::nan :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-coshf32+ :claylib/wrap)
  (export 'claylib/wrap::+m-sqrt1-2+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1f32x+ :claylib/wrap)
  (export 'claylib/wrap::quaternion-to-axis-angle :claylib/wrap)
  (export 'claylib/wrap::+%%gcc-have-sync-compare-and-swap-1+
          :claylib/wrap)
  (export 'claylib/wrap::image-crop :claylib/wrap)
  (export 'claylib/wrap::tanl :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast64-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint32-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::+%%flt-dig--+ :claylib/wrap)
  (export 'claylib/wrap::distance :claylib/wrap)
  (export 'claylib/wrap::%%asinhl :claylib/wrap)
  (export 'claylib/wrap::+%%int-least64-type--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfcf128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uintptr-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::play-sound-multi :claylib/wrap)
  (export 'claylib/wrap::draw-sphere-ex :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanf32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%uintmax-type--+ :claylib/wrap)
  (export 'claylib/wrap::+%%mathcall-narrow-args-1+ :claylib/wrap)
  (export 'claylib/wrap::load-shader-from-memory :claylib/wrap)
  (export 'claylib/wrap::vector3length-sqr :claylib/wrap)
  (export 'claylib/wrap::+%%intptr-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::right-lens-center :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinf32+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint64-type--+ :claylib/wrap)
  (export 'claylib/wrap::+%%gcc-asm-flag-outputs--+ :claylib/wrap)
  (export 'claylib/wrap::%%significand :claylib/wrap)
  (export 'claylib/wrap::set-sound-pitch :claylib/wrap)
  (export 'claylib/wrap::+deg2rad+ :claylib/wrap)
  (export 'claylib/wrap::%%atanh :claylib/wrap)
  (export 'claylib/wrap::+%%clang-major--+ :claylib/wrap)
  (export 'claylib/wrap::isnan :claylib/wrap)
  (export 'claylib/wrap::begin-mode2d :claylib/wrap)
  (export 'claylib/wrap::lgammaf-r :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypotf128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanhf32+ :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-internal-starting-header-implementation+
          :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincosf32x+ :claylib/wrap)
  (export 'claylib/wrap::%%u-short :claylib/wrap)
  (export 'claylib/wrap::%%yn :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-ptrdiff-t--+ :claylib/wrap)
  (export 'claylib/wrap::scalblnf :claylib/wrap)
  (export 'claylib/wrap::+m-pi-2+ :claylib/wrap)
  (export 'claylib/wrap::j1l :claylib/wrap)
  (export 'claylib/wrap::exp2 :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-sphere :claylib/wrap)
  (export 'claylib/wrap::gui-status-bar :claylib/wrap)
  (export 'claylib/wrap::+%%mathdecl-1+ :claylib/wrap)
  (export 'claylib/wrap::expl :claylib/wrap)
  (export 'claylib/wrap::+%bits-floatn-h+ :claylib/wrap)
  (export 'claylib/wrap::+%%off-t-type+ :claylib/wrap)
  (export 'claylib/wrap::%%fmal :claylib/wrap)
  (export 'claylib/wrap::text-codepoints-to-utf8 :claylib/wrap)
  (export 'claylib/wrap::%%u-quad-t :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinf+ :claylib/wrap)
  (export 'claylib/wrap::vr-stereo-config :claylib/wrap)
  (export 'claylib/wrap::+%%mathcall-narrow-args-2+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2f32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanf128x+ :claylib/wrap)
  (export 'claylib/wrap::draw-cylinder-ex :claylib/wrap)
  (export 'claylib/wrap::+%%gnuc-va-list+ :claylib/wrap)
  (export 'claylib/wrap::init-audio-device :claylib/wrap)
  (export 'claylib/wrap::+%%intmax-width--+ :claylib/wrap)
  (export 'claylib/wrap::layout :claylib/wrap)
  (export 'claylib/wrap::remquof :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acoshf16+ :claylib/wrap)
  (export 'claylib/wrap::end-mode2d :claylib/wrap)
  (export 'claylib/wrap::load-materials :claylib/wrap)
  (export 'claylib/wrap::+%%have-distinct-float32+ :claylib/wrap)
  (export 'claylib/wrap::load-file-data-callback :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-iec-60559-types-ext+
          :claylib/wrap)
  (export 'claylib/wrap::%%ceil :claylib/wrap)
  (export 'claylib/wrap::+%%kernel-strict-names+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10+ :claylib/wrap)
  (export 'claylib/wrap::finitef :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GESTURE| :claylib/wrap)
  (export 'claylib/wrap::llrint :claylib/wrap)
  (export 'claylib/wrap::load-music-stream-from-memory :claylib/wrap)
  (export 'claylib/wrap::log2f :claylib/wrap)
  (export 'claylib/wrap::+%%syscall-slong-type+ :claylib/wrap)
  (export 'claylib/wrap::capacity :claylib/wrap)
  (export 'claylib/wrap::draw-model-wires :claylib/wrap)
  (export 'claylib/wrap::m4 :claylib/wrap)
  (export 'claylib/wrap::material-map-index :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinhf64x+ :claylib/wrap)
  (export 'claylib/wrap::%%sinhf :claylib/wrap)
  (export 'claylib/wrap::%%modf :claylib/wrap)
  (export 'claylib/wrap::+infinity+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10f128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%wordsize-time64-compat32+ :claylib/wrap)
  (export 'claylib/wrap::get-music-time-length :claylib/wrap)
  (export 'claylib/wrap::+fp-zero+ :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-lines-ex :claylib/wrap)
  (export 'claylib/wrap::+false+ :claylib/wrap)
  (export 'claylib/wrap::+%%flt-max-10-exp--+ :claylib/wrap)
  (export 'claylib/wrap::%%llrintf :claylib/wrap)
  (export 'claylib/wrap::+%%int32-type--+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-TOGGLE-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::fabsl :claylib/wrap)
  (export 'claylib/wrap::is-gesture-detected :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-min-exp--+ :claylib/wrap)
  (export 'claylib/wrap::h-screen-size :claylib/wrap)
  (export 'claylib/wrap::gui-button :claylib/wrap)
  (export 'claylib/wrap::scalbl :claylib/wrap)
  (export 'claylib/wrap::toggle-fullscreen :claylib/wrap)
  (export 'claylib/wrap::image-flip-vertical :claylib/wrap)
  (export 'claylib/wrap::fminl :claylib/wrap)
  (export 'claylib/wrap::+%%flt-min--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-pow+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1f128+ :claylib/wrap)
  (export 'claylib/wrap::+%%flexarr+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2f64x+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-LIST-VIEW-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::%%tgammaf :claylib/wrap)
  (export 'claylib/wrap::matrix-to-float-v :claylib/wrap)
  (export 'claylib/wrap::%%fsid-t :claylib/wrap)
  (export 'claylib/wrap::text-to-lower :claylib/wrap)
  (export 'claylib/wrap::+%%wchar-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-coshf+ :claylib/wrap)
  (export 'claylib/wrap::encode-data-base64 :claylib/wrap)
  (export 'claylib/wrap::+%msc-extensions+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosf32+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast8-type--+ :claylib/wrap)
  (export 'claylib/wrap::update-mesh-buffer :claylib/wrap)
  (export 'claylib/wrap::vector2angle :claylib/wrap)
  (export 'claylib/wrap::logbl :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acoshf+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint16-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-knot :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast32-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-powf32x+ :claylib/wrap)
  (export 'claylib/wrap::draw-billboard-pro :claylib/wrap)
  (export 'claylib/wrap::%%fsblkcnt64-t :claylib/wrap)
  (export 'claylib/wrap::c-acosh :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acoshf64+ :claylib/wrap)
  (export 'claylib/wrap::vector2transform :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-short-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::%%j1f :claylib/wrap)
  (export 'claylib/wrap::draw-circle-sector :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2f32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-powf+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-least8-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::+darkbrown+ :claylib/wrap)
  (export 'claylib/wrap::check-collision-circle-rec :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-sphere :claylib/wrap)
  (export 'claylib/wrap::y0l :claylib/wrap)
  (export 'claylib/wrap::draw-circle-gradient :claylib/wrap)
  (export 'claylib/wrap::+%%stdc-version--+ :claylib/wrap)
  (export 'claylib/wrap::+%%use-posix+ :claylib/wrap)
  (export 'claylib/wrap::export-data-as-code :claylib/wrap)
  (export 'claylib/wrap::lgamma :claylib/wrap)
  (export 'claylib/wrap::quaternion-multiply :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfcf32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2f64+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-coshf64x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinf32+ :claylib/wrap)
  (export 'claylib/wrap::+%%flt-max--+ :claylib/wrap)
  (export 'claylib/wrap::end-mode3d :claylib/wrap)
  (export 'claylib/wrap::+beige+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least32-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2l+ :claylib/wrap)
  (export 'claylib/wrap::logf :claylib/wrap)
  (export 'claylib/wrap::vector2move-towards :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GAMEPAD-BUTTON| :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-logf64x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinf16+ :claylib/wrap)
  (export 'claylib/wrap::+%%use-isoc95+ :claylib/wrap)
  (export 'claylib/wrap::%%expl :claylib/wrap)
  (export 'claylib/wrap::+fp-normal+ :claylib/wrap)
  (export 'claylib/wrap::get-touch-point-id :claylib/wrap)
  (export 'claylib/wrap::v-screen-center :claylib/wrap)
  (export 'claylib/wrap::colors :claylib/wrap)
  (export 'claylib/wrap::drem :claylib/wrap)
  (export 'claylib/wrap::%%log2l :claylib/wrap)
  (export 'claylib/wrap::draw-triangle3d :claylib/wrap)
  (export 'claylib/wrap::name :claylib/wrap)
  (export 'claylib/wrap::+%win64+ :claylib/wrap)
  (export 'claylib/wrap::+%%intptr-type--+ :claylib/wrap)
  (export 'claylib/wrap::texture-cubemap :claylib/wrap)
  (export 'claylib/wrap::+%%uintmax-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::%%log10 :claylib/wrap)
  (export 'claylib/wrap::draw-triangle-fan :claylib/wrap)
  (export 'claylib/wrap::get-world-to-screen :claylib/wrap)
  (export 'claylib/wrap::isnanl :claylib/wrap)
  (export 'claylib/wrap::ceill :claylib/wrap)
  (export 'claylib/wrap::depth :claylib/wrap)
  (export 'claylib/wrap::quaternion-lerp :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinf64x+ :claylib/wrap)
  (export 'claylib/wrap::+%%stdbool-h+ :claylib/wrap)
  (export 'claylib/wrap::unload-vr-stereo-config :claylib/wrap)
  (export 'claylib/wrap::save-file-text-callback :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-flt-eval-method+ :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-dig--+ :claylib/wrap)
  (export 'claylib/wrap::%%fmaxl :claylib/wrap)
  (export 'claylib/wrap::%%uintmax-t :claylib/wrap)
  (export 'claylib/wrap::jnf :claylib/wrap)
  (export 'claylib/wrap::text-is-equal :claylib/wrap)
  (export 'claylib/wrap::quaternion-equals :claylib/wrap)
  (export 'claylib/wrap::+m-ln10+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-TEXT-ALIGNMENT| :claylib/wrap)
  (export 'claylib/wrap::%%ssize-t :claylib/wrap)
  (export 'claylib/wrap::set-mouse-scale :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1pf64x+ :claylib/wrap)
  (export 'claylib/wrap::unload-image :claylib/wrap)
  (export 'claylib/wrap::+scrollbar-left-side+ :claylib/wrap)
  (export 'claylib/wrap::draw-text-pro :claylib/wrap)
  (export 'claylib/wrap::disable-event-waiting :claylib/wrap)
  (export 'claylib/wrap::dremf :claylib/wrap)
  (export 'claylib/wrap::set-music-volume :claylib/wrap)
  (export 'claylib/wrap::%%tgamma :claylib/wrap)
  (export 'claylib/wrap::vector3barycenter :claylib/wrap)
  (export 'claylib/wrap::%%logf :claylib/wrap)
  (export 'claylib/wrap::%%int32-t :claylib/wrap)
  (export 'claylib/wrap::gui-set-icon-pixel :claylib/wrap)
  (export 'claylib/wrap::measure-text-ex :claylib/wrap)
  (export 'claylib/wrap::draw-line-strip :claylib/wrap)
  (export 'claylib/wrap::+%%use-posix2+ :claylib/wrap)
  (export 'claylib/wrap::load-material-default :claylib/wrap)
  (export 'claylib/wrap::quaternion-transform :claylib/wrap)
  (export 'claylib/wrap::get-mouse-ray :claylib/wrap)
  (export 'claylib/wrap::draw-texture-poly :claylib/wrap)
  (export 'claylib/wrap::c-exp :claylib/wrap)
  (export 'claylib/wrap::is-window-maximized :claylib/wrap)
  (export 'claylib/wrap::+%%int8-type--+ :claylib/wrap)
  (export 'claylib/wrap::c-acos :claylib/wrap)
  (export 'claylib/wrap::check-collision-recs :claylib/wrap)
  (export 'claylib/wrap::+%%clockid-t-type+ :claylib/wrap)
  (export 'claylib/wrap::c-min :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-TEXT-BOX-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::load-audio-stream :claylib/wrap)
  (export 'claylib/wrap::+%%uint16-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::+%%gcc-have-sync-compare-and-swap-2+
          :claylib/wrap)
  (export 'claylib/wrap::stop-sound :claylib/wrap)
  (export 'claylib/wrap::load-image-from-screen :claylib/wrap)
  (export 'claylib/wrap::matrix-scale :claylib/wrap)
  (export 'claylib/wrap::%%scalblnl :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-tangents :claylib/wrap)
  (export 'claylib/wrap::%%ceill :claylib/wrap)
  (export 'claylib/wrap::right :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2l+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-least32-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::wave-copy :claylib/wrap)
  (export 'claylib/wrap::%%finitef :claylib/wrap)
  (export 'claylib/wrap::image-rotate-cw :claylib/wrap)
  (export 'claylib/wrap::+%%time-t-type+ :claylib/wrap)
  (export 'claylib/wrap::r-audio-buffer :claylib/wrap)
  (export 'claylib/wrap::vector3transform :claylib/wrap)
  (export 'claylib/wrap::%%fdiml :claylib/wrap)
  (export 'claylib/wrap::vector3unproject :claylib/wrap)
  (export 'claylib/wrap::vector3rotate-by-quaternion :claylib/wrap)
  (export 'claylib/wrap::+%bits-libm-simd-decl-stubs-h+
          :claylib/wrap)
  (export 'claylib/wrap::%%fpclassify :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-pro :claylib/wrap)
  (export 'claylib/wrap::%%tanl :claylib/wrap)
  (export 'claylib/wrap::get-mouse-delta :claylib/wrap)
  (export 'claylib/wrap::+%%finite-math-only--+ :claylib/wrap)
  (export 'claylib/wrap::expm1 :claylib/wrap)
  (export 'claylib/wrap::image-resize :claylib/wrap)
  (export 'claylib/wrap::%%ilogb :claylib/wrap)
  (export 'claylib/wrap::gui-draw-icon :claylib/wrap)
  (export 'claylib/wrap::set-camera-mode :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1pf16+ :claylib/wrap)
  (export 'claylib/wrap::+%m-x64+ :claylib/wrap)
  (export 'claylib/wrap::atanhl :claylib/wrap)
  (export 'claylib/wrap::%%logb :claylib/wrap)
  (export 'claylib/wrap::+%msc-build+ :claylib/wrap)
  (export 'claylib/wrap::%%syscall-ulong-t :claylib/wrap)
  (export 'claylib/wrap::%%erfcf :claylib/wrap)
  (export 'claylib/wrap::%%remainderl :claylib/wrap)
  (export 'claylib/wrap::%%nearbyintl :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GAMEPAD-AXIS| :claylib/wrap)
  (export 'claylib/wrap::+%%uintptr-fmtx--+ :claylib/wrap)
  (export 'claylib/wrap::get-file-mod-time :claylib/wrap)
  (export 'claylib/wrap::fmal :claylib/wrap)
  (export 'claylib/wrap::get-directory-path :claylib/wrap)
  (export 'claylib/wrap::+%%u32-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinhf32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%use-isoc99+ :claylib/wrap)
  (export 'claylib/wrap::gui-fade :claylib/wrap)
  (export 'claylib/wrap::gui-slider :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2f64x+ :claylib/wrap)
  (export 'claylib/wrap::%%atan2 :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanf64x+ :claylib/wrap)
  (export 'claylib/wrap::gui-set-icon-data :claylib/wrap)
  (export 'claylib/wrap::vector3reflect :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-has-infinity--+ :claylib/wrap)
  (export 'claylib/wrap::%%fsfilcnt64-t :claylib/wrap)
  (export 'claylib/wrap::+%%long-max--+ :claylib/wrap)
  (export 'claylib/wrap::significandf :claylib/wrap)
  (export 'claylib/wrap::+%%int-least32-type--+ :claylib/wrap)
  (export 'claylib/wrap::lgamma-r :claylib/wrap)
  (export 'claylib/wrap::+%%math-declaring-double+ :claylib/wrap)
  (export 'claylib/wrap::+fp-ilogbnan+ :claylib/wrap)
  (export 'claylib/wrap::%%useconds-t :claylib/wrap)
  (export 'claylib/wrap::+%%x86-64+ :claylib/wrap)
  (export 'claylib/wrap::+gray+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinf64x+ :claylib/wrap)
  (export 'claylib/wrap::is-key-down :claylib/wrap)
  (export 'claylib/wrap::scalbln :claylib/wrap)
  (export 'claylib/wrap::check-collision-point-rec :claylib/wrap)
  (export 'claylib/wrap::restore-window :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-xyz :claylib/wrap)
  (export 'claylib/wrap::+%stdc-predef-h+ :claylib/wrap)
  (export 'claylib/wrap::+orange+ :claylib/wrap)
  (export 'claylib/wrap::%%scalbl :claylib/wrap)
  (export 'claylib/wrap::vertex-count :claylib/wrap)
  (export 'claylib/wrap::get-gamepad-name :claylib/wrap)
  (export 'claylib/wrap::attach-audio-stream-processor :claylib/wrap)
  (export 'claylib/wrap::+%bits-floatn-common-h+ :claylib/wrap)
  (export 'claylib/wrap::fovy :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expf32x+ :claylib/wrap)
  (export 'claylib/wrap::%%hypotl :claylib/wrap)
  (export 'claylib/wrap::set-music-pan :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-max-10-exp--+ :claylib/wrap)
  (export 'claylib/wrap::nanl :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanl+ :claylib/wrap)
  (export 'claylib/wrap::load-file-data :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinhf128+ :claylib/wrap)
  (export 'claylib/wrap::quaternion-invert :claylib/wrap)
  (export 'claylib/wrap::check-collision-box-sphere :claylib/wrap)
  (export 'claylib/wrap::gen-mesh-cylinder :claylib/wrap)
  (export 'claylib/wrap::play-sound :claylib/wrap)
  (export 'claylib/wrap::%%exp2 :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypot+ :claylib/wrap)
  (export 'claylib/wrap::text-to-pascal :claylib/wrap)
  (export 'claylib/wrap::scalblnl :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrtf128x+ :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-available :claylib/wrap)
  (export 'claylib/wrap::scalbn :claylib/wrap)
  (export 'claylib/wrap::matrix-identity :claylib/wrap)
  (export 'claylib/wrap::%%sqrtl :claylib/wrap)
  (export 'claylib/wrap::+%%math-declare-ldouble+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast32-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2f32+ :claylib/wrap)
  (export 'claylib/wrap::+%%size-width--+ :claylib/wrap)
  (export 'claylib/wrap::fdiml :claylib/wrap)
  (export 'claylib/wrap::%%lgamma :claylib/wrap)
  (export 'claylib/wrap::+%%stdc-iec-559-complex--+ :claylib/wrap)
  (export 'claylib/wrap::image-color-grayscale :claylib/wrap)
  (export 'claylib/wrap::scalbnl :claylib/wrap)
  (export 'claylib/wrap::%%remquo :claylib/wrap)
  (export 'claylib/wrap::fma :claylib/wrap)
  (export 'claylib/wrap::%%copysignl :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-lines :claylib/wrap)
  (export 'claylib/wrap::blend-mode :claylib/wrap)
  (export 'claylib/wrap::+%win32+ :claylib/wrap)
  (export 'claylib/wrap::image-draw :claylib/wrap)
  (export 'claylib/wrap::get-random-value :claylib/wrap)
  (export 'claylib/wrap::+%%int-least64-max--+ :claylib/wrap)
  (export 'claylib/wrap::+maroon+ :claylib/wrap)
  (export 'claylib/wrap::lens-separation-distance :claylib/wrap)
  (export 'claylib/wrap::%%ldexp :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanhl+ :claylib/wrap)
  (export 'claylib/wrap::maximize-window :claylib/wrap)
  (export 'claylib/wrap::vector2length :claylib/wrap)
  (export 'claylib/wrap::%%int8-t :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-logl+ :claylib/wrap)
  (export 'claylib/wrap::width :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-has-infinity--+ :claylib/wrap)
  (export 'claylib/wrap::is-window-hidden :claylib/wrap)
  (export 'claylib/wrap::+%%use-posix-implicitly+ :claylib/wrap)
  (export 'claylib/wrap::%%rintf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-logf+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2f+ :claylib/wrap)
  (export 'claylib/wrap::vector3one :claylib/wrap)
  (export 'claylib/wrap::+%%daddr-t-type+ :claylib/wrap)
  (export 'claylib/wrap::load-image-from-memory :claylib/wrap)
  (export 'claylib/wrap::set-window-title :claylib/wrap)
  (export 'claylib/wrap::%%isinff :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10f32x+ :claylib/wrap)
  (export 'claylib/wrap::trace-log-callback :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast32-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanhf+ :claylib/wrap)
  (export 'claylib/wrap::+%%flt-has-denorm--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erff32x+ :claylib/wrap)
  (export 'claylib/wrap::%%intmax-t :claylib/wrap)
  (export 'claylib/wrap::gui-message-box :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10f+ :claylib/wrap)
  (export 'claylib/wrap::gui-dropdown-box :claylib/wrap)
  (export 'claylib/wrap::gui-color-bar-hue :claylib/wrap)
  (export 'claylib/wrap::paths :claylib/wrap)
  (export 'claylib/wrap::stop-music-stream :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least16-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1pf128+ :claylib/wrap)
  (export 'claylib/wrap::gui-text-alignment :claylib/wrap)
  (export 'claylib/wrap::+%atfile-source+ :claylib/wrap)
  (export 'claylib/wrap::export-image-as-code :claylib/wrap)
  (export 'claylib/wrap::enable-event-waiting :claylib/wrap)
  (export 'claylib/wrap::set-sound-pan :claylib/wrap)
  (export 'claylib/wrap::%%blkcnt-t :claylib/wrap)
  (export 'claylib/wrap::fmod :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosf128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%order-big-endian--+ :claylib/wrap)
  (export 'claylib/wrap::matrix-determinant :claylib/wrap)
  (export 'claylib/wrap::fmodf :claylib/wrap)
  (export 'claylib/wrap::+fp-subnormal+ :claylib/wrap)
  (export 'claylib/wrap::codepoint-to-utf8 :claylib/wrap)
  (export 'claylib/wrap::update-model-animation :claylib/wrap)
  (export 'claylib/wrap::%%lgammaf-r :claylib/wrap)
  (export 'claylib/wrap::draw-cube-v :claylib/wrap)
  (export 'claylib/wrap::+%%flt-min-exp--+ :claylib/wrap)
  (export 'claylib/wrap::+darkgreen+ :claylib/wrap)
  (export 'claylib/wrap::+material-map-diffuse+ :claylib/wrap)
  (export 'claylib/wrap::window-should-close :claylib/wrap)
  (export 'claylib/wrap::gui-list-view-ex :claylib/wrap)
  (export 'claylib/wrap::take-screenshot :claylib/wrap)
  (export 'claylib/wrap::pause-music-stream :claylib/wrap)
  (export 'claylib/wrap::wait-time :claylib/wrap)
  (export 'claylib/wrap::lgammal :claylib/wrap)
  (export 'claylib/wrap::%%nexttowardf :claylib/wrap)
  (export 'claylib/wrap::c-cosh :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@SHADER-UNIFORM-DATA-TYPE|
          :claylib/wrap)
  (export 'claylib/wrap::draw-triangle-lines :claylib/wrap)
  (export 'claylib/wrap::gui-value-box :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-iec-60559-funcs-ext-c2x+
          :claylib/wrap)
  (export 'claylib/wrap::+%%dbl-max-exp--+ :claylib/wrap)
  (export 'claylib/wrap::+%%statfs-matches-statfs64+ :claylib/wrap)
  (export 'claylib/wrap::mouse-button :claylib/wrap)
  (export 'claylib/wrap::gui-default-property :claylib/wrap)
  (export 'claylib/wrap::compress-data :claylib/wrap)
  (export 'claylib/wrap::image-draw-line-v :claylib/wrap)
  (export 'claylib/wrap::model :claylib/wrap)
  (export 'claylib/wrap::%float64x :claylib/wrap)
  (export 'claylib/wrap::image-resize-nn :claylib/wrap)
  (export 'claylib/wrap::n-patch-layout :claylib/wrap)
  (export 'claylib/wrap::+%%suseconds64-t-type+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@CUBEMAP-LAYOUT| :claylib/wrap)
  (export 'claylib/wrap::+raylib-h+ :claylib/wrap)
  (export 'claylib/wrap::+%%atomic-relaxed+ :claylib/wrap)
  (export 'claylib/wrap::%%erfcl :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast32-max--+ :claylib/wrap)
  (export 'claylib/wrap::%%lrint :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-coshf64+ :claylib/wrap)
  (export 'claylib/wrap::vector3refract :claylib/wrap)
  (export 'claylib/wrap::+%%pragma-redefine-extname+ :claylib/wrap)
  (export 'claylib/wrap::point :claylib/wrap)
  (export 'claylib/wrap::%%y0l :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@SHADER-ATTRIBUTE-DATA-TYPE|
          :claylib/wrap)
  (export 'claylib/wrap::acosl :claylib/wrap)
  (export 'claylib/wrap::bone-info :claylib/wrap)
  (export 'claylib/wrap::gui-list-view-property :claylib/wrap)
  (export 'claylib/wrap::|C:@SA@--FSID-T| :claylib/wrap)
  (export 'claylib/wrap::%%signbitf :claylib/wrap)
  (export 'claylib/wrap::vector2rotate :claylib/wrap)
  (export 'claylib/wrap::gui-grid :claylib/wrap)
  (export 'claylib/wrap::gui-check-box :claylib/wrap)
  (export 'claylib/wrap::+%%ptrdiff-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::sqrtf :claylib/wrap)
  (export 'claylib/wrap::unload-font-data :claylib/wrap)
  (export 'claylib/wrap::wave :claylib/wrap)
  (export 'claylib/wrap::+green+ :claylib/wrap)
  (export 'claylib/wrap::draw-texture-n-patch :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosh+ :claylib/wrap)
  (export 'claylib/wrap::%%off64-t :claylib/wrap)
  (export 'claylib/wrap::quaternion-from-axis-angle :claylib/wrap)
  (export 'claylib/wrap::color-from-hsv :claylib/wrap)
  (export 'claylib/wrap::load-music-stream :claylib/wrap)
  (export 'claylib/wrap::check-collision-lines :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least8-max--+ :claylib/wrap)
  (export 'claylib/wrap::draw-pixel-v :claylib/wrap)
  (export 'claylib/wrap::%%ceilf :claylib/wrap)
  (export 'claylib/wrap::+%%ino-t-matches-ino64-t+ :claylib/wrap)
  (export 'claylib/wrap::gui-disable :claylib/wrap)
  (export 'claylib/wrap::%%sqrtf :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosf64+ :claylib/wrap)
  (export 'claylib/wrap::left-lens-center :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincos+ :claylib/wrap)
  (export 'claylib/wrap::gui-icon-text :claylib/wrap)
  (export 'claylib/wrap::copysign :claylib/wrap)
  (export 'claylib/wrap::log10 :claylib/wrap)
  (export 'claylib/wrap::draw-line-bezier-cubic :claylib/wrap)
  (export 'claylib/wrap::%%scalbnf :claylib/wrap)
  (export 'claylib/wrap::vector2clamp-value :claylib/wrap)
  (export 'claylib/wrap::+%%fd-setsize+ :claylib/wrap)
  (export 'claylib/wrap::glyph-count :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinhf16+ :claylib/wrap)
  (export 'claylib/wrap::+%%fsblkcnt-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-malloc--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinf16+ :claylib/wrap)
  (export 'claylib/wrap::logbf :claylib/wrap)
  (export 'claylib/wrap::%float64 :claylib/wrap)
  (export 'claylib/wrap::draw-cube-wires :claylib/wrap)
  (export 'claylib/wrap::+%%size-fm-tx--+ :claylib/wrap)
  (export 'claylib/wrap::+%%fortify-function+ :claylib/wrap)
  (export 'claylib/wrap::set-mouse-offset :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast8-max--+ :claylib/wrap)
  (export 'claylib/wrap::vector3 :claylib/wrap)
  (export 'claylib/wrap::pause-sound :claylib/wrap)
  (export 'claylib/wrap::set-trace-log-callback :claylib/wrap)
  (export 'claylib/wrap::color-alpha :claylib/wrap)
  (export 'claylib/wrap::property-value :claylib/wrap)
  (export 'claylib/wrap::view-offset :claylib/wrap)
  (export 'claylib/wrap::%%fmax :claylib/wrap)
  (export 'claylib/wrap::gui-set-style :claylib/wrap)
  (export 'claylib/wrap::gen-image-font-atlas :claylib/wrap)
  (export 'claylib/wrap::gui-slider-property :claylib/wrap)
  (export 'claylib/wrap::%%acoshf :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-mant-dig--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincosf32+ :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-gradient-ex :claylib/wrap)
  (export 'claylib/wrap::gui-slider-bar :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least8-type--+ :claylib/wrap)
  (export 'claylib/wrap::file-path-list :claylib/wrap)
  (export 'claylib/wrap::image-draw-text-ex :claylib/wrap)
  (export 'claylib/wrap::+%%char32-type--+ :claylib/wrap)
  (export 'claylib/wrap::begin-scissor-mode :claylib/wrap)
  (export 'claylib/wrap::unload-material :claylib/wrap)
  (export 'claylib/wrap::+nan+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sincosf64x+ :claylib/wrap)
  (export 'claylib/wrap::set-window-state :claylib/wrap)
  (export 'claylib/wrap::draw-texture :claylib/wrap)
  (export 'claylib/wrap::+%%have-float128-unlike-ldbl+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2f64+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2f128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-pointer-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::export-font-as-code :claylib/wrap)
  (export 'claylib/wrap::load-wave :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosf128+ :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-deprecated-scanf+
          :claylib/wrap)
  (export 'claylib/wrap::image :claylib/wrap)
  (export 'claylib/wrap::+%%intmax-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erff64x+ :claylib/wrap)
  (export 'claylib/wrap::%%lgammal-r :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2f16+ :claylib/wrap)
  (export 'claylib/wrap::+%%blksize-t-type+ :claylib/wrap)
  (export 'claylib/wrap::ray-collision :claylib/wrap)
  (export 'claylib/wrap::%%acoshl :claylib/wrap)
  (export 'claylib/wrap::ray :claylib/wrap)
  (export 'claylib/wrap::+%%atomic-consume+ :claylib/wrap)
  (export 'claylib/wrap::change-directory :claylib/wrap)
  (export 'claylib/wrap::get-gesture-hold-duration :claylib/wrap)
  (export 'claylib/wrap::+%%uintmax-max--+ :claylib/wrap)
  (export 'claylib/wrap::resume-audio-stream :claylib/wrap)
  (export 'claylib/wrap::+huge-vall+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinf64+ :claylib/wrap)
  (export 'claylib/wrap::frexpf :claylib/wrap)
  (export 'claylib/wrap::image-format :claylib/wrap)
  (export 'claylib/wrap::lrint :claylib/wrap)
  (export 'claylib/wrap::significand :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@TEXTURE-WRAP| :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@BLEND-MODE| :claylib/wrap)
  (export 'claylib/wrap::init-window :claylib/wrap)
  (export 'claylib/wrap::get-pixel-data-size :claylib/wrap)
  (export 'claylib/wrap::image-from-image :claylib/wrap)
  (export 'claylib/wrap::+%%clang-literal-encoding--+ :claylib/wrap)
  (export 'claylib/wrap::llrintf :claylib/wrap)
  (export 'claylib/wrap::+yellow+ :claylib/wrap)
  (export 'claylib/wrap::m10 :claylib/wrap)
  (export 'claylib/wrap::load-image-palette :claylib/wrap)
  (export 'claylib/wrap::vector3rotate-by-axis-angle :claylib/wrap)
  (export 'claylib/wrap::erfc :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp2f16+ :claylib/wrap)
  (export 'claylib/wrap::get-touch-y :claylib/wrap)
  (export 'claylib/wrap::+%%gnu-library--+ :claylib/wrap)
  (export 'claylib/wrap::y1l :claylib/wrap)
  (export 'claylib/wrap::+%%int64-type--+ :claylib/wrap)
  (export 'claylib/wrap::meshes :claylib/wrap)
  (export 'claylib/wrap::texcoords2 :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosf128x+ :claylib/wrap)
  (export 'claylib/wrap::nextafterl :claylib/wrap)
  (export 'claylib/wrap::roundf :claylib/wrap)
  (export 'claylib/wrap::+%%mode-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%math-declaring-floatn+ :claylib/wrap)
  (export 'claylib/wrap::gui-toggle-group :claylib/wrap)
  (export 'claylib/wrap::gui-set-state :claylib/wrap)
  (export 'claylib/wrap::+%%amd64+ :claylib/wrap)
  (export 'claylib/wrap::interpupillary-distance :claylib/wrap)
  (export 'claylib/wrap::+%%uint64-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::matrix-multiply :claylib/wrap)
  (export 'claylib/wrap::vector3normalize :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-pitch :claylib/wrap)
  (export 'claylib/wrap::get-window-position :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanhf64x+ :claylib/wrap)
  (export 'claylib/wrap::vector3ortho-normalize :claylib/wrap)
  (export 'claylib/wrap::set-camera-pan-control :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-expm1f32+ :claylib/wrap)
  (export 'claylib/wrap::%%atan2f :claylib/wrap)
  (export 'claylib/wrap::significandl :claylib/wrap)
  (export 'claylib/wrap::play-audio-stream :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-tanh+ :claylib/wrap)
  (export 'claylib/wrap::+%%uintptr-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::+%%fsword-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%glibc--+ :claylib/wrap)
  (export 'claylib/wrap::c-tanh :claylib/wrap)
  (export 'claylib/wrap::load-model :claylib/wrap)
  (export 'claylib/wrap::+%%cfloat64+ :claylib/wrap)
  (export 'claylib/wrap::get-image-alpha-border :claylib/wrap)
  (export 'claylib/wrap::%%fmodf :claylib/wrap)
  (export 'claylib/wrap::+%%seg-gs+ :claylib/wrap)
  (export 'claylib/wrap::get-monitor-physical-width :claylib/wrap)
  (export 'claylib/wrap::vertices :claylib/wrap)
  (export 'claylib/wrap::materials :claylib/wrap)
  (export 'claylib/wrap::set-clipboard-text :claylib/wrap)
  (export 'claylib/wrap::matrix-perspective :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-acosf+ :claylib/wrap)
  (export 'claylib/wrap::+%%decimal-dig--+ :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-int--+ :claylib/wrap)
  (export 'claylib/wrap::set-model-mesh-material :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypotf128+ :claylib/wrap)
  (export 'claylib/wrap::set-master-volume :claylib/wrap)
  (export 'claylib/wrap::copysignf :claylib/wrap)
  (export 'claylib/wrap::+%%have-float128+ :claylib/wrap)
  (export 'claylib/wrap::gui-is-locked :claylib/wrap)
  (export 'claylib/wrap::image-draw-rectangle-v :claylib/wrap)
  (export 'claylib/wrap::update-sound :claylib/wrap)
  (export 'claylib/wrap::gui-get-icons :claylib/wrap)
  (export 'claylib/wrap::frexp :claylib/wrap)
  (export 'claylib/wrap::fdim :claylib/wrap)
  (export 'claylib/wrap::swap-screen-buffer :claylib/wrap)
  (export 'claylib/wrap::%%rintl :claylib/wrap)
  (export 'claylib/wrap::+%%uint64-max--+ :claylib/wrap)
  (export 'claylib/wrap::vector3add :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinf128+ :claylib/wrap)
  (export 'claylib/wrap::%%cbrt :claylib/wrap)
  (export 'claylib/wrap::unload-file-text :claylib/wrap)
  (export 'claylib/wrap::+%%flt-radix--+ :claylib/wrap)
  (export 'claylib/wrap::+%%clang-patchlevel--+ :claylib/wrap)
  (export 'claylib/wrap::open-url :claylib/wrap)
  (export 'claylib/wrap::c-sin :claylib/wrap)
  (export 'claylib/wrap::%%suseconds-t :claylib/wrap)
  (export 'claylib/wrap::get-mouse-wheel-move :claylib/wrap)
  (export 'claylib/wrap::+%%wordsize+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cbrtf16+ :claylib/wrap)
  (export 'claylib/wrap::vector2zero :claylib/wrap)
  (export 'claylib/wrap::+%%clang-atomic-char-lock-free+
          :claylib/wrap)
  (export 'claylib/wrap::vector2distance :claylib/wrap)
  (export 'claylib/wrap::+%%have-generic-selection+ :claylib/wrap)
  (export 'claylib/wrap::+%%mathcall-narrow-redir+ :claylib/wrap)
  (export 'claylib/wrap::resume-sound :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log10f64x+ :claylib/wrap)
  (export 'claylib/wrap::gammal :claylib/wrap)
  (export 'claylib/wrap::draw-circle-sector-lines :claylib/wrap)
  (export 'claylib/wrap::c-asin :claylib/wrap)
  (export 'claylib/wrap::truncl :claylib/wrap)
  (export 'claylib/wrap::get-ray-collision-box :claylib/wrap)
  (export 'claylib/wrap::%%fmodl :claylib/wrap)
  (export 'claylib/wrap::%%uint32-t :claylib/wrap)
  (export 'claylib/wrap::%%id-t :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@MOUSE-CURSOR| :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle-rounded :claylib/wrap)
  (export 'claylib/wrap::get-music-time-played :claylib/wrap)
  (export 'claylib/wrap::%%cbrtf :claylib/wrap)
  (export 'claylib/wrap::draw-model :claylib/wrap)
  (export 'claylib/wrap::%%fmaf :claylib/wrap)
  (export 'claylib/wrap::m14 :claylib/wrap)
  (export 'claylib/wrap::is-file-extension :claylib/wrap)
  (export 'claylib/wrap::+%%int-least8-max--+ :claylib/wrap)
  (export 'claylib/wrap::draw-cylinder-wires :claylib/wrap)
  (export 'claylib/wrap::%%isnanf :claylib/wrap)
  (export 'claylib/wrap::gui-color-bar-alpha :claylib/wrap)
  (export 'claylib/wrap::n-patch-info :claylib/wrap)
  (export 'claylib/wrap::*signgam* :claylib/wrap)
  (export 'claylib/wrap::+rl-vector4-type+ :claylib/wrap)
  (export 'claylib/wrap::get-time :claylib/wrap)
  (export 'claylib/wrap::%%fabsl :claylib/wrap)
  (export 'claylib/wrap::y0 :claylib/wrap)
  (export 'claylib/wrap::load-font-data :claylib/wrap)
  (export 'claylib/wrap::%%tanh :claylib/wrap)
  (export 'claylib/wrap::clear-background :claylib/wrap)
  (export 'claylib/wrap::+huge-val+ :claylib/wrap)
  (export 'claylib/wrap::+%%intmax-type--+ :claylib/wrap)
  (export 'claylib/wrap::vector2scale :claylib/wrap)
  (export 'claylib/wrap::+%%int32-max--+ :claylib/wrap)
  (export 'claylib/wrap::gen-image-gradient-h :claylib/wrap)
  (export 'claylib/wrap::+%%int16-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%ssize-t-type+ :claylib/wrap)
  (export 'claylib/wrap::is-gamepad-button-down :claylib/wrap)
  (export 'claylib/wrap::+%%restrict-arr+ :claylib/wrap)
  (export 'claylib/wrap::fabsf :claylib/wrap)
  (export 'claylib/wrap::%%asinf :claylib/wrap)
  (export 'claylib/wrap::+%%mathdecl-1-impl+ :claylib/wrap)
  (export 'claylib/wrap::is-audio-stream-processed :claylib/wrap)
  (export 'claylib/wrap::%%copysign :claylib/wrap)
  (export 'claylib/wrap::%%fmaxf :claylib/wrap)
  (export 'claylib/wrap::+%%off-t-matches-off64-t+ :claylib/wrap)
  (export 'claylib/wrap::asinhf :claylib/wrap)
  (export 'claylib/wrap::vector3perpendicular :claylib/wrap)
  (export 'claylib/wrap::get-shader-location-attrib :claylib/wrap)
  (export 'claylib/wrap::remquo :claylib/wrap)
  (export 'claylib/wrap::ilogb :claylib/wrap)
  (export 'claylib/wrap::set-texture-wrap :claylib/wrap)
  (export 'claylib/wrap::cbrtl :claylib/wrap)
  (export 'claylib/wrap::+m-log2e+ :claylib/wrap)
  (export 'claylib/wrap::m5 :claylib/wrap)
  (export 'claylib/wrap::%%caddr-t :claylib/wrap)
  (export 'claylib/wrap::set-sound-volume :claylib/wrap)
  (export 'claylib/wrap::%%y0 :claylib/wrap)
  (export 'claylib/wrap::sinf :claylib/wrap)
  (export 'claylib/wrap::vector3equals :claylib/wrap)
  (export 'claylib/wrap::log10l :claylib/wrap)
  (export 'claylib/wrap::%%pid-t :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least16-type--+ :claylib/wrap)
  (export 'claylib/wrap::y1f :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-iec-60559-bfp-ext-c2x+
          :claylib/wrap)
  (export 'claylib/wrap::+%%flt-eval-method--+ :claylib/wrap)
  (export 'claylib/wrap::+%%rlim-t-type+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atan2f128x+ :claylib/wrap)
  (export 'claylib/wrap::image-draw-rectangle-rec :claylib/wrap)
  (export 'claylib/wrap::+%%intmax-max--+ :claylib/wrap)
  (export 'claylib/wrap::gui-spinner :claylib/wrap)
  (export 'claylib/wrap::c-atanh :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-atanhf128+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint32-max--+ :claylib/wrap)
  (export 'claylib/wrap::%%fsword-t :claylib/wrap)
  (export 'claylib/wrap::draw-line-ex :claylib/wrap)
  (export 'claylib/wrap::get-codepoint-count :claylib/wrap)
  (export 'claylib/wrap::v-resolution :claylib/wrap)
  (export 'claylib/wrap::is-window-resized :claylib/wrap)
  (export 'claylib/wrap::base-size :claylib/wrap)
  (export 'claylib/wrap::sinhf :claylib/wrap)
  (export 'claylib/wrap::get-char-pressed :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinf128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%ldbl-has-denorm--+ :claylib/wrap)
  (export 'claylib/wrap::double-t :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-asinf128+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast64-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::+%%k8+ :claylib/wrap)
  (export 'claylib/wrap::+%%nlink-t-type+ :claylib/wrap)
  (export 'claylib/wrap::atan2 :claylib/wrap)
  (export 'claylib/wrap::llrintl :claylib/wrap)
  (export 'claylib/wrap::set-audio-stream-buffer-size-default
          :claylib/wrap)
  (export 'claylib/wrap::+%%int8-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::nexttowardl :claylib/wrap)
  (export 'claylib/wrap::text-format :claylib/wrap)
  (export 'claylib/wrap::normalize :claylib/wrap)
  (export 'claylib/wrap::vector3dot-product :claylib/wrap)
  (export 'claylib/wrap::+%%glibc-use-iec-60559-funcs-ext+
          :claylib/wrap)
  (export 'claylib/wrap::+%%atomic-release+ :claylib/wrap)
  (export 'claylib/wrap::%%nan :claylib/wrap)
  (export 'claylib/wrap::%%fdimf :claylib/wrap)
  (export 'claylib/wrap::mipmaps :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-hypotf32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%pic--+ :claylib/wrap)
  (export 'claylib/wrap::+%bits-typesizes-h+ :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-int128--+ :claylib/wrap)
  (export 'claylib/wrap::%%ynf :claylib/wrap)
  (export 'claylib/wrap::bounding-box :claylib/wrap)
  (export 'claylib/wrap::+%%use-posix199309+ :claylib/wrap)
  (export 'claylib/wrap::draw-cylinder :claylib/wrap)
  (export 'claylib/wrap::+%%ptrdiff-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::texcoords :claylib/wrap)
  (export 'claylib/wrap::color-to-int :claylib/wrap)
  (export 'claylib/wrap::nextafterf :claylib/wrap)
  (export 'claylib/wrap::+%%int8-max--+ :claylib/wrap)
  (export 'claylib/wrap::keyboard-key :claylib/wrap)
  (export 'claylib/wrap::unload-directory-files :claylib/wrap)
  (export 'claylib/wrap::bottom :claylib/wrap)
  (export 'claylib/wrap::%%int-least16-t :claylib/wrap)
  (export 'claylib/wrap::scale-in :claylib/wrap)
  (export 'claylib/wrap::buffer :claylib/wrap)
  (export 'claylib/wrap::gui-get-font :claylib/wrap)
  (export 'claylib/wrap::vector2 :claylib/wrap)
  (export 'claylib/wrap::vector3invert :claylib/wrap)
  (export 'claylib/wrap::vector2multiply :claylib/wrap)
  (export 'claylib/wrap::check-collision-point-line :claylib/wrap)
  (export 'claylib/wrap::+%%intmax-fm-td--+ :claylib/wrap)
  (export 'claylib/wrap::ilogbl :claylib/wrap)
  (export 'claylib/wrap::%%cosh :claylib/wrap)
  (export 'claylib/wrap::+%%leaf+ :claylib/wrap)
  (export 'claylib/wrap::+%%stdc-iec-60559-complex--+ :claylib/wrap)
  (export 'claylib/wrap::+%%sig-atomic-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%pointer-width--+ :claylib/wrap)
  (export 'claylib/wrap::+%%clang-minor--+ :claylib/wrap)
  (export 'claylib/wrap::draw-grid :claylib/wrap)
  (export 'claylib/wrap::+%%uint64-fm-tu--+ :claylib/wrap)
  (export 'claylib/wrap::matrix-rotate-y :claylib/wrap)
  (export 'claylib/wrap::atanhf :claylib/wrap)
  (export 'claylib/wrap::+m-pi+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-fast16-max--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-erfcf64+ :claylib/wrap)
  (export 'claylib/wrap::draw-ray :claylib/wrap)
  (export 'claylib/wrap::atanl :claylib/wrap)
  (export 'claylib/wrap::+violet+ :claylib/wrap)
  (export 'claylib/wrap::+%%uintmax-width--+ :claylib/wrap)
  (export 'claylib/wrap::+%%int-max--+ :claylib/wrap)
  (export 'claylib/wrap::%%sig-atomic-t :claylib/wrap)
  (export 'claylib/wrap::hit :claylib/wrap)
  (export 'claylib/wrap::get-application-directory :claylib/wrap)
  (export 'claylib/wrap::%%issignalingf :claylib/wrap)
  (export 'claylib/wrap::disable-cursor :claylib/wrap)
  (export 'claylib/wrap::%%powf :claylib/wrap)
  (export 'claylib/wrap::+%%int-least16-fm-ti--+ :claylib/wrap)
  (export 'claylib/wrap::h-resolution :claylib/wrap)
  (export 'claylib/wrap::gen-texture-mipmaps :claylib/wrap)
  (export 'claylib/wrap::isinfl :claylib/wrap)
  (export 'claylib/wrap::+shader-loc-map-diffuse+ :claylib/wrap)
  (export 'claylib/wrap::float-t :claylib/wrap)
  (export 'claylib/wrap::set-save-file-text-callback :claylib/wrap)
  (export 'claylib/wrap::%%lround :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinl+ :claylib/wrap)
  (export 'claylib/wrap::%%uint16-t :claylib/wrap)
  (export 'claylib/wrap::+bool+ :claylib/wrap)
  (export 'claylib/wrap::get-window-handle :claylib/wrap)
  (export 'claylib/wrap::is-key-pressed :claylib/wrap)
  (export 'claylib/wrap::%%coshl :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast32-type--+ :claylib/wrap)
  (export 'claylib/wrap::gui-dummy-rec :claylib/wrap)
  (export 'claylib/wrap::image-mipmaps :claylib/wrap)
  (export 'claylib/wrap::load-wave-from-memory :claylib/wrap)
  (export 'claylib/wrap::+%%stdarg-h+ :claylib/wrap)
  (export 'claylib/wrap::+%%rlim-t-matches-rlim64-t+ :claylib/wrap)
  (export 'claylib/wrap::set-camera-move-controls :claylib/wrap)
  (export 'claylib/wrap::get-collision-rec :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-PROGRESS-BAR-PROPERTY|
          :claylib/wrap)
  (export 'claylib/wrap::%%roundf :claylib/wrap)
  (export 'claylib/wrap::set-load-file-text-callback :claylib/wrap)
  (export 'claylib/wrap::vector2subtract :claylib/wrap)
  (export 'claylib/wrap::+%%mathcall-narrow-args-3+ :claylib/wrap)
  (export 'claylib/wrap::load-codepoints :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1pf64+ :claylib/wrap)
  (export 'claylib/wrap::draw-ellipse-lines :claylib/wrap)
  (export 'claylib/wrap::%%signbit :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-exp10f32x+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-sinhf128x+ :claylib/wrap)
  (export 'claylib/wrap::+%%s64-type+ :claylib/wrap)
  (export 'claylib/wrap::is-file-dropped :claylib/wrap)
  (export 'claylib/wrap::set-shader-value :claylib/wrap)
  (export 'claylib/wrap::+%%uintptr-max--+ :claylib/wrap)
  (export 'claylib/wrap::draw-line :claylib/wrap)
  (export 'claylib/wrap::modff :claylib/wrap)
  (export 'claylib/wrap::draw-line-v :claylib/wrap)
  (export 'claylib/wrap::directory-exists :claylib/wrap)
  (export 'claylib/wrap::+%%attribute-returns-twice--+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-powf128x+ :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@GUI-DEFAULT-PROPERTY| :claylib/wrap)
  (export 'claylib/wrap::+%%sizeof-short--+ :claylib/wrap)
  (export 'claylib/wrap::%%sinhl :claylib/wrap)
  (export 'claylib/wrap::a :claylib/wrap)
  (export 'claylib/wrap::get-mesh-bounding-box :claylib/wrap)
  (export 'claylib/wrap::eye-to-screen-distance :claylib/wrap)
  (export 'claylib/wrap::resume-music-stream :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log2+ :claylib/wrap)
  (export 'claylib/wrap::exp2f :claylib/wrap)
  (export 'claylib/wrap::+%%int64-max--+ :claylib/wrap)
  (export 'claylib/wrap::draw-rectangle :claylib/wrap)
  (export 'claylib/wrap::get-mouse-y :claylib/wrap)
  (export 'claylib/wrap::+%%uint-fast8-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::+raylib-version+ :claylib/wrap)
  (export 'claylib/wrap::draw-line-bezier-quad :claylib/wrap)
  (export 'claylib/wrap::draw-cylinder-wires-ex :claylib/wrap)
  (export 'claylib/wrap::quaternion-subtract :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-log1pf+ :claylib/wrap)
  (export 'claylib/wrap::fmaf :claylib/wrap)
  (export 'claylib/wrap::draw-triangle-strip :claylib/wrap)
  (export 'claylib/wrap::v-screen-size :claylib/wrap)
  (export 'claylib/wrap::%%acosh :claylib/wrap)
  (export 'claylib/wrap::lens-distortion-values :claylib/wrap)
  (export 'claylib/wrap::draw-ellipse :claylib/wrap)
  (export 'claylib/wrap::hypot :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-logf64+ :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-cosl+ :claylib/wrap)
  (export 'claylib/wrap::+%%uint-least16-fm-to--+ :claylib/wrap)
  (export 'claylib/wrap::get-touch-x :claylib/wrap)
  (export 'claylib/wrap::gui-set-icon-scale :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@MOUSE-BUTTON| :claylib/wrap)
  (export 'claylib/wrap::yn :claylib/wrap)
  (export 'claylib/wrap::+%%uint64-c-suffix--+ :claylib/wrap)
  (export 'claylib/wrap::get-camera-matrix :claylib/wrap)
  (export 'claylib/wrap::quaternion-scale :claylib/wrap)
  (export 'claylib/wrap::image-flip-horizontal :claylib/wrap)
  (export 'claylib/wrap::is-model-animation-valid :claylib/wrap)
  (export 'claylib/wrap::c-format :claylib/wrap)
  (export 'claylib/wrap::%%issignaling :claylib/wrap)
  (export 'claylib/wrap::float3 :claylib/wrap)
  (export 'claylib/wrap::%%j1 :claylib/wrap)
  (export 'claylib/wrap::get-monitor-width :claylib/wrap)
  (export 'claylib/wrap::frexpl :claylib/wrap)
  (export 'claylib/wrap::is-window-fullscreen :claylib/wrap)
  (export 'claylib/wrap::unload-audio-stream :claylib/wrap)
  (export 'claylib/wrap::unload-wave-samples :claylib/wrap)
  (export 'claylib/wrap::log2 :claylib/wrap)
  (export 'claylib/wrap::font-type :claylib/wrap)
  (export 'claylib/wrap::get-screen-to-world2d :claylib/wrap)
  (export 'claylib/wrap::gammaf :claylib/wrap)
  (export 'claylib/wrap::|C:@EA@CAMERA-PROJECTION| :claylib/wrap)
  (export 'claylib/wrap::get-codepoint :claylib/wrap)
  (export 'claylib/wrap::gen-image-checked :claylib/wrap)
  (export 'claylib/wrap::+%%decl-simd-logf128x+ :claylib/wrap)
  (export 'claylib/wrap::get-monitor-refresh-rate :claylib/wrap)
  (export 'claylib/wrap::update-audio-stream :claylib/wrap))

